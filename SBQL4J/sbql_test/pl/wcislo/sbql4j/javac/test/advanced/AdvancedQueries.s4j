package pl.wcislo.sbql4j.javac.test.advanced;

import java.util.List;
import pl.wcislo.sbql4j.javac.test.advanced.model.Address;
import pl.wcislo.sbql4j.javac.test.advanced.model.Department;
import pl.wcislo.sbql4j.javac.test.advanced.model.Employee;

import pl.wcislo.sbql4j.java.model.runtime.Struct;

public class AdvancedQueries {
	
	/**
	 * Get departments together with the average salaries of their employees
	 */
	public void query1() {
		List<Department> depts = data.getDepts();
		List<Struct> deptAvgSal = #{
			depts join avg(employs.salary)
		};
		for(Struct s : deptAvgSal) {
			Department dept = (Department)s.get(0);
			Double avgSal = (Double)s.get(1);
			System.out.println("Department "+dept.getName()+" has average salary: "+avgSal);
		}
	}
	
	/**
	 * Get name, salary and department name for employees earning less than 2222
	 */
	public void query2() {
//		(Emp where salary < 2222).(name, salary, worksIn.Dept.name)
	}
	
	/**
	 * Get names of employees working for the department managed by Bert.
	 */
	public void query3() {
//		(Emp where (worksIn.Dept.boss.Emp.name) = "Bert").name;
	}
	
	/**
	 * Get the name of Poe's boss:
	 */
	public void query4() {
//		(Emp where name = "Poe").worksIn.Dept.boss.Emp.name;
	}
	
	/**
	 * Names and cities of employees working in departments managed by Bert
	 */
	public void query5() {
//		   (Dept where (boss.Emp.name) = "Bert").employs.Emp.(name, (deref(address.city) union
//		             ("No address" where not exists(address))));
//		   (Dept where (boss.Emp.name) = "Bert").employs.Emp.(name as name, ((deref(address.city) union
//
//		             ("No address" where not exists(address)))) as city) as empcity;
	}
	
	/**
	 * Get the minimal, average and maximal number of employees in departments
	 */
	public void query6() {
//		min(Dept.count(employs)), avg(Dept.count(employs)), max(Dept.count(employs));
//		((Dept.count(employs)) groupas counts).(min(counts), avg(counts), max(counts));
	}
	
	/**
	 * For each department get its name and the sum of salaries of employees being not bosses
	 */
	public void query7() {
//		(((Dept as d) join ((sum(d.employs.Emp.salary) - (d.boss.Emp.salary)) as s)).(d.name, s))
	}
	
	/**
	 * Is it true that each department employs an employee earning the same as his/her boss?
	 */
	public void query8() {
//		   forall (Dept as d)
//
//		   forsome ((d.employs.Emp subtract d.boss.Emp) as e)
//
//		   (e.salary = d.boss.Emp.salary);
	}
	
	/**
	 * For each employee get the message containing his/her name and
   	 * the percent of the annual budget of his/her department that is
	 * consumed by his/her monthly salary
	 */
	public void query9() {
//		   Emp.("Employee " + name + " consumes " + (salary * 12 * 100 /(worksIn.Dept.budget)) +
//				   "% of the " + worksIn.Dept.name + " department budget.");
	}
	
	/**
	 * Get cities hosting all departments
	 */
	public void query10() {
//		(unique(deref(Dept.location)) as deptcity) where forall(Dept)(deptcity in location)
	}
	
	/**
	 * For each interval <n,n+999>, n = 0, 1000, 2000, 3000, ... get the message
	 * (string) containing the number of employees having the salary within this interval
     * and the interval itself.
	 * Output messages should have proper grammatical forms (suffixes -s for nouns (n) and verbs (v)).
	 */
	public void query11() {
//		(0 as i closeby  (i+1000 where i <= max(Emp.salary)) as i)
//		   join (count(Emp where salary >= i and salary < i+1000) as c)
//		   join ((if c=1 then ("" as n, "s" as v) else ("s" as n, "" as v)).
//		   (c + " employee" + n + " earn"+ v +" between "+ i +" and " + (i+999)) as message);
	}
	
	/**
	 * For each location give the set of department names that are located at it and
	 * the average salary of bosses of these departments, providing that
	 * the number of clerks that are employed at such a location is lower than 100.
	 */
	public void query12() {
//		(unique(deref(Dept.location)) as deptcity).
//	    ((((Dept where deptcity in location) groupas citydepts)
//	    where count(citydepts.employs.(Emp where job = "clerk")) < 100).
//	    (deptcity as cityLocation,
//	     (citydepts.name) groupas cityDeptNames,
//	     avg(citydepts.boss.Emp.salary) as cityDeptBossAvgSal));
	}
	
	
	private AdvQueriesExampleData data = new AdvQueriesExampleData();
}
