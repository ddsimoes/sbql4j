package pl.wcislo.sbql4j.javac.test.linq_comp;

import pl.wcislo.sbql4j.javac.test.linq_comp.model.*;
import pl.wcislo.sbql4j.java.model.runtime.Struct;
import java.io.Console;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.*;

public class LinqComparison {

    @SuppressWarnings("all")
	public static void main(String[] args) {
    	new LinqComparison();
	}

    public LinqComparison() {
    	long t1 = System.currentTimeMillis();
//    	for(int i=0; i<1000; i++) {
//    	linq1();
//    	linq2();
//    	linq3();
//    	linq4();
//    	linq5();
//    	linq6();
//    	linq7();
//    	linq8();
//    	linq9();
//    	linq10();
//    	linq11();
//    	linq12();
//    	linq13();
//    	linq14();
//    	linq15();
//    	linq16();
//    	linq17();
//    	linq18();
//    	linq19();
//    	linq20();
//    	linq21();
//    	linq22();
//    	linq23();
//    	linq28();
//    	linq29();
//    	linq30();
//    	linq31();
//    	linq32();
//    	linq33();
//    	linq34();
//    	linq35();
//    	linq36();
//    	linq37();
//    	linq38();
//    	linq39();
//    	linq40();
//    	linq41();
//    	linq42();
//    	linq43();
//    	linq44();
//    	linq45(); //nie zrobione
//    	linq46();
//    	linq47();
//    	linq48();
//    	linq49();
//    	linq50();
//    	linq51(); //OK
//    	linq52(); //OK
//    	linq53(); //OK
//    	linq54(); //OK
//    	linq55(); //OK
//////    	linq56(); //currently no equivalent operator in sbql4j
    	linq57(); 
//    	linq58(); //OK
//    	linq59(); //OK
//    	linq62(); //OK
//    	linq64(); //OK
//    	linq65(); //
//    	linq67(); //OK
//    	linq69(); //OK
//    	linq70(); //OK
//    	linq72(); //OK
//    	linq73(); //OK
//    	linq74(); //OK
//    	linq76(); //OK
//    	linq77(); //OK
//    	linq78(); //OK
//    	linq79(); //OK
//    	linq80(); //OK
//    	linq81(); //OK
//    	linq82(); //OK
//    	linq83(); //OK
//    	linq84(); //OK
//    	linq85(); //OK
//    	linq86(); //OK
//    	linq87(); //OK
//    	linq88(); //OK
//    	linq89(); //OK
//    	linq90(); //OK
//    	linq91(); //OK
//    	linq94(); //OK
//    	linq95(); //OK
//    	linq96(); //OK
//    	linq97(); //OK
//    	}
    	long t2 = System.currentTimeMillis();
    	long time = (t2 - t1);
//    	System.out.println(time);
    	PrintWriter pw;
		try {
			pw = new PrintWriter("time.txt");
			pw.append("time:"+(t2 - t1));
			pw.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
    
    public void linq1() {
//        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//
//        var lowNums =
//            from n in numbers
//            where n < 5
//            select n;
//
//        Console.WriteLine("Numbers < 5:");
//        foreach (var x in lowNums)
//        {
//            Console.WriteLine(x);
//        }
    	int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
    	List<Integer> lowNums = #{
    		numbers as n 
    		where n < 5
    	};
    	
    	System.out.println("Numbers < 5:");
    	System.out.println(lowNums);
    }
    
    public void linq2() {
//        List<Product> products = GetProductList();
//
//        var soldOutProducts =
//            from p in products
//            where p.UnitsInStock == 0
//            select p;
//
//        Console.WriteLine("Sold out products:");
//        foreach (var product in soldOutProducts)
//        {
//            Console.WriteLine("{0} is sold out!", product.ProductName);
//        }
    	
    	List<Product> products = getProductList();
    	List<Product> soldOutProducts  = #{
    		((products as p) as d)
    		where d.p.unitsInStock == 0
    	};
    	System.out.println("Sold out products:");
        for(Product product : soldOutProducts) {
        	System.out.printf("%s is sold out!\n", product.productName);
        }
    }
	
    public void linq3() {
//        List<Product> products = GetProductList();
//
//        var expensiveInStockProducts =
//            from p in products
//            where p.UnitsInStock > 0 && p.UnitPrice > 3.00M
//            select p;
//
//        Console.WriteLine("In-stock products that cost more than 3.00:");
//        foreach (var product in expensiveInStockProducts)
//        {
//            Console.WriteLine("{0} is in stock and costs more than 3.00.", product.ProductName);
//        }
    	List<Product> products = getProductList();
    	List<Product> expensiveInStockProducts = #{
    		products 
    		where unitsInStock > 0 and unitPrice > 3.00
    	};
    	System.out.println("In-stock products that cost more than 3.00:");
        for(Product product : expensiveInStockProducts) {
        	System.out.printf("%s is in stock and costs more than 3.00.\n", product.productName);
        }
    }
    
    public void linq4() {
//    	 List<Customer> customers = GetCustomerList();
//
//         var waCustomers =
//             from c in customers
//             where c.Region == "WA"
//             select c;
//         
//         Console.WriteLine("Customers from Washington and their orders:");
//         foreach (var customer in waCustomers) {
//             Console.WriteLine("Customer {0}: {1}", customer.CustomerID, customer.CompanyName);
//             foreach (var order in customer.Orders) {
//                 Console.WriteLine("  Order {0}: {1}", order.OrderID, order.OrderDate);
//             }
//         }
    	List<Customer> customers = getCustomerList();
    	List<Customer> waCustomers = #{
    		customers where region == "WA"
    	};
    	System.out.println("Customers from Washington and their orders:");
    	for(Customer customer : waCustomers) {
    		System.out.printf("Customer %s: %s\n", customer.customerID, customer.companyName);
    		for(Order order : customer.orders) {
    			System.out.printf("  Order %s: %s\n", order.orderID, order.orderDate);
    		}
    	}
    }
    
    public void linq5() {
//        string[] digits = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
//
//        var shortDigits = digits.Where((digit, index) => digit.Length < index);
//    
//        Console.WriteLine("Short digits:");
//        foreach (var d in shortDigits) {
//            Console.WriteLine("The word {0} is shorter than its value.", d);
//        }
    	String[] digits = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
    	List<String> shortDigits = #{
    		digits where length() < $index
    	};
    	System.out.println("Short digits:");
    	for(String d : shortDigits) {
    		System.out.printf("The word %s is shorter than its value.\n", d);
    	}
    }
    
    public void linq6() {
//        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//
//        var numsPlusOne =
//            from n in numbers
//            select n + 1;
//        
//        Console.WriteLine("Numbers + 1:");
//        foreach (var i in numsPlusOne) {
//            Console.WriteLine(i);
//        }
    	int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
    	List<Integer> numsPlusOne = #{
    		(numbers as n).
    		(n + 1)
    	};
//    	List<Integer> numsPlusOne = #{numbers as n+1};
    	System.out.println("Numbers + 1:");
      	for(Integer i : numsPlusOne) {
      		System.out.println(i);
      	}
    }
    
    /**
     * This sample uses select to return a sequence of just the names of a list of products.
     */
    public void linq7() {
//        List<Product> products = GetProductList();
//
//        var productNames =
//            from p in products
//            select p.ProductName;
//        
//        Console.WriteLine("Product Names:");
//        foreach (var productName in productNames) {
//            Console.WriteLine(productName);
//        }
    	List<Product> products = getProductList();
    	List<String> productNames = #{
    		products.productName
    	};
    	System.out.println("Product Names:");
    	for(String productName : productNames) {
    		System.out.println(productName);
    	}
    }
    
    /**
     * This sample uses select to produce a sequence of strings representing 
     * the text version of a sequence of ints.
     */
    public void linq8() {
//    	  int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//          string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
//
//          var textNums = 
//              from n in numbers
//              select strings[n];
//          
//          Console.WriteLine("Number strings:");
//          foreach (var s in textNums) {
//              Console.WriteLine(s);
//          }           
    	int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
    	String[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
    	List<String> textNums = #{
    		(numbers as n).
    		(strings[n])
    	};
    	System.out.println("Number strings:");
    	for(String s : textNums) {
    		System.out.println(s);
    	}
    }
    
    /**
     * This sample uses select to produce a sequence of the uppercase
     * and lowercase versions of each word in the original array.
     */
    public void linq9() {
//    	string[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" };
//
//        var upperLowerWords =
//            from w in words
//            select new {Upper = w.ToUpper(), Lower = w.ToLower()};
//
//        foreach (var ul in upperLowerWords) {
//            Console.WriteLine("Uppercase: {0}, Lowercase: {1}", ul.Upper, ul.Lower);
//        }
    	String[] words = { "aPPLE", "BlUeBeRrY", "cHeRry" };
//    	List<Struct> upperLowerWords = #{
//    		(words as w).
//    		(w.toLowerCase() as upper, w.toUpperCase() as lower)
//    	};
    	List<Struct> upperLowerWords = #{
    		(words).
    		(toLowerCase() as upper, toUpperCase() as lower)
    	};
    	for(Struct ul : upperLowerWords) {
    		System.out.printf("Uppercase: %s, Lowercase: %s\n", ul.get("upper"), ul.get("lower"));
    	}
    	
    }
    
    /**
     * This sample uses select to produce a sequence containing text
     * representations of digits and whether their length is even or odd.
     */
    public void linq10() {
//    	 int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//       string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
//
//         var digitOddEvens =
//             from n in numbers
//             select new {Digit = strings[n], Even = (n % 2 == 0)};
//
//         foreach (var d in digitOddEvens) {
//             Console.WriteLine("The digit {0} is {1}.", d.Digit, d.Even ? "even" : "odd");
//         }
    	int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
    	String[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
    	List<Struct> digitOddEvens = #{
    		(numbers as n).
    		(strings[n] as digit, (n % 2 == 0) as even)
    	};
    	for(Struct d : digitOddEvens) {
    		System.out.printf("The digit %s is %s.\n", d.get("digit"), ((Boolean)d.get("even")) ? "even" : "odd");
    	}
    }
    
    /**
     * This sample uses select to produce a sequence containing some properties
     * of Products, including UnitPrice which is renamed to Price
     * in the resulting type.
     */
    public void linq11() {
//        List<Product> products = GetProductList();
//
//        var productInfos =
//            from p in products
//            select new {p.ProductName, p.Category, Price = p.UnitPrice};
//        
//        Console.WriteLine("Product Info:");
//        foreach (var productInfo in productInfos) {
//            Console.WriteLine("{0} is in the category {1} and costs {2} per unit.", productInfo.ProductName, productInfo.Category, productInfo.Price);
//        }
    	List<Product> products = getProductList();
    	List<Struct> productInfos = #{
    		(products).
        	(productName as productName, category as category, unitPrice as price) 
        };
    	System.out.println("Product Info:");
    	for(Struct productInfo : productInfos) {
//    		System.out.printf("%s is in the category %s and costs %s per unit.\n", productInfo.get("productName"), productInfo.get("category"), productInfo.get("price"));
    		System.out.printf("%s is in the category %s and costs %s per unit.\n", productInfo.getValue(0), productInfo.getValue(1), productInfo.getValue(2));
    	}
    }
	
    /**
     * This sample uses an indexed Select clause to determine if the value of ints
     * in an array match their position in the array.
     */
    public void linq12() {
//        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//
//        var numsInPlace = numbers.Select((num, index) => new {Num = num, InPlace = (num == index)});
//    
//        Console.WriteLine("Number: In-place?");
//        foreach (var n in numsInPlace) {
//            Console.WriteLine("{0}: {1}", n.Num, n.InPlace);
//        }
    	int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
    	List<Struct> numsInPlace = #{ 
    		(numbers as num).
    		(num as num, (num == $index) as inPlace) 
    	}; 
    	System.out.println("Number: In-place?");
    	for(Struct n : numsInPlace) {
    		System.out.printf("%s: %s\n", n.get("num"), n.get("inPlace"));
    	}
    }
    
    /**
     * This sample combines select and where to make a simple query that returns
     * the text form of each digit less than 5.
     */
    public void linq13() {
//        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//        string[] digits = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
//
//        var lowNums =
//            from n in numbers
//            where n < 5
//            select digits[n];
//        
//        Console.WriteLine("Numbers < 5:");
//        foreach (var num in lowNums) {
//            Console.WriteLine(num);
//        }
    	int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
    	String[] digits = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
    	List<String> lowNums = #{ 
    		((numbers as n) where n < 5).
    		(digits[n]) };
    	System.out.println("Numbers < 5:");
    	for(String num : lowNums) {
    		System.out.println(num);
    	}
    }
    
    /**
	 *	This sample uses a compound from clause to make a query that returns all pairs
     *	of numbers from both arrays such that the number from numbersA is less than the number
     *  from numbersB.
     */
    public void linq14() {
//        int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 };
//        int[] numbersB = { 1, 3, 5, 7, 8 };
//
//        var pairs =
//            from a in numbersA
//            from b in numbersB
//            where a < b
//            select new { a, b };
//
//        Console.WriteLine("Pairs where a < b:");
//        foreach (var pair in pairs)
//        {
//            Console.WriteLine("{0} is less than {1}", pair.a, pair.b);
//        }
        
        int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 };
        int[] numbersB = { 1, 3, 5, 7, 8 };
        List<Struct> pairs = #{ 
        	numbersA as a, numbersB as b 
        	where a < b 
        };
        System.out.println("Pairs where a < b:");
        for(Struct pair : pairs) {
        	System.out.printf("%s is less than %s\n", pair.get("a"), pair.get("b"));
        }
    }
    
    /**
	 *	This sample uses a compound from clause to select all orders where the
     *	order total is less than 500.00.
     */
    public void linq15() {
//        List<Customer> customers = GetCustomerList();
//
//        var orders =
//            from c in customers
//            from o in c.Orders
//            where o.Total < 500.00M
//            select new {c.CustomerID, o.OrderID, o.Total};
//    
//        ObjectDumper.Write(orders);
    	List<Customer> customers = getCustomerList();
//    	List<Map<String, Object>> orders = #{ 
//    		(customers as c join (c.orders where total < 500.00) as o).
//    		(c.customerID as customerId, o.orderID as orderID, o.total as total)
//    	};
    	List<Struct> orders = #{ 
    		(customers join (orders where total < 500.00)).
    		(customerID as customerId, orderID as orderID, total as total)
    	};
    	for(Struct order : orders) {
    		System.out.println(order);
    	}
    }
    
    /**
     * This sample uses a compound from clause to select all orders where the order was made in 1998 or later.
     */
    public void linq16() {
//        List<Customer> customers = GetCustomerList();
//
//        var orders =
//            from c in customers
//            from o in c.Orders
//            where o.OrderDate >= new DateTime(1998, 1, 1)
//            select new { c.CustomerID, o.OrderID, o.OrderDate };
//
//        ObjectDumper.Write(orders);
    	
    	List<Customer> customers = getCustomerList();
    	Calendar c = Calendar.getInstance();
    	c.set(1998, 0, 1);
    	Date d = c.getTime();
//    	List<Map<String, Object>> orders = #{
//    		(customers as c join c.orders as o where o.orderDate > d).
//    		(c.customerID as customerID, o.orderID as orderID, o.orderDate as orderDate)
//    	};
    	List<Struct> orders = #{
    		(customers join orders where orderDate > d).
    		(customerID as customerID, orderID as orderID, orderDate as orderDate)
    	};
    	for(Struct order : orders) {
    		System.out.println(order);
    	}
    }
    
    /**
     * This sample uses a compound from clause to select all orders where the order total 
     * is greater than 2000.00 and uses from assignment to avoid requesting the total twice.
     */
    public void linq17() {
//        List<Customer> customers = GetCustomerList();
//
//        var orders =
//            from c in customers
//            from o in c.Orders
//            where o.Total >= 2000.0M
//            select new { c.CustomerID, o.OrderID, o.Total };
//
//        ObjectDumper.Write(orders);
    	List<Customer> customers = getCustomerList();
    	List<Struct> orders = #{
    		(customers as c join c.orders as o where o.total > 2000).
    		(c.customerID as customerID, o.orderID as orderID, o.total as total)
    	};
		for(Struct order : orders) {
    		System.out.println(order);
    	}
    }
    
    /**
     * This sample uses multiple from clauses so that filtering on customers can be done 
     * before selecting their orders. This makes the query more efficient by not selecting 
     * and then discarding orders for customers outside of Washington.
     */
    public void linq18() {
//        List<Customer> customers = GetCustomerList();
//
//        DateTime cutoffDate = new DateTime(1997, 1, 1);
//
//        var orders =
//            from c in customers
//            where c.Region == "WA"
//            from o in c.Orders
//            where o.OrderDate >= cutoffDate
//            select new { c.CustomerID, o.OrderID };
//
//        ObjectDumper.Write(orders);
    	List<Customer> customers = getCustomerList();
    	Calendar c = Calendar.getInstance();
    	c.set(1997, 0, 1);
    	Date cutoffDate = c.getTime();
    	List<Struct> orders = #{
    		(customers as c where c.region == "WA" join c.orders as o where o.orderDate >= cutoffDate).
    		(c.customerID as customerID, o.orderID as orderID)
    	};
    	for(Struct order : orders) {
    		System.out.println(order);
    	}
    }
    
    /**
     * This sample uses an indexed SelectMany clause to select all orders, 
     * while referring to customers by the order in which they are returned from the query.
     */
    public void linq19() {
//        List<Customer> customers = GetCustomerList();
//
//        var customerOrders =
//            customers.SelectMany(
//                (cust, custIndex) =>
//                cust.Orders.Select(o => "Customer #" + (custIndex + 1) +
//                                        " has an order with OrderID " + o.OrderID));
//
//        ObjectDumper.Write(customerOrders);
    	List<Customer> customers = getCustomerList();
    	List<String> customerOrders = #{
    		(customers as c).
    		($index as custIndex, c.orders as o).
    		("Customer #"+(custIndex + 1)+" has an order with OrderID "+o.orderID)
    	};
    	for(String s : customerOrders) {
    		System.out.println(s);
    	}
    		
    }
    
    /**
     * This sample uses Take to get only the first 3 elements of the array.
     */
    public void linq20() {
//        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//        var first3Numbers = numbers.Take(3);
//        Console.WriteLine("First 3 numbers:");
//        foreach (var n in first3Numbers)
//        {
//            Console.WriteLine(n);
//        }
    	int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//    	List<Integer> first3Numbers = #{numbers where $index < 3};
    	List<Integer> first3Numbers = #{numbers[0..2]};
    	for(Integer n : first3Numbers) {
    		System.out.println(n);
    	}
    }
    
    /**
     * This sample uses Take to get the first 3 orders from customers in Washington.
     */
    public void linq21() {
//        List<Customer> customers = GetCustomerList();
//        var first3WAOrders = (
//            from c in customers
//            from o in c.Orders
//            where c.Region == "WA"
//            select new { c.CustomerID, o.OrderID, o.OrderDate })
//            .Take(3);
//
//        Console.WriteLine("First 3 orders in WA:");
//        foreach (var order in first3WAOrders)
//        {
//            ObjectDumper.Write(order);
//        }
    	List<Customer> customers = getCustomerList();
//    	List<Map<String, Object>> first3WAOrders = #{
//    		((customers as c where c.region == "WA" join c.orders as o) where $index < 3).
//    		(c.customerID as customerID, o.orderID as orderID, o.orderDate as orderDate)
//    	};
    	List<Struct> first3WAOrders = #{
    		((customers where region == "WA" join orders)[0..2]).
    		(customerID as customerID, orderID as orderID, orderDate as orderDate)
    	};
    	System.out.println("First 3 orders in WA:");
    	for(Struct order : first3WAOrders) {
    		System.out.println(order);
    	}
    }
    
    /**
     * This sample uses Skip to get all but the first 4 elements of the array.
     */
    public void linq22() {
//        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//        var allButFirst4Numbers = numbers.Skip(4);
//        Console.WriteLine("All but first 4 numbers:");
//        foreach (var n in allButFirst4Numbers) {
//            Console.WriteLine(n);
//        }
    	int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//    	List<Integer> allButFirst4Numbers = #{numbers where $index >= 4};
    	List<Integer> allButFirst4Numbers = #{numbers[4..*]};
    	System.out.println("All but first 4 numbers:");
    	for(Integer n : allButFirst4Numbers) {
    		System.out.println(n);
    	}
    }
    
    /**
     * This sample uses Take to get all but the first 2 orders from customers in Washington.
     */
    public void linq23() {
//        List<Customer> customers = GetCustomerList();
//        var waOrders =
//            from c in customers
//            from o in c.Orders
//            where c.Region == "WA"
//            select new { c.CustomerID, o.OrderID, o.OrderDate };
//            
//        var allButFirst2Orders = waOrders.Skip(2);
//        Console.WriteLine("All but first 2 orders in WA:");
//        foreach (var order in allButFirst2Orders) {
//            ObjectDumper.Write(order);
//        }
    	List<Customer> customers = getCustomerList();
//    	List<Map<String, Object>> waOrders = #{ 
//    		((customers as c where c.region == "WA" join c.orders as o) where $index >= 2).
//    		(c.customerID as customerID, o.orderID as orderID, o.orderDate as orderDate)
//    	};
    	List<Struct> waOrders = #{ 
    		((customers as c where c.region == "WA" join c.orders as o)[2..*]).
    		(c.customerID as customerID, o.orderID as orderID, o.orderDate as orderDate)
    	};
    	System.out.println("All but first 2 orders in WA:");
    	for(Struct order : waOrders) {
    		System.out.println(order);
    	}
    }
//    
//    /**
//     * This sample uses TakeWhile to return elements starting from the beginning 
//     * of the array until a number is hit that is not less than 6.
//     */
////    public void linq24() {
//////        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//////        var firstNumbersLessThan6 = numbers.TakeWhile(n => n < 6);
//////        Console.WriteLine("First numbers less than 6:");
//////        foreach (var n in firstNumbersLessThan6) {
//////            Console.WriteLine(n);
//////        }
////    	int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
////    	List<Integer> firstNumbersLessThan6 = #{(numbers as n)[0..]}; // ??
////    	System.out.println("First numbers less than 6:");
////    	for(Integer n : firstNumbersLessThan6) {
////    		System.out.println(n);
////    	}
////    }
//    
//    /**
//     * This sample uses TakeWhile to return elements starting from the beginning 
//     * of the array until a number is hit that is less than its position in the array.
//     */
//    public void Linq25() {
////        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
////        var firstSmallNumbers = numbers.TakeWhile((n, index) => n >= index);
////        Console.WriteLine("First numbers not less than their position:");
////        foreach (var n in firstSmallNumbers) {
////            Console.WriteLine(n);
////        }
//    	
//    	//??
//        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
////        List<Integer> firstSmallNumbers = #{
//    }
    
//    /**
//     * This sample uses SkipWhile to get the elements 
//     * of the array starting from the first element divisible by 3.
//     */
//    public void Linq26() {
////        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
////        var allButFirst3Numbers = numbers.SkipWhile(n => n % 3 != 0);
////        Console.WriteLine("All elements starting from first element divisible by 3:");
////
////        foreach (var n in allButFirst3Numbers) {
////            Console.WriteLine(n);
////        }
//    }
    
//    /**
//     * This sample uses SkipWhile to get the elements of 
//     * the array starting from the first element less than its position.
//     */
//    public void Linq27() {
////        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
////        var laterNumbers = numbers.SkipWhile((n, index) => n >= index);
////        Console.WriteLine("All elements starting from first element less than its position:");
////        foreach (var n in laterNumbers) {
////            Console.WriteLine(n);
////        }
//    }
    
//////    
//// -----------------------------------------------------------    
//// ----------------   Ordering Operators   -------------------    
//// -----------------------------------------------------------
    
    /**
     * This sample uses orderby to sort a list of words alphabetically.
     */
    public void linq28() {
//        string[] words = { "cherry", "apple", "blueberry" };
//
//        var sortedWords =
//            from w in words
//            orderby w
//            select w;
//
//        Console.WriteLine("The sorted list of words:");
//        foreach (var w in sortedWords)
//        {
//            Console.WriteLine(w);
//        }
    	String[] words = { "cherry", "apple", "blueberry" };
//    	List<String> sortedWords = #{ words as w order by w };
    	List<String> sortedWords = #{ words as w order by w };
    	System.out.println("The sorted list of words:");
    	for(String w : sortedWords) {
    		System.out.println(w);
    	}
    }
    
    /**
     * This sample uses orderby to sort a list of words by length.
     */
    public void linq29() {
//        string[] words = { "cherry", "apple", "blueberry" };
//
//        var sortedWords =
//            from w in words
//            orderby w.Length
//            select w;
//
//        Console.WriteLine("The sorted list of words (by length):");
//        foreach (var w in sortedWords)
//        {
//            Console.WriteLine(w);
//        }
    	String[] words = { "cherry", "apple", "blueberry" };
    	List<String> sortedWords = #{ words as w order by w.length() };
    	System.out.println("The sorted list of words (by length):");
    	for(String w : sortedWords) {
    		System.out.println(w);
    	}
    }
    
    /**
     * This sample uses orderby to sort a list of products by name.
     */
    public void linq30() {
//        List<Product> products = GetProductList();
//
//        var sortedProducts =
//            from p in products
//            orderby p.ProductName
//            select p;
//
//        ObjectDumper.Write(sortedProducts);
    	List<Product> products = getProductList();
    	List<Product> sortedProducts = #{
    		products as p
    		order by p.productName
    	};
    	for(Product p : sortedProducts) {
    		System.out.println(p);
    	}
    }
    
    /**
     * This sample uses an OrderBy clause with a custom comparer to do a case-insensitive sort of the words in an array.
     */
    public void linq31() {
    //ten przyklad jest za prosty, zeby pokazac korzysci z sortowania z uzyciem wlasnych komparatorow, 
    //ale tej funkcjonalnosci na razie nie ma, choc moglaby byc korzystna
    	
//        string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" };
//        var sortedWords = words.OrderBy(a => a, new CaseInsensitiveComparer());
//        ObjectDumper.Write(sortedWords);
    	String[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" };
//    	List<String> sortedWords = #{
//    		words as w
//    		order by w.toLowerCase()
//    	};
    	List<String> sortedWords = #{
    		words 
    		order by toLowerCase()
    	};
    	for(String w : sortedWords) {
    		System.out.println(w);
    	}
    }
    
    /**
     * This sample uses orderby and descending to sort a list of doubles from highest to lowest.
     */
    public void linq32() {
//        double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 };
//
//        var sortedDoubles =
//            from d in doubles
//            orderby d descending
//            select d;
//
//        Console.WriteLine("The doubles from highest to lowest:");
//        foreach (var d in sortedDoubles)
//        {
//            Console.WriteLine(d);
//        }
        double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 };
        List<Double> sortedDoubles = #{
        	doubles as d
        	order by d desc
        };
        System.out.println("The doubles from highest to lowest:");
        for(Double d : sortedDoubles) {
        	System.out.println(d);
        }
    }
    
    /**
     * This sample uses orderby to sort a list of products by units in stock from highest to lowest.
     */
    public void linq33() {
//        List<Product> products = GetProductList();
//
//        var sortedProducts =
//            from p in products
//            orderby p.UnitsInStock descending
//            select p;
//
//        ObjectDumper.Write(sortedProducts);
        List<Product> products = getProductList();
        
//        List<Product> sortedProducts = #{
//        	products as p
//        	order by p.unitsInStock desc
//        };
        List<Product> sortedProducts = #{
        	products
        	order by unitsInStock desc
        };
        for(Product p : sortedProducts) {
        	System.out.println(p);
        }
    }
    
    /**
     * This sample uses an OrderBy clause with a custom comparer to do a case-insensitive 
     * descending sort of the words in an array.
     */
    public void linq34() {
//        string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" };
//        var sortedWords = words.OrderByDescending(a => a, new CaseInsensitiveComparer());
//        ObjectDumper.Write(sortedWords);
    	String[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" };
    	
    	List<String> sortedWords = #{
    		words as w
    		order by w.toLowerCase() desc
    	};
    	for(String w : sortedWords) {
    		System.out.println(w);
    	}
    }

    /**
     * This sample uses a compound orderby to sort a list of digits, 
     * first by length of their name, and then alphabetically by the name itself.
     */
    public void linq35() {
//        string[] digits = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
//
//        var sortedDigits =
//            from d in digits
//            orderby d.Length, d
//            select d;
//
//        Console.WriteLine("Sorted digits:");
//        foreach (var d in sortedDigits)
//        {
//            Console.WriteLine(d);
//        }
        String[] digits = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
        List<String> sortedDigits = #{
        	digits as d
        	order by d.length() ; d
        };
        System.out.println("Sorted digits:");
        for(String d : sortedDigits) {
        	System.out.println(d);
        }
    }
    
    /**
     * This sample uses an OrderBy and a ThenBy clause with a custom comparer to sort first
     * by word length and then by a case-insensitive sort of the words in an array.
     */
    public void linq36() {
//        string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" };
//
//        var sortedWords =
//            words.OrderBy(a => a.Length)
//                 .ThenBy(a => a, new CaseInsensitiveComparer());
//
//        ObjectDumper.Write(sortedWords);
        String[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" };
        Comparator<String> comp = new Comparator<String>() {
			@Override
			public int compare(String o1, String o2) {
				return o1.toLowerCase().compareTo(o2.toLowerCase());
			}
		};
        List<String> sortedWords = #{
        	words as w
        	order by w.length(); w using comp
        };
        for(String w : sortedWords) {
        	System.out.println(w);
        }
    }
    
    /**
     * This sample uses a compound orderby to sort a list of products,
     * first by category, and then by unit price, from highest to lowest.
     */
    public void linq37() {
//        List<Product> products = GetProductList();
//
//        var sortedProducts =
//            from p in products
//            orderby p.Category, p.UnitPrice descending
//            select p;
//
//        ObjectDumper.Write(sortedProducts);
        
        List<Product> products = getProductList();
        List<Product> sortedProducts = #{
        	products 
        	order by category; unitPrice desc
        };
        for(Product p : sortedProducts) {
        	System.out.println(p);
        }
    }

    /**
     * This sample uses an OrderBy and a ThenBy clause with a custom comparer to sort 
     * first by word length and then by a case-insensitive descending sort of the words in an array.
     */
    public void linq38() {
//        string[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" };
//
//        var sortedWords =
//            words.OrderBy(a => a.Length)
//                 .ThenByDescending(a => a, new CaseInsensitiveComparer());
//
//        ObjectDumper.Write(sortedWords);
        
        Comparator<String> comp = new Comparator<String>() {
			@Override
			public int compare(String o1, String o2) {
				return o1.toLowerCase().compareTo(o2.toLowerCase());
			}
			
		};
        String[] words = { "aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry" };
        List<String> sortedWords = #{
        	words as w
        	order by w.length(); w using comp
        };
        for(String w : sortedWords) {
        	System.out.println(w);
        }
    }


    
    /**
     * This sample uses Reverse to create a list of all digits in the array whose second 
     * letter is 'i' that is reversed from the order in the original array.
     */
    //tu jednak wypada cos niecos zrobic z typami generycznymi, ktore nie sa obslugiwane
    //tak aby dzialala metoda <T> List<T> reverseCollection(List<T> l)
    public void linq39() {
//        string[] digits = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
//
//        var reversedIDigits = (
//            from d in digits
//            where d[1] == 'i'
//            select d)
//            .Reverse();
//
//        Console.WriteLine("A backwards list of the digits with a second character of 'i':");
//        foreach (var d in reversedIDigits)
//        {
//            Console.WriteLine(d);
//        }
        
        String[] digits = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
        
//        List<String> reversedIDigits = #{
//        	LinqComparison.reverseCollection(
//        		digits as d
//        		where d.charAt(1) == 'i'
//        	)
//        };
        
        List<String> reversedIDigits = #{
    		digits as d
    		where d.charAt(1) == 'i'
        };

        for(String s : reversedIDigits) {
        	System.out.println(s);
        }
        
    }
    
//    public static <T> List<T> reverseCollection(List<T> l) {
//    	Collections.reverse(l);
//    	return l;
//    }
    
    public static List<String> reverseCollection(List<String> l) {
    	Collections.reverse(l);
    	return l;
    }
    

    
    
 // -----------------------------------------------------------    
 // ----------------   Grouping Operators   -------------------    
 // -----------------------------------------------------------
    
    
    /**
     * This sample uses group by to partition a list of numbers by their remainder when divided by 5.
     */
    public void linq40() {
//        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//
//        var numberGroups =
//            from n in numbers
//            group n by n % 5 into g
//            select new { Remainder = g.Key, Numbers = g };
//
//        foreach (var g in numberGroups)
//        {
//            Console.WriteLine("Numbers with a remainder of {0} when divided by 5:", g.Remainder);
//            foreach (var n in g.Numbers)
//            {
//                Console.WriteLine(n);
//            }
//        }
    	
    	int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//    	List<Map<String, Object>> 
    	List<Struct> numberGroups = #{
    		(unique((numbers as n).(n % 5)) as r).
    		(r as remainder, (numbers as n where n % 5 == r) group as numbers)
    	};
    	System.out.println(numberGroups);
    	
    	for(Struct g : numberGroups) {
    		System.out.printf("Numbers with a remainder of %s when divided by 5:\n", g.get("remainder"));
    		List<Integer> numbersInGroup = (List<Integer>) g.get("numbers");
    		for(Integer n : numbersInGroup) {
    			System.out.println(n);
    		}
    	}
    	
    }
    
    
    /**
     * This sample uses group by to partition a list of words by their first letter.
     */
    public void linq41() {
//        string[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" };
//
//        var wordGroups =
//            from w in words
//            group w by w[0] into g
//            select new { FirstLetter = g.Key, Words = g };
//
//        foreach (var g in wordGroups)
//        {
//            Console.WriteLine("Words that start with the letter '{0}':", g.FirstLetter);
//            foreach (var w in g.Words)
//            {
//                Console.WriteLine(w);
//            }
//        }
        String[] words = { "blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese" };
        List<Struct> wordGroups = #{
        	(unique(words.charAt(0)) as f).
        	(f as firstLetter, (words as w where w.charAt(0) == f) group as words)	
        };
    	for(Struct g : wordGroups) {
			System.out.printf("Words that start with the letter '%s':\n", g.get("firstLetter"));
			List<String> wordsInGroup = (List<String>) g.get("words");
			for(String w : wordsInGroup) {
				System.out.println(w);
			}
		}
        
    }
    
    
    /**
     * This sample uses group by to partition a list of products by category.
     */
    public void linq42() {
//        List<Product> products = GetProductList();
//
//        var orderGroups =
//            from p in products
//            group p by p.Category into g
//            select new { Category = g.Key, Products = g };
//
//        ObjectDumper.Write(orderGroups, 1);
        
        List<Product> products = getProductList();
        List<Struct> orderGroups = #{
	        (unique(products.category) as c).
	        (c as category, (products where category == c) group as products)
        };
    	for(Struct g : orderGroups) {
			System.out.printf("Products in category '%s':\n", g.get("category"));
			List<Product> productsInGroup = (List<Product>) g.get("products");
			for(Product p : productsInGroup) {
				System.out.println(p);
			}
		}
    }
    
    
    /**
     * This sample uses group by to partition a list of each customer's orders, first by year, and then by month.
     */
    public void linq43() {
//        List<Customer> customers = GetCustomerList();
//
//        var customerOrderGroups =
//            from c in customers
//            select
//                new
//                {
//                    c.CompanyName,
//                    YearGroups =
//                        from o in c.Orders
//                        group o by o.OrderDate.Year into yg
//                        select
//                            new
//                            {
//                                Year = yg.Key,
//                                MonthGroups =
//                                    from o in yg
//                                    group o by o.OrderDate.Month into mg
//                                    select new { Month = mg.Key, Orders = mg }
//                            }
//                };
//
//        ObjectDumper.Write(customerOrderGroups, 3);
    	List<Customer> customers = getCustomerList();
    	
		List<Struct> customerOrderGroups = #{
			(customers as c).
			(c.companyName as companyName join
			  (                                 
			    (unique(c.orders.orderDate.getYear() ) as year join
			    (c.orders where orderDate.getYear() == year) group as yearGroups
			  ). 
			    (year as year,
				  (
				    (unique(yearGroups.orderDate.getMonth()) as month) join                 
				    (yearGroups where orderDate.getMonth() == month) group as orders
				  ) group as monthGroups
				) group as yearGroups
			  )
			)
		};
    	
//    	.(
//				unique(yearOrders.orderDate.getMonth() as oMonth).
//				(oMonth as month, 
//					(yearOrders where orderDate.getMonth() == oMonth) group as orders
//				) group as monthGroups
//			 )
    	
//		List<Map<String, Object>> customerOrderGroups = #{
//			(unique(customers.companyName) as cn).
//			(cn as cn, (customers where companyName == cn).orders group as cnOrders).(
//				(unique(cnOrders.orderDate.getYear()) as oYear).
//				(cn as cn, oYear as oYear, ((cnOrders where orderDate.getYear() == oYear) group as yOrders)).(
//						(unique(yOrders.orderDate.getMonth()) as oMonth).
//						(cn as companyName, (oYear as year, (oMonth as month, (yOrders where orderDate.getMonth() == oMonth) group as orders) group as monthGroups) group as yearGroups)        				
//				)
//			)
//			
//		};
    		
    	
//    	(unique(customers.companyName) as cn).
//    	(cn as cn, (customers where companyName == cn).orders group as cnOrders).(
//    		(unique(cnOrders.orderDate.getYear()) as oYear).
//    		(cn as cn, oYear as oYear, ((cnOrders where orderDate.getYear() == oYear) group as yOrders)).(
//    				(unique(yOrders.orderDate.getMonth()) as oMonth).
//    				(cn as companyName, (oYear as year, (oMonth as month, (yOrders where orderDate.getMonth() == oMonth) group as orders) group as monthGroups) group as yearGroups)
//    		)
//    	)
    	
    	
//    	System.out.println(customerOrderGroups);
//    	
//    	for(Struct companyGroup : customerOrderGroups) {
//    		String companyName = (String) companyGroup.get("companyName");
//    		System.out.println("Groups for company: "+companyName);
//    		List<Struct> yearGroups = (List<Struct>) companyGroup.get("yearGroups");
//    		if(yearGroups == null) continue;
//    		for(Struct yearGroup : yearGroups) {
//    			Integer year = (Integer)yearGroup.get("year");
//    			System.out.println("    Groups for year: "+year);
//    			List<Struct> monthGroups = (List<Struct>) yearGroup.get("monthGroups");
//    			if(monthGroups == null) continue;
//    			for(Struct monthGroup : monthGroups) {
//    				Integer month = (Integer)monthGroup.get("month");
//    				System.out.println("        Orders for month: "+month);
//    				List<Order> orders = (List<Order>) monthGroup.get("orders");
//    				for(Order order : orders) {
//    					System.out.println("            "+order);
//    				}
//    			}
//    		}
//		}
    }
////    
////    
////    /**
////     * This sample uses GroupBy to partition trimmed elements of an array using a custom comparer that matches words that are anagrams of each other.
////     */
////    public void linq44() {
//////        string[] anagrams = { "from   ", " salt", " earn ", "  last   ", " near ", " form  " };
//////        var orderGroups = anagrams.GroupBy(w => w.Trim(), new AnagramEqualityComparer());
//////        ObjectDumper.Write(orderGroups, 1);
//////      public class AnagramEqualityComparer : IEqualityComparer<string>
//////      {
//////          public bool Equals(string x, string y)
//////          {
//////              return getCanonicalString(x) == getCanonicalString(y);
//////          }
////  //
//////          public int GetHashCode(string obj)
//////          {
//////              return getCanonicalString(obj).GetHashCode();
//////          }
////  //
//////          private string getCanonicalString(string word)
//////          {
//////              char[] wordChars = word.ToCharArray();
//////              Array.Sort<char>(wordChars);
//////              return new string(wordChars);
//////          }
//////      }
////        
////        String[] anagrams = { "from   ", " salt", " earn ", "  last   ", " near ", " form  " };
//////        List<Map<String, Object>> orderGroups = #{
//////        	(unique(anagrams as a (where a.trim() in (anagrams as b).(b.trim()))) as g).
//////        	(g)
//////        };
////        
////        //(unique(anagrams as a where a.trim() in (anagrams as b).(LinqComparison.reverseIt(b.trim()))) as g).
////    	//(g)
////    }
////    
////    public static String reverseIt(String source) {
////        int i, len = source.length();
////        StringBuffer dest = new StringBuffer(len);
////
////        for (i = (len - 1); i >= 0; i--)
////          dest.append(source.charAt(i));
////        return dest.toString();
////      }
////    
////    
////    /**
////     * This sample uses GroupBy to partition trimmed elements of an array using a custom comparer that matches words that are anagrams of each other, and then converts the results to uppercase.
////     */
////    public void linq45() {
//////        string[] anagrams = { "from   ", " salt", " earn ", "  last   ", " near ", " form  " };
//////        var orderGroups = anagrams.GroupBy(
//////                    w => w.Trim(),
//////                    a => a.ToUpper(),
//////                    new AnagramEqualityComparer()
//////                    );
//////
//////        ObjectDumper.Write(orderGroups, 1);
//////        
//////        public class AnagramEqualityComparer : IEqualityComparer<string>
//////        {
//////            public bool Equals(string x, string y)
//////            {
//////                return getCanonicalString(x) == getCanonicalString(y);
//////            }
//////
//////            public int GetHashCode(string obj)
//////            {
//////                return getCanonicalString(obj).GetHashCode();
//////            }
//////
//////            private string getCanonicalString(string word)
//////            {
//////                char[] wordChars = word.ToCharArray();
//////                Array.Sort<char>(wordChars);
//////                return new string(wordChars);
//////            }
//////        }
////        String[] anagrams = { "from   ", " salt", " earn ", "  last   ", " near ", " form  " };
////    }
////
////    
//    // -----------------------------------------------------------    
//    // -------------------   Set Operators  ----------------------    
//    // -----------------------------------------------------------
//
    /**
     * This sample uses Distinct to remove duplicate elements in a sequence of factors of 300.
     */
    public void linq46() {
//        int[] factorsOf300 = { 2, 2, 3, 5, 5 };
//
//        var uniqueFactors = factorsOf300.Distinct();
//
//        Console.WriteLine("Prime factors of 300:");
//        foreach (var f in uniqueFactors)
//        {
//            Console.WriteLine(f);
//        }
        int[] factorsOf300 = { 2, 2, 3, 5, 5 };
        Collection<Integer> uniqueFactors = #{
        	unique(factorsOf300)
        };
        System.out.println("Prime factors of 300:");
        for(Integer f : uniqueFactors) {
        	System.out.println(f);
        }
    }
    
    /**
     * This sample uses Distinct to find the unique Category names.
     */
    public void linq47() {
//        List<Product> products = GetProductList();
//
//        var categoryNames = (
//            from p in products
//            select p.Category)
//            .Distinct();
//
//        Console.WriteLine("Category names:");
//        foreach (var n in categoryNames)
//        {
//            Console.WriteLine(n);
//        }
        
        List<Product> products = getProductList();
        List<String> categoryNames = #{
        	unique(products.category)
        };
        System.out.println("Category names:");
        for(String s : categoryNames) {
        	System.out.println(s);
        }
    }
    
    /**
     * This sample uses Union to create one sequence that contains the unique values from both arrays.
     */
    public void linq48() {
//        int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 };
//        int[] numbersB = { 1, 3, 5, 7, 8 };
//
//        var uniqueNumbers = numbersA.Union(numbersB);
//
//        Console.WriteLine("Unique numbers from both arrays:");
//        foreach (var n in uniqueNumbers)
//        {
//            Console.WriteLine(n);
//        }
        
        int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 };
        int[] numbersB = { 1, 3, 5, 7, 8 };
        
        
        Collection<Integer> uniqueNumbers = #{
        	unique(numbersA union numbersB)
        };
        System.out.println("Unique numbers from both arrays:");
        for(Integer n : uniqueNumbers) {
        	System.out.println(n);
        }
        
    }
    
    /**
     * This sample uses Union to create one sequence that contains the unique first letter from both product and customer names.
     */
    public void linq49() {
//        List<Product> products = GetProductList();
//        List<Customer> customers = GetCustomerList();
//
//        var productFirstChars =
//            from p in products
//            select p.ProductName[0];
//        var customerFirstChars =
//            from c in customers
//            select c.CompanyName[0];
//
//        var uniqueFirstChars = productFirstChars.Union(customerFirstChars);
//
//        Console.WriteLine("Unique first letters from Product names and Customer names:");
//        foreach (var ch in uniqueFirstChars)
//        {
//            Console.WriteLine(ch);
//        }
        
        List<Product> products = getProductList();
        List<Customer> customers = getCustomerList();
        Collection<Character> uniqueFirstChars = #{
        	unique(
        		products.productName.charAt(0) 
	        	union
	        	customers.companyName.charAt(0)
	        )
        };
        System.out.println("Unique first letters from Product names and Customer names:");
        for(Character ch : uniqueFirstChars) {
        	System.out.println(ch);
        }
        
    }
    
    /**
     * This sample uses Intersect to create one sequence that contains the common values shared by both arrays.
     */
    public void linq50() {
//        int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 };
//        int[] numbersB = { 1, 3, 5, 7, 8 };
//
//        var commonNumbers = numbersA.Intersect(numbersB);
//
//        Console.WriteLine("Common numbers shared by both arrays:");
//        foreach (var n in commonNumbers)
//        {
//            Console.WriteLine(n);
//        }
        
        int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 };
        int[] numbersB = { 1, 3, 5, 7, 8 };
        
        Collection<Integer> commonNumbers = #{
        	numbersA intersect numbersB
        };
        System.out.println("Common numbers shared by both arrays:");
        for(Integer n : commonNumbers) {
        	System.out.println(n);
        }
    }
    
    /**
     * This sample uses Intersect to create one sequence that contains the common first letter from both product and customer names.
     */
    public void linq51()  {
//        List<Product> products = GetProductList();
//        List<Customer> customers = GetCustomerList();
//
//        var productFirstChars =
//            from p in products
//            select p.ProductName[0];
//        var customerFirstChars =
//            from c in customers
//            select c.CompanyName[0];
//
//        var commonFirstChars = productFirstChars.Intersect(customerFirstChars);
//
//        Console.WriteLine("Common first letters from Product names and Customer names:");
//        foreach (var ch in commonFirstChars)
//        {
//            Console.WriteLine(ch);
//        }
    
    	List<Product> products = getProductList();
    	List<Customer> customers = getCustomerList();
    	Collection<Character> commonFirstChars = #{
    		unique(
	    		products.productName.charAt(0) 
	        	intersect
	        	customers.companyName.charAt(0)
	        )
    	};
    	System.out.println("Common first letters from Product names and Customer names:");
    	for(Character ch : commonFirstChars) {
    		System.out.println(ch);
    	}
    }
    
    /**
     * This sample uses Except to create a sequence that contains the values from numbersAthat are not also in numbersB.
     */
    public void linq52() {
//        int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 };
//        int[] numbersB = { 1, 3, 5, 7, 8 };
//
//        IEnumerable<int> aOnlyNumbers = numbersA.Except(numbersB);
//
//        Console.WriteLine("Numbers in first array but not second array:");
//        foreach (var n in aOnlyNumbers)
//        {
//            Console.WriteLine(n);
//        }
    	
        int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 };
        int[] numbersB = { 1, 3, 5, 7, 8 };
        Collection<Integer> aOnlyNumbers = #{
        	numbersA minus numbersB
        };
        System.out.println("Numbers in first array but not second array:");
        for(Integer n : aOnlyNumbers) {
        	System.out.println(n);
        
        }
    }
    
    /**
     * This sample uses Except to create one sequence that contains the first letters of product names that are not also first letters of customer names.
     */
    public void linq53() {
//        List<Product> products = GetProductList();
//        List<Customer> customers = GetCustomerList();
//
//        var productFirstChars =
//            from p in products
//            select p.ProductName[0];
//        var customerFirstChars =
//            from c in customers
//            select c.CompanyName[0];
//
//        var productOnlyFirstChars = productFirstChars.Except(customerFirstChars);
//
//        Console.WriteLine("First letters from Product names, but not from Customer names:");
//        foreach (var ch in productOnlyFirstChars)
//        {
//            Console.WriteLine(ch);
//        }
        
        List<Product> products = getProductList();
        List<Customer> customers = getCustomerList();
        Collection<Character> productOnlyFirstChars = #{
    		unique(products.productName.charAt(0)) 
        	minus
        	unique(customers.companyName.charAt(0))
    	};
        System.out.println("First letters from Product names, but not from Customer names:");
        for(Character ch : productOnlyFirstChars) {
        	System.out.println(ch);
        }
    }
    
    
//    // -----------------------------------------------------------    
//    // ---------------   Conversion Operators  -------------------    
//    // -----------------------------------------------------------
    
    /**
     * This sample uses ToArray to immediately evaluate a sequence into an array.
     */
    public void linq54() {
//        double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 };
//
//        var sortedDoubles =
//            from d in doubles
//            orderby d descending
//            select d;
//        var doublesArray = sortedDoubles.ToArray();
//
//        Console.WriteLine("Every other double from highest to lowest:");
//        for (int d = 0; d < doublesArray.Length; d += 2)
//        {
//            Console.WriteLine(doublesArray[d]);
//        }
    	double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 };
    	List<Double> sortedDoubles = #{
    		doubles as d 
    		order by d desc
    	};
    	Double[] doublesArray = sortedDoubles.toArray(new Double[]{});
    	System.out.println("Every other double from highest to lowest:");
    	for(int d = 0; d < doublesArray.length; d += 2) {
    		System.out.println(doublesArray[d]);
    	}
    	
    }
    
    /**
     * This sample uses ToList to immediately evaluate a sequence into a List<T>.
     */
    public void linq55() {
//        string[] words = { "cherry", "apple", "blueberry" };
//
//        var sortedWords =
//            from w in words
//            orderby w
//            select w;
//        var wordList = sortedWords.ToList();
//
//        Console.WriteLine("The sorted word list:");
//        foreach (var w in wordList)
//        {
//            Console.WriteLine(w);
//        }
        String[] words = { "cherry", "apple", "blueberry" };
        List<String> sortedWords = #{
        	words as w
        	order by w
        };
        System.out.println("The sorted word list:");
        for(String w : sortedWords) {
        	System.out.println(w);
        }
    }
    
//    /**
//     * This sample uses ToDictionary to immediately evaluate a sequence and a related key expression into a dictionary.
//     */
//    public void linq56() {
////        var scoreRecords = new[] { new {Name = "Alice", Score = 50},
////                                    new {Name = "Bob"  , Score = 40},
////                                    new {Name = "Cathy", Score = 45}
////                                };
////
////        var scoreRecordsDict = scoreRecords.ToDictionary(sr => sr.Name);
////
////        Console.WriteLine("Bob's score: {0}", scoreRecordsDict["Bob"]);
//    	System.out.println("ToDictionary: no equivalent operator in sbql4j");
//    }
    
    /**
     * This sample uses OfType to return only the elements of the array that are of type double.
     */
    public void linq57() {
//        object[] numbers = { null, 1.0, "two", 3, "four", 5, "six", 7.0 };
//
//        var doubles = numbers.OfType<double>();
//
//        Console.WriteLine("Numbers stored as doubles:");
//        foreach (var d in doubles)
//        {
//            Console.WriteLine(d);
//        }
//        System.out.println("OfType: no equivalent operator in sbql4j");
    	
    	Object[] numbers = { null, 1.0, "two", 3, "four", 5, "six", 7.0 };
    	List<Object> doubles = #{
    		numbers as n 
    		where n instanceof Double
    	};
    	System.out.println("Numbers stored as doubles:");
    	System.out.println(doubles);
    }
    
    // -----------------------------------------------------------    
    // ----------------   Element  Operators  --------------------    
    // -----------------------------------------------------------
    
    /**
     * This sample uses First to return the first matching element as a Product, 
     * instead of as a sequence containing a Product.
     */
    public void linq58() {
//        List<Product> products = GetProductList();
//        Product product12 = (
//            from p in products
//            where p.ProductID == 12
//            select p)
//            .First();
//        ObjectDumper.Write(product12);
    	List<Product> products = getProductList();
    	Product product12 = #{
    		(products where productID == 12)[0]
    	};
    	System.out.println(product12);
    }
    
    /**
     * This sample uses First to find the first element in the array that starts with 'o'.
     */
    public void linq59() {
//        string[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
//        string startsWithO = strings.First(s => s[0] == 'o');
//        Console.WriteLine("A string starting with 'o': {0}", startsWithO);

        String[] strings = { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
        String startsWithO = #{
        	(strings as s where s.charAt(0) == 'o')[0]
        };
        System.out.printf("A string starting with 'o': %s\n", startsWithO);
    }

    /**
     * This sample uses FirstOrDefault to try to return the first element
     * of the sequence, unless there are no elements, in which case 
     * the default value for that type is returned.
     */
    public void linq61() {
//    	int[] numbers = { };
//        int firstNumOrDefault = numbers.FirstOrDefault();
//        Console.WriteLine(firstNumOrDefault);
// 		brak odpowiednika
    }
    
    /**
     * This sample uses FirstOrDefault to return the first 
     * product whose ProductID is 789 as a single Product object, 
     * unless there is no match, in which case null is returned.
     */
    public void linq62() {
//        List<Product> products = GetProductList();
//        Product product789 = products.FirstOrDefault(p => p.ProductID == 789);
//        Console.WriteLine("Product 789 exists: {0}", product789 != null);
    	List<Product> products = getProductList();
    	Product product789 = #{
    		(products where productID == 789)[0]
    	};
    	System.out.printf("Product 789 exists: %s\n", product789 != null);
    }
    
    /**
     * This sample uses ElementAt to retrieve the second number greater than 5 from an array.
     */
    public void linq64() {
//    	int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//        int fourthLowNum = (
//            from n in numbers
//            where n > 5
//            select n)
//            .ElementAt(1);  // second number is index 1 because sequences use 0-based indexing
//        Console.WriteLine("Second number > 5: {0}", fourthLowNum);
        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
        int fourthLowNum = #{
        	(numbers as n where n > 5)[1]
        };
        System.out.printf("Second number > 5: %s\n", fourthLowNum);

    }
    
    
    // -----------------------------------------------------------    
    // ----------------  Generation Operators  -------------------    
    // -----------------------------------------------------------
    
    /**
     * This sample uses Range to generate a sequence of numbers from 100 to 149 
     * that is used to find which numbers in that range are odd and even.
     */
    public void linq65() {
//        var numbers =
//            from n in Enumerable.Range(100, 50)
//            select new { Number = n, OddEven = n % 2 == 1 ? "odd" : "even" };
//
//        foreach (var n in numbers) {
//            Console.WriteLine("The number {0} is {1}.", n.Number, n.OddEven);
//        }
//    	List<Map<String, Object>> numbers = #{
//    		(LinqComparison.range(100, 50) as n).
//    		(n as number, (n%2) as oddEven)
//    	};
//    	for(Map<String, Object> n : numbers) {
//    		System.out.printf("The number %s is %s.\n", n.get("number"), (Integer.valueOf(1).equals(n.get("oddEven"))) ? "odd" : "even");
//    	}

    }
    
    public static List<Integer> range(int start, int count) {
    	List<Integer> res = new ArrayList(count);
    	for(int i=0; i<count; i++) {
    		res.add(start+i);
    	}
    	return res;
    }
    
    /**
     * This sample uses Repeat to generate a sequence that contains the number 7 ten times.
     */
    public void linq66() {
//        var numbers = Enumerable.Repeat(7, 10);
//        foreach (var n in numbers) {
//            Console.WriteLine(n);
//        }

    }
    
    
    // -----------------------------------------------------------    
    // --------------------  Quantifiers  ------------------------    
    // -----------------------------------------------------------
    
    /**
     * This sample uses Any to determine if any of the words in the array contain the substring 'ei'.
     */
    public void linq67() {
//        string[] words = { "believe", "relief", "receipt", "field" };
//        bool iAfterE = words.Any(w => w.Contains("ei"));
//        Console.WriteLine(");
    	String[] words = { "believe", "relief", "receipt", "field" };
    	Boolean iAfterE = #{
    		any (words as w) w.contains("ei")
    	};
    	System.out.println("There is a word that contains in the list that contains 'ei': "+iAfterE);
    }
    
    /**
     * This sample uses Any to return a grouped a list of products only for 
     * categories that have at least one product that is out of stock.
     */
    public void linq69() {
//        List<Product> products = GetProductList();
//        var productGroups =
//            from p in products
//            group p by p.Category into g
//            where g.Any(p => p.UnitsInStock == 0)
//            select new { Category = g.Key, Products = g };
//        ObjectDumper.Write(productGroups, 1);
    	List<Product> products = getProductList();
    	List<Struct> productGroups = #{
    		(unique(products.category) as cat).
    		(cat as category, (products where category == cat) group as products)
    			where any products unitsInStock == 0
    	};
    	for(Struct catGroup : productGroups) {
    		String category = (String) catGroup.get("category");
    		System.out.println("Products in category: "+category+" that have at least 1 product out of stock");
    		List<Product> prGroup = (List<Product>) catGroup.get("products");
    		for(Product p : prGroup) {
    			System.out.println("   "+p);
    		}
    	}
    }
    
    /**
     * This sample uses All to determine whether an array contains only odd numbers.
     */
    public void linq70() {
//        int[] numbers = { 1, 11, 3, 19, 41, 65, 19 };
//        bool onlyOdd = numbers.All(n => n % 2 == 1);
//        Console.WriteLine("The list contains only odd numbers: {0}", onlyOdd);
    	int[] numbers = { 1, 11, 3, 19, 41, 65, 19 };
    	Boolean onlyOdd = #{
    		all (numbers as n) (n % 2 == 1) 
    	};
    	System.out.println("The list contains only odd numbers: "+onlyOdd);
    }
    
    /**
     * This sample uses All to return a grouped a list of products only for 
     * categories that have all of their products in stock.
     */
    public void linq72() {
//        List<Product> products = GetProductList();
//        var productGroups =
//            from p in products
//            group p by p.Category into g
//            where g.All(p => p.UnitsInStock > 0)
//            select new { Category = g.Key, Products = g };
//        ObjectDumper.Write(productGroups, 1);
    	
    	List<Product> products = getProductList();
    	List<Struct> productGroups = #{
			(unique(products.category) as cat).
			(cat as category, (products where category == cat) group as products)
				where all products unitsInStock > 0
    	};
    	for(Struct catGroup : productGroups) {
    		String category = (String) catGroup.get("category");
    		System.out.println("Products in category '"+category+"' that have at all of their product in stock: ");
    		List<Product> prGroup = (List<Product>) catGroup.get("products");
    		for(Product p : prGroup) {
    			System.out.println("   "+p);
    		}
    	}
    }
    
    
    // -----------------------------------------------------------    
    // ---------------  Aggregator Operators  --------------------    
    // -----------------------------------------------------------
    
    /**
     * This sample uses Count to get the number of unique factors of 300.
     */
    public void linq73() {
//        int[] factorsOf300 = { 2, 2, 3, 5, 5 };
//        int uniqueFactors = factorsOf300.Distinct().Count();
//        Console.WriteLine("There are {0} unique factors of 300.", uniqueFactors);
    	int[] factorsOf300 = { 2, 2, 3, 5, 5 };
    	int uniqueFactors = #{
    		count(unique(factorsOf300))
    	};
    	System.out.println("There are "+uniqueFactors+" unique factors of 300.");
    }
    
    /**
     * This sample uses Count to get the number of odd ints in the array.
     */
    public void linq74() {
//        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//        int oddNumbers = numbers.Count(n => n % 2 == 1);
//        Console.WriteLine("There are {0} odd numbers in the list.", oddNumbers);
    	int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
    	int oddNumbers = #{
    		count(numbers as n where n % 2 == 1)
    	};
    	System.out.println("There are "+oddNumbers+" odd numbers in the list.");
    }
    
    /**
     * This sample uses Count to return a list of customers and how many orders each has.
     */
    public void linq76() {
//        List<Customer> customers = GetCustomerList();
//        var orderCounts =
//            from c in customers
//            select new { c.CustomerID, OrderCount = c.Orders.Count() };
//        ObjectDumper.Write(orderCounts);
    	List<Customer> customers = getCustomerList();
    	List<Struct> orderCounts = #{
    		(customers as c).
    		(c.customerID as customerID, count(c.orders) as orderCount)
    	};
    	for(Struct o : orderCounts) {
    		String customerID = (String) o.get("customerID");
    		Integer orderCount = (Integer) o.get("orderCount");
    		System.out.println("There are "+orderCount+" orders for customerID: "+customerID);
    	}
    }
    
    /**
     * This sample uses Count to return a list of categories and how many products each has.
     */
    public void linq77() {
//        List<Product> products = GetProductList();
//        var categoryCounts =
//            from p in products
//            group p by p.Category into g
//            select new { Category = g.Key, ProductCount = g.Count() };
//        ObjectDumper.Write(categoryCounts
    	List<Product> products = getProductList();
    	List<Struct> categoryCounts = #{
    		(unique(products.category) as cat).
			(cat as category, count(products where category == cat) as productCount)
    	};
    	for(Struct o : categoryCounts) {
    		String category = (String) o.get("category");
    		Integer productCount = (Integer) o.get("productCount");
    		System.out.println("There are "+productCount+" products in category: "+category);
    	}
    }
    
    /**
     * This sample uses Sum to get the total of the numbers in an array.
     */
    public void linq78() {
//        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//        double numSum = numbers.Sum();
//        Console.WriteLine("The sum of the numbers is {0}.", numSum);
    	int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
    	int numSum = #{
    		sum(numbers)
    	};
    	System.out.println("The sum of the numbers is "+numSum+".");
    }
    
    /**
     * This sample uses Sum to get the total number of characters of all words in the array.
     */
    public void linq79() {
//        string[] words = { "cherry", "apple", "blueberry" };
//        double totalChars = words.Sum(w => w.Length);
//        Console.WriteLine("There are a total of {0} characters in these words.", totalChars);
    	String[] words = { "cherry", "apple", "blueberry" };
    	int totalChars = #{
    		sum(words.length())
    	};
    	System.out.println("There are a total of "+totalChars+" characters in these words.");
    }
    
    /**
     * This sample uses Sum to get the total units in stock for each product category.
     */
    public void linq80() {
//        List<Product> products = GetProductList();
//        var categories =
//            from p in products
//            group p by p.Category into g
//            select new { Category = g.Key, TotalUnitsInStock = g.Sum(p => p.UnitsInStock) };
//        ObjectDumper.Write(categories);
    	List<Product> products = getProductList();
    	List<Struct> categories = #{
    		(unique(products.category) as cat).
    		(cat as category, sum( (products where category == cat).unitsInStock ) as totalUnitsInStock)
    	};
    	for(Struct o : categories) {
    		String category = (String) o.get("category");
    		Integer totalUnitsInStock = (Integer) o.get("totalUnitsInStock");
    		System.out.println("There are "+totalUnitsInStock+" products in stock in category: "+category);
    	}
    }
    
    /**
     * This sample uses Min to get the lowest number in an array.
     */
    public void linq81() {
//        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//        int minNum = numbers.Min();
//        Console.WriteLine("The minimum number is {0}.", minNum);
    	int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
    	int minNum = #{
    		min(numbers)
    	};
    	System.out.println("The minimum number is "+minNum+".");
    }
    
    /**
     * This sample uses Min to get the length of the shortest word in an array.
     */
    public void linq82() {
//        string[] words = { "cherry", "apple", "blueberry" };
//        int shortestWord = words.Min(w => w.Length);
//        Console.WriteLine("The shortest word is {0} characters long.", shortestWord);
    	String[] words = { "cherry", "apple", "blueberry" };
    	int shortestWord = #{
    		min(words.length())
    	};
    	System.out.println("The shortest word is "+shortestWord+" characters long.");
    }
    
    /**
     * This sample uses Min to get the cheapest price among each category's products.
     */
    public void linq83() {
//        List<Product> products = GetProductList();
//        var categories =
//            from p in products
//            group p by p.Category into g
//            select new { Category = g.Key, CheapestPrice = g.Min(p => p.UnitPrice) };
//        ObjectDumper.Write(categories);
    	List<Product> products = getProductList();
    	List<Struct> categories = #{
    		(unique(products.category) as cat).
    		(cat as category, min((products where category == cat).unitPrice) as cheapestPrice)
    	};
    	for(Struct o : categories) {
    		String category = (String) o.get("category");
    		Double cheapestPrice = (Double) o.get("cheapestPrice");
    		System.out.println("category="+category+"\tcheapestPrice="+cheapestPrice);
    	}
    }
    
    /**
     * This sample uses Min to get the products with the cheapest price in each category.
     */
    public void linq84() {
//        List<Product> products = GetProductList();
//        var categories =
//            from p in products
//            group p by p.Category into g
//            let minPrice = g.Min(p => p.UnitPrice)
//            select new { Category = g.Key, CheapestProducts = g.Where(p => p.UnitPrice == minPrice) };
//        ObjectDumper.Write(categories, 1);
    	List<Product> products = getProductList();
    	List<Struct> categories = #{
    		(unique(products.category) as cat).
    		(cat as cat, (products where category == cat) group as pr).
    		(cat as category, (pr where unitPrice == min(pr.unitPrice)) group as cheapestProducts)
    	};
       	for(Struct o : categories) {
    		String category = (String) o.get("category");
    		List<Product> cheapestProducts = (List<Product>) o.get("cheapestProducts");
    		System.out.println("category="+category+"\tcheapestProducts="+cheapestProducts);
    	}
    }
    
    /**
     * This sample uses Max to get the highest number in an array.
     */
    public void linq85() {
//        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//        int maxNum = numbers.Max();
//        Console.WriteLine("The maximum number is {0}.", maxNum);
    	int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
    	int maxNum = #{
    		max(numbers)
    	};
    	System.out.println("The maximum number is "+maxNum+".");
    }
    
    /**
     * This sample uses Max to get the length of the longest word in an array.
     */
    public void linq86() {
//        string[] words = { "cherry", "apple", "blueberry" };
//        int longestLength = words.Max(w => w.Length);
//        Console.WriteLine("The longest word is {0} characters long.", longestLength);
    	String[] words = { "cherry", "apple", "blueberry" };
    	int longestLength = #{
    		max(words.length())
    	};
    	System.out.println("The longest word is "+longestLength+" characters long.");
    }
    
    /**
     * This sample uses Max to get the most expensive price among each category's products.
     */
    public void linq87() {
//        List<Product> products = GetProductList();
//        var categories =
//            from p in products
//            group p by p.Category into g
//            select new { Category = g.Key, MostExpensivePrice = g.Max(p => p.UnitPrice) };
//        ObjectDumper.Write(categories);
    	List<Product> products = getProductList();
    	List<Struct> categories = #{
    		(unique(products.category) as cat).
    		(cat as category, max((products where category == cat).unitPrice) as mostExpensivePrice)
    	};
    	for(Struct o : categories) {
    		String category = (String) o.get("category");
    		Double mostExpensivePrice = (Double) o.get("mostExpensivePrice");
    		System.out.println("category="+category+"\tmostExpensivePrice="+mostExpensivePrice);
    	}
    }
    
    /**
     * This sample uses Max to get the products with the most expensive price in each category.
     */
    public void linq88() {
//        List<Product> products = GetProductList();
//        var categories =
//            from p in products
//            group p by p.Category into g
//            let maxPrice = g.Max(p => p.UnitPrice)
//            select new { Category = g.Key, MostExpensiveProducts = g.Where(p => p.UnitPrice == maxPrice) };
//        ObjectDumper.Write(categories, 1);
    	List<Product> products = getProductList();
    	List<Struct> categories = #{
    		(unique(products.category) as cat).
    		(cat as cat, (products where category == cat) group as pr).
    		(cat as category, (pr where unitPrice == max(pr.unitPrice)) group as mostExpensiveProducts)
    	};
       	for(Struct o : categories) {
    		String category = (String) o.get("category");
    		List<Product> mostExpensiveProducts = (List<Product>) o.get("mostExpensiveProducts");
    		System.out.println("category="+category+"\tmostExpensiveProducts="+mostExpensiveProducts);
    	}
    }
    
    /**
     * This sample uses Average to get the average of all numbers in an array.
     */
    public void linq89() {
//        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
//        double averageNum = numbers.Average();
//        Console.WriteLine("The average number is {0}.", averageNum);
    	int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };
    	double averageNum = #{
    		avg(numbers)
    	};
    	System.out.println("The average number is "+averageNum);
    }
    
    /**
     * This sample uses Average to get the average length of the words in the array.
     */
    public void linq90() {
//        string[] words = { "cherry", "apple", "blueberry" };
//        double averageLength = words.Average(w => w.Length);
//        Console.WriteLine("The average word length is {0} characters.", averageLength);
    	String[] words = { "cherry", "apple", "blueberry" };
    	double averageLength = #{
    		avg(words.length())
    	};
    	System.out.println("The average word length is "+averageLength+" characters.");
    }
    
    /**
     * This sample uses Average to get the average price of each category's products.
     */
    public void linq91() {
//        List<Product> products = GetProductList();
//        var categories =
//            from p in products
//            group p by p.Category into g
//            select new { Category = g.Key, AveragePrice = g.Average(p => p.UnitPrice) };
//        ObjectDumper.Write(categories);
    	List<Product> products = getProductList();
    	List<Struct> categories = #{
    		(unique(products.category) as cat).
    		(cat as category, avg((products where category == cat).unitPrice) as averagePrice)
    	};
    	for(Struct o : categories) {
    		String category = (String) o.get("category");
    		Double averagePrice = (Double) o.get("averagePrice");
    		System.out.println("category="+category+"\taveragePrice="+averagePrice);
    	}
    }
    
    /**
     * This sample uses Aggregate to create a running product on the array that calculates the total product of all elements.
     */
    public void linq92() {
//        double[] doubles = { 1.7, 2.3, 1.9, 4.1, 2.9 };
//        double product = doubles.Aggregate((runningProduct, nextFactor) => runningProduct * nextFactor);
//        Console.WriteLine("Total product of all numbers: {0}", product);
    }
    
    /**
     * This sample uses Aggregate to create a running account balance that 
     * subtracts each withdrawal from the initial balance of 100, as long 
     * as the balance never drops below 0
     */
    public void linq93() {
//        double startBalance = 100.0;
//        int[] attemptedWithdrawals = { 20, 10, 40, 50, 10, 70, 30 };
//        double endBalance =
//            attemptedWithdrawals.Aggregate(startBalance,
//                (balance, nextWithdrawal) =>
//                    ((nextWithdrawal <= balance) ? (balance - nextWithdrawal) : balance));
//        Console.WriteLine("Ending balance: {0}", endBalance);
    }
    
    
    // -----------------------------------------------------------    
    // -------------  Miscellaneous Operators  -------------------    
    // -----------------------------------------------------------
    
    /**
     * This sample uses Concat to create one sequence that contains each array's values, one after the other.
     */
    public void linq94() {
//        int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 };
//        int[] numbersB = { 1, 3, 5, 7, 8 };
//        var allNumbers = numbersA.Concat(numbersB);
//        Console.WriteLine("All numbers from both arrays:");
//        foreach (var n in allNumbers) {
//            Console.WriteLine(n);
//        }
        int[] numbersA = { 0, 2, 4, 5, 6, 8, 9 };
        int[] numbersB = { 1, 3, 5, 7, 8 };
        List<Integer> allNumbers = #{
        	numbersA union numbersB
        };
        System.out.println("All numbers from both arrays:");
        for(Integer n : allNumbers) {
        	System.out.println(n);
        }
    }
    
    /**
     * This sample uses Concat to create one sequence that contains the 
     * names of all customers and products, including any duplicates.
     */
    public void linq95() {
//        List<Customer> customers = GetCustomerList();
//        List<Product> products = GetProductList();
//        var customerNames =
//            from c in customers
//            select c.CompanyName;
//        var productNames =
//            from p in products
//            select p.ProductName;
//        var allNames = customerNames.Concat(productNames);
//        Console.WriteLine("Customer and product names:");
//        foreach (var n in allNames) {
//            Console.WriteLine(n);
//        }
    	List<Customer> customers = getCustomerList();
    	List<Product> products = getProductList();
    	List<String> allNames = #{
    		customers.companyName
    		union
    		products.productName
    	};
    	System.out.println("Customer and product names:");
    	for(String n : allNames) {
    		System.out.println(n);
    	}
    }
    
    /**
     * This sample uses EqualAll to see if two sequences match on all elements in the same order.
     */
    public void linq96() {
//        var wordsA = new string[] { "cherry", "apple", "blueberry" };
//        var wordsB = new string[] { "cherry", "apple", "blueberry" };
//        bool match = wordsA.SequenceEqual(wordsB);
//        Console.WriteLine("The sequences match: {0}", match);
        
        String[] wordsA = new String[] { "cherry", "apple", "blueberry" };
        String[] wordsB = new String[] { "cherry", "apple", "blueberry" };
        
        Boolean match = #{
        	all (
	        	wordsA as a
	        ) a == wordsB[$index]
        };
        System.out.println("The sequences match: "+match);
    }
    
    /**
     * This sample uses EqualAll to see if two sequences match on all elements in the same order.
     */
    public void linq97() {
//        var wordsA = new string[] { "cherry", "apple", "blueberry" };
//        var wordsB = new string[] { "apple", "blueberry", "cherry" };
//        bool match = wordsA.SequenceEqual(wordsB);
//        Console.WriteLine("The sequences match: {0}", match);
        String[] wordsA = new String[] { "cherry", "apple", "blueberry" };
        String[] wordsB = new String[] { "apple", "blueberry", "cherry" };
        
        Boolean match = #{
        	all (
	        	wordsA as a
	        ) a == wordsB[$index]
        };
        System.out.println("The sequences match: "+match);
    }
    
    private LinqExampleData data = new LinqExampleData();

    private List<Product> getProductList() {
    	return data.getProductList();
    }
    
    private List<Customer> getCustomerList() {
    	return data.getCustomerList();
    }
}
