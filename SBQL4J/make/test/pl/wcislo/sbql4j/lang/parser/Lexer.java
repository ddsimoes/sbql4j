/* The following code was generated by JFlex 1.4.3 on 24.11.09 17:14 */

package pl.wcislo.sbql4j.lang.parser; 
  
import java_cup.runtime.Symbol;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24.11.09 17:14 from the specification file
 * <tt>E:/Java/workspaces/mgr/JavaCompiler/sbql_src/pl/wcislo/sbql4j/lang/parser/lexer.lex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IDENTIFIER = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\17\1\0\2\17\22\0\1\67\1\27\1\16\2\0\1\25"+
    "\2\0\1\30\1\31\1\23\1\21\1\74\1\22\1\15\1\24\12\1"+
    "\1\14\1\107\1\73\1\26\1\34\2\0\1\40\1\71\1\63\1\42"+
    "\1\56\1\101\1\52\1\76\1\54\1\102\1\13\1\104\1\47\1\41"+
    "\1\35\1\66\1\55\1\36\1\45\1\64\1\46\1\51\1\75\1\61"+
    "\1\105\1\13\4\0\1\12\1\0\1\7\1\72\1\65\1\44\1\5"+
    "\1\6\1\53\1\100\1\57\1\103\1\13\1\10\1\50\1\43\1\37"+
    "\1\70\1\60\1\3\1\11\1\2\1\4\1\20\1\77\1\62\1\106"+
    "\1\13\1\32\1\0\1\33\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\7\2\1\0\1\3\1\0\2\4\1\5"+
    "\1\6\1\7\1\10\1\11\2\0\1\12\1\13\1\14"+
    "\1\15\1\16\24\2\1\17\1\20\5\2\1\21\1\0"+
    "\5\2\1\22\4\2\1\23\1\24\1\25\1\26\1\27"+
    "\2\30\1\2\1\22\16\2\1\31\1\2\1\31\6\2"+
    "\1\32\5\2\1\33\5\2\1\34\1\35\1\36\1\2"+
    "\1\37\2\2\1\40\6\2\1\41\2\42\11\2\1\43"+
    "\5\2\1\44\4\2\1\0\4\2\1\45\22\2\1\0"+
    "\1\46\1\47\3\2\1\0\3\2\1\50\2\2\1\51"+
    "\5\2\1\52\2\2\1\53\1\2\1\0\1\54\1\55"+
    "\1\2\2\0\1\56\4\0\2\2\2\0\1\2\2\0"+
    "\1\57\1\60\1\61\4\0\2\2\2\0\1\62\1\63"+
    "\2\2\1\64\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\110\0\u0318\0\u0360\0\u03a8\0\110"+
    "\0\110\0\110\0\110\0\110\0\u03f0\0\u0438\0\110\0\110"+
    "\0\110\0\110\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8"+
    "\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828"+
    "\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20\0\u0a68"+
    "\0\110\0\u0ab0\0\u0af8\0\u0b40\0\u0b88\0\u0bd0\0\110\0\u0c18"+
    "\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8\0\u0e10\0\u0e58"+
    "\0\u0ea0\0\u0ee8\0\u0f30\0\110\0\110\0\110\0\110\0\u0f78"+
    "\0\u0fc0\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8"+
    "\0\u1200\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8"+
    "\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638"+
    "\0\u1680\0\u16c8\0\110\0\u1710\0\u1758\0\u17a0\0\u17e8\0\u1830"+
    "\0\u1878\0\u18c0\0\u1908\0\u1950\0\u1998\0\u19e0\0\u0120\0\u0120"+
    "\0\u0120\0\u1a28\0\u0120\0\u1a70\0\u1ab8\0\u0120\0\u1b00\0\u1b48"+
    "\0\u1b90\0\u1bd8\0\u1c20\0\u1c68\0\u0120\0\u1cb0\0\u1cf8\0\u1d40"+
    "\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80"+
    "\0\u0120\0\u1fc8\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u0120\0\u2130"+
    "\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328\0\u2370"+
    "\0\u0120\0\u23b8\0\u2400\0\u2448\0\u2490\0\u24d8\0\u2520\0\u2568"+
    "\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760\0\u27a8"+
    "\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u0120\0\u0120\0\u2910\0\u2958"+
    "\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u0120\0\u2b08\0\u2b50"+
    "\0\u0120\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u0120\0\u2d00"+
    "\0\u2d48\0\u0120\0\u2d90\0\u2dd8\0\u0120\0\u0120\0\u2e20\0\u2e68"+
    "\0\u2eb0\0\u0120\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u3060"+
    "\0\u30a8\0\u30f0\0\u3138\0\u3180\0\u31c8\0\u0120\0\110\0\110"+
    "\0\u3210\0\u3258\0\u32a0\0\u32e8\0\u3330\0\u3378\0\u33c0\0\u3408"+
    "\0\110\0\110\0\u3450\0\u3498\0\110\0\u0120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\5\1\12\2\5\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\5\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\5\1\47\1\50\1\51\1\5\1\52\1\53\3\5"+
    "\1\54\1\5\1\55\1\5\1\16\1\5\1\56\1\57"+
    "\1\60\1\61\1\62\1\5\1\63\1\5\1\64\1\65"+
    "\1\66\3\5\1\67\111\0\1\3\13\0\1\70\73\0"+
    "\2\5\1\71\6\5\1\0\1\5\4\0\1\5\14\0"+
    "\32\5\1\0\3\5\2\0\12\5\2\0\11\5\1\0"+
    "\1\5\4\0\1\5\14\0\32\5\1\0\3\5\2\0"+
    "\12\5\2\0\11\5\1\0\1\5\4\0\1\5\14\0"+
    "\6\5\1\72\23\5\1\0\3\5\2\0\12\5\2\0"+
    "\11\5\1\0\1\5\4\0\1\5\14\0\25\5\1\73"+
    "\4\5\1\0\3\5\2\0\12\5\2\0\6\5\1\74"+
    "\2\5\1\0\1\5\4\0\1\5\14\0\2\5\1\75"+
    "\27\5\1\0\3\5\2\0\12\5\2\0\10\5\1\76"+
    "\1\0\1\5\4\0\1\77\14\0\6\5\1\100\23\5"+
    "\1\0\3\5\2\0\12\5\2\0\1\5\1\101\1\5"+
    "\1\102\5\5\1\0\1\5\4\0\1\5\14\0\32\5"+
    "\1\0\3\5\2\0\12\5\3\0\12\103\4\0\1\103"+
    "\14\0\32\103\1\0\3\103\2\0\12\103\1\0\16\15"+
    "\1\104\71\15\17\0\2\16\46\0\1\16\21\0\11\5"+
    "\1\0\1\5\3\0\1\16\1\17\14\0\32\5\1\16"+
    "\3\5\2\0\12\5\27\0\1\105\107\0\1\106\107\0"+
    "\1\107\62\0\11\5\1\0\1\5\4\0\1\5\14\0"+
    "\1\5\1\110\30\5\1\0\3\5\2\0\12\5\2\0"+
    "\2\5\1\111\6\5\1\0\1\5\4\0\1\5\14\0"+
    "\32\5\1\0\3\5\2\0\12\5\2\0\11\5\1\0"+
    "\1\5\4\0\1\5\14\0\4\5\1\112\3\5\1\113"+
    "\3\5\1\114\15\5\1\0\3\5\2\0\12\5\2\0"+
    "\11\5\1\0\1\5\4\0\1\5\14\0\1\115\31\5"+
    "\1\0\3\5\2\0\12\5\2\0\11\5\1\0\1\5"+
    "\4\0\1\5\14\0\21\5\1\116\10\5\1\0\3\5"+
    "\2\0\12\5\2\0\11\5\1\0\1\5\4\0\1\5"+
    "\14\0\2\5\1\117\27\5\1\0\3\5\2\0\12\5"+
    "\2\0\4\5\1\120\4\5\1\0\1\5\4\0\1\5"+
    "\14\0\32\5\1\0\3\5\2\0\12\5\2\0\11\5"+
    "\1\0\1\5\4\0\1\5\14\0\11\5\1\121\15\5"+
    "\1\122\2\5\1\0\3\5\2\0\12\5\2\0\11\5"+
    "\1\0\1\5\4\0\1\5\14\0\4\5\1\123\25\5"+
    "\1\0\3\5\2\0\12\5\2\0\11\5\1\0\1\5"+
    "\4\0\1\5\14\0\3\5\1\124\13\5\1\125\12\5"+
    "\1\0\3\5\2\0\12\5\2\0\6\5\1\126\2\5"+
    "\1\0\1\5\4\0\1\5\14\0\22\5\1\127\7\5"+
    "\1\0\3\5\2\0\12\5\2\0\11\5\1\0\1\5"+
    "\4\0\1\5\14\0\1\5\1\130\30\5\1\0\3\5"+
    "\2\0\12\5\2\0\2\5\1\131\6\5\1\0\1\5"+
    "\4\0\1\5\14\0\32\5\1\0\3\5\2\0\12\5"+
    "\2\0\11\5\1\0\1\5\4\0\1\5\14\0\4\5"+
    "\1\132\25\5\1\0\3\5\2\0\12\5\2\0\11\5"+
    "\1\0\1\5\4\0\1\5\14\0\24\5\1\133\5\5"+
    "\1\0\3\5\2\0\12\5\2\0\11\5\1\0\1\5"+
    "\4\0\1\5\14\0\6\5\1\134\23\5\1\0\3\5"+
    "\2\0\12\5\2\0\11\5\1\0\1\5\4\0\1\5"+
    "\14\0\1\135\31\5\1\0\3\5\2\0\7\5\1\136"+
    "\2\5\2\0\7\5\1\137\1\5\1\0\1\5\4\0"+
    "\1\5\14\0\2\5\1\140\27\5\1\0\3\5\2\0"+
    "\12\5\2\0\11\5\1\0\1\5\4\0\1\5\14\0"+
    "\3\5\1\141\26\5\1\0\3\5\2\0\12\5\2\0"+
    "\6\5\1\142\2\5\1\0\1\5\4\0\1\5\14\0"+
    "\32\5\1\0\3\5\2\0\12\5\27\0\1\143\62\0"+
    "\11\5\1\0\1\5\4\0\1\5\14\0\32\5\1\0"+
    "\3\5\2\0\1\5\1\144\10\5\2\0\11\5\1\0"+
    "\1\5\4\0\1\5\14\0\32\5\1\0\3\5\2\0"+
    "\3\5\1\145\6\5\2\0\11\5\1\0\1\5\4\0"+
    "\1\5\14\0\1\146\31\5\1\0\3\5\2\0\12\5"+
    "\2\0\11\5\1\0\1\5\4\0\1\5\14\0\1\147"+
    "\31\5\1\0\3\5\2\0\12\5\2\0\11\5\1\0"+
    "\1\5\4\0\1\5\14\0\2\5\1\150\27\5\1\0"+
    "\3\5\2\0\12\5\2\0\1\151\13\0\1\70\73\0"+
    "\3\5\1\152\5\5\1\0\1\5\4\0\1\5\14\0"+
    "\32\5\1\0\3\5\2\0\12\5\2\0\11\5\1\0"+
    "\1\5\4\0\1\5\14\0\22\5\1\153\7\5\1\0"+
    "\3\5\2\0\12\5\2\0\11\5\1\0\1\5\4\0"+
    "\1\5\14\0\22\5\1\154\7\5\1\0\3\5\2\0"+
    "\12\5\2\0\7\5\1\155\1\5\1\0\1\5\4\0"+
    "\1\5\14\0\32\5\1\0\3\5\2\0\12\5\2\0"+
    "\2\5\1\156\6\5\1\0\1\5\4\0\1\5\14\0"+
    "\32\5\1\0\3\5\2\0\12\5\2\0\11\5\1\0"+
    "\1\5\4\0\1\5\14\0\30\5\1\157\1\5\1\0"+
    "\3\5\2\0\12\5\2\0\11\5\1\0\1\5\4\0"+
    "\1\5\14\0\16\5\1\160\13\5\1\0\3\5\2\0"+
    "\12\5\2\0\11\5\1\0\1\5\4\0\1\5\14\0"+
    "\7\5\1\161\22\5\1\0\3\5\2\0\12\5\2\0"+
    "\2\5\1\162\6\5\1\0\1\5\4\0\1\5\14\0"+
    "\32\5\1\0\3\5\2\0\12\5\2\0\11\5\1\0"+
    "\1\5\4\0\1\5\14\0\13\5\1\163\16\5\1\0"+
    "\3\5\2\0\12\5\2\0\11\103\1\0\1\103\4\0"+
    "\1\103\14\0\32\103\1\0\3\103\2\0\12\103\2\0"+
    "\11\5\1\0\1\5\4\0\1\5\14\0\5\5\1\164"+
    "\24\5\1\0\3\5\2\0\12\5\2\0\11\5\1\0"+
    "\1\5\4\0\1\5\14\0\7\5\1\165\22\5\1\0"+
    "\3\5\2\0\12\5\2\0\11\5\1\0\1\5\4\0"+
    "\1\5\14\0\5\5\1\161\24\5\1\0\3\5\2\0"+
    "\12\5\2\0\11\5\1\0\1\5\4\0\1\5\14\0"+
    "\26\5\1\157\3\5\1\0\3\5\2\0\12\5\2\0"+
    "\11\5\1\0\1\5\4\0\1\5\14\0\15\5\1\160"+
    "\14\5\1\0\3\5\2\0\12\5\2\0\11\5\1\0"+
    "\1\5\4\0\1\5\14\0\27\5\1\166\2\5\1\0"+
    "\3\5\2\0\12\5\2\0\11\5\1\0\1\5\4\0"+
    "\1\5\14\0\1\5\1\167\6\5\1\170\21\5\1\0"+
    "\3\5\2\0\12\5\2\0\1\5\1\166\7\5\1\0"+
    "\1\5\4\0\1\5\14\0\32\5\1\0\3\5\2\0"+
    "\12\5\2\0\2\5\1\171\5\5\1\172\1\0\1\5"+
    "\4\0\1\5\14\0\32\5\1\0\3\5\2\0\12\5"+
    "\2\0\11\5\1\0\1\5\4\0\1\5\14\0\12\5"+
    "\1\163\17\5\1\0\3\5\2\0\12\5\2\0\11\5"+
    "\1\0\1\5\4\0\1\5\14\0\1\5\1\173\30\5"+
    "\1\0\3\5\2\0\12\5\2\0\11\5\1\0\1\5"+
    "\4\0\1\5\14\0\17\5\1\174\12\5\1\0\3\5"+
    "\2\0\12\5\2\0\11\5\1\0\1\5\4\0\1\5"+
    "\14\0\24\5\1\175\5\5\1\0\3\5\2\0\12\5"+
    "\2\0\11\5\1\0\1\5\4\0\1\5\14\0\4\5"+
    "\1\176\25\5\1\0\3\5\2\0\12\5\2\0\11\5"+
    "\1\0\1\5\4\0\1\5\14\0\25\5\1\175\4\5"+
    "\1\0\3\5\2\0\12\5\2\0\11\5\1\0\1\5"+
    "\4\0\1\5\14\0\6\5\1\177\23\5\1\0\3\5"+
    "\2\0\12\5\2\0\11\5\1\0\1\5\4\0\1\5"+
    "\14\0\1\200\31\5\1\0\3\5\2\0\12\5\2\0"+
    "\11\5\1\0\1\5\4\0\1\5\14\0\2\5\1\201"+
    "\27\5\1\0\3\5\2\0\12\5\2\0\11\5\1\0"+
    "\1\5\4\0\1\5\14\0\27\5\1\202\2\5\1\0"+
    "\3\5\2\0\12\5\2\0\11\5\1\0\1\5\4\0"+
    "\1\5\14\0\17\5\1\203\12\5\1\0\3\5\2\0"+
    "\12\5\2\0\1\5\1\204\7\5\1\0\1\5\4\0"+
    "\1\5\14\0\32\5\1\0\3\5\2\0\12\5\2\0"+
    "\11\5\1\0\1\5\4\0\1\5\14\0\11\5\1\205"+
    "\20\5\1\0\3\5\2\0\12\5\2\0\11\5\1\0"+
    "\1\5\4\0\1\5\14\0\1\206\31\5\1\0\3\5"+
    "\2\0\12\5\2\0\11\5\1\0\1\5\4\0\1\5"+
    "\14\0\2\5\1\207\27\5\1\0\3\5\2\0\12\5"+
    "\2\0\3\5\1\210\5\5\1\0\1\5\4\0\1\5"+
    "\14\0\32\5\1\0\3\5\2\0\12\5\2\0\11\5"+
    "\1\0\1\5\4\0\1\5\14\0\15\5\1\211\14\5"+
    "\1\0\3\5\2\0\12\5\2\0\11\5\1\0\1\5"+
    "\4\0\1\5\14\0\16\5\1\211\13\5\1\0\3\5"+
    "\2\0\12\5\2\0\11\5\1\0\1\5\4\0\1\5"+
    "\14\0\21\5\1\212\10\5\1\0\3\5\2\0\12\5"+
    "\2\0\4\5\1\213\4\5\1\0\1\5\4\0\1\5"+
    "\14\0\32\5\1\0\3\5\2\0\12\5\2\0\11\5"+
    "\1\0\1\5\4\0\1\5\14\0\1\5\1\214\30\5"+
    "\1\0\3\5\2\0\12\5\2\0\11\5\1\0\1\5"+
    "\4\0\1\5\14\0\17\5\1\215\12\5\1\0\3\5"+
    "\2\0\12\5\2\0\11\5\1\0\1\5\4\0\1\5"+
    "\14\0\22\5\1\216\7\5\1\0\3\5\2\0\12\5"+
    "\2\0\1\151\107\0\4\5\1\217\4\5\1\0\1\5"+
    "\4\0\1\5\14\0\32\5\1\0\3\5\2\0\12\5"+
    "\2\0\11\5\1\0\1\5\4\0\1\5\14\0\2\5"+
    "\1\220\20\5\1\221\6\5\1\0\3\5\2\0\12\5"+
    "\2\0\10\5\1\222\1\0\1\5\4\0\1\5\14\0"+
    "\32\5\1\0\3\5\2\0\12\5\2\0\10\5\1\152"+
    "\1\0\1\5\4\0\1\5\14\0\32\5\1\0\3\5"+
    "\2\0\12\5\2\0\4\5\1\223\4\5\1\0\1\5"+
    "\4\0\1\5\14\0\32\5\1\224\3\5\2\0\12\5"+
    "\2\0\3\5\1\225\5\5\1\0\1\5\4\0\1\5"+
    "\14\0\32\5\1\0\3\5\2\0\12\5\2\0\11\5"+
    "\1\0\1\5\4\0\1\5\14\0\21\5\1\226\10\5"+
    "\1\0\3\5\2\0\12\5\2\0\4\5\1\227\4\5"+
    "\1\0\1\5\4\0\1\5\14\0\32\5\1\0\3\5"+
    "\2\0\12\5\2\0\11\5\1\0\1\5\4\0\1\5"+
    "\14\0\21\5\1\230\10\5\1\0\3\5\2\0\12\5"+
    "\2\0\11\5\1\0\1\5\4\0\1\5\14\0\26\5"+
    "\1\231\3\5\1\0\3\5\2\0\12\5\2\0\4\5"+
    "\1\232\4\5\1\0\1\5\4\0\1\5\14\0\32\5"+
    "\1\0\3\5\2\0\12\5\2\0\11\5\1\0\1\5"+
    "\4\0\1\5\14\0\30\5\1\231\1\5\1\0\3\5"+
    "\2\0\12\5\2\0\11\5\1\0\1\5\4\0\1\5"+
    "\14\0\11\5\1\233\20\5\1\0\3\5\2\0\12\5"+
    "\2\0\11\5\1\0\1\5\4\0\1\5\14\0\1\234"+
    "\17\5\1\235\11\5\1\0\3\5\2\0\12\5\2\0"+
    "\11\5\1\0\1\5\4\0\1\5\14\0\11\5\1\236"+
    "\20\5\1\0\3\5\2\0\12\5\2\0\3\5\1\237"+
    "\5\5\1\0\1\5\4\0\1\5\14\0\32\5\1\0"+
    "\3\5\2\0\12\5\2\0\11\5\1\0\1\5\4\0"+
    "\1\5\14\0\11\5\1\240\20\5\1\0\3\5\2\0"+
    "\12\5\2\0\3\5\1\241\5\5\1\0\1\5\4\0"+
    "\1\5\14\0\32\5\1\0\3\5\2\0\12\5\2\0"+
    "\11\5\1\0\1\5\4\0\1\5\14\0\21\5\1\242"+
    "\10\5\1\0\3\5\2\0\12\5\2\0\11\5\1\0"+
    "\1\5\4\0\1\5\14\0\10\5\1\243\21\5\1\0"+
    "\3\5\2\0\12\5\2\0\4\5\1\244\4\5\1\0"+
    "\1\5\4\0\1\5\14\0\32\5\1\0\3\5\2\0"+
    "\12\5\2\0\11\5\1\0\1\5\4\0\1\5\14\0"+
    "\4\5\1\245\25\5\1\0\3\5\2\0\12\5\2\0"+
    "\11\5\1\0\1\5\4\0\1\5\14\0\10\5\1\246"+
    "\21\5\1\0\3\5\2\0\12\5\2\0\10\5\1\247"+
    "\1\0\1\5\4\0\1\5\14\0\32\5\1\0\3\5"+
    "\2\0\12\5\2\0\11\5\1\0\1\5\4\0\1\5"+
    "\14\0\6\5\1\250\23\5\1\0\3\5\2\0\12\5"+
    "\2\0\11\5\1\0\1\5\4\0\1\5\14\0\1\5"+
    "\1\251\30\5\1\0\3\5\2\0\12\5\2\0\2\5"+
    "\1\252\6\5\1\0\1\5\4\0\1\5\14\0\32\5"+
    "\1\0\3\5\2\0\12\5\2\0\11\5\1\0\1\5"+
    "\4\0\1\5\14\0\21\5\1\253\10\5\1\254\3\5"+
    "\2\0\12\5\2\0\11\5\1\0\1\5\4\0\1\5"+
    "\14\0\4\5\1\255\25\5\1\0\3\5\2\0\12\5"+
    "\2\0\11\5\1\0\1\5\4\0\1\5\14\0\6\5"+
    "\1\255\23\5\1\0\3\5\2\0\12\5\2\0\11\5"+
    "\1\0\1\5\4\0\1\5\14\0\6\5\1\256\23\5"+
    "\1\0\3\5\2\0\12\5\2\0\3\5\1\257\5\5"+
    "\1\0\1\5\4\0\1\5\14\0\32\5\1\0\3\5"+
    "\2\0\12\5\2\0\1\5\1\260\7\5\1\0\1\5"+
    "\4\0\1\5\14\0\32\5\1\0\3\5\2\0\12\5"+
    "\2\0\6\5\1\261\2\5\1\0\1\5\4\0\1\5"+
    "\14\0\32\5\1\0\3\5\2\0\12\5\10\0\1\262"+
    "\101\0\11\5\1\0\1\5\4\0\1\5\14\0\30\5"+
    "\1\263\1\5\1\0\3\5\2\0\12\5\2\0\11\5"+
    "\1\0\1\5\4\0\1\5\14\0\1\5\1\264\30\5"+
    "\1\0\3\5\2\0\12\5\2\0\2\5\1\265\6\5"+
    "\1\0\1\5\4\0\1\5\14\0\32\5\1\0\3\5"+
    "\2\0\12\5\2\0\11\5\1\0\1\5\4\0\1\5"+
    "\14\0\32\5\1\0\3\5\2\0\4\5\1\266\5\5"+
    "\2\0\5\5\1\266\3\5\1\0\1\5\4\0\1\5"+
    "\14\0\32\5\1\0\3\5\2\0\12\5\2\0\11\5"+
    "\1\0\1\5\4\0\1\5\14\0\26\5\1\267\3\5"+
    "\1\0\3\5\2\0\12\5\2\0\11\5\1\0\1\5"+
    "\4\0\1\5\14\0\4\5\1\256\25\5\1\0\3\5"+
    "\2\0\12\5\2\0\11\5\1\0\1\5\4\0\1\5"+
    "\14\0\11\5\1\270\20\5\1\0\3\5\2\0\12\5"+
    "\2\0\11\5\1\0\1\5\4\0\1\5\14\0\10\5"+
    "\1\271\21\5\1\0\3\5\2\0\12\5\2\0\10\5"+
    "\1\271\1\0\1\5\4\0\1\5\14\0\32\5\1\0"+
    "\3\5\2\0\12\5\2\0\11\5\1\0\1\5\4\0"+
    "\1\5\14\0\31\5\1\272\1\0\3\5\2\0\12\5"+
    "\2\0\11\5\1\0\1\5\4\0\1\5\14\0\32\5"+
    "\1\0\1\273\2\5\2\0\12\5\2\0\11\5\1\0"+
    "\1\5\4\0\1\5\14\0\1\5\1\274\30\5\1\0"+
    "\3\5\2\0\12\5\2\0\11\5\1\0\1\5\4\0"+
    "\1\5\14\0\27\5\1\275\2\5\1\0\3\5\2\0"+
    "\12\5\2\0\2\5\1\276\6\5\1\0\1\5\4\0"+
    "\1\5\14\0\32\5\1\0\3\5\2\0\12\5\2\0"+
    "\11\5\1\0\1\5\4\0\1\5\14\0\27\5\1\277"+
    "\2\5\1\0\3\5\2\0\12\5\2\0\11\5\1\0"+
    "\1\5\4\0\1\5\14\0\21\5\1\300\10\5\1\0"+
    "\3\5\2\0\12\5\2\0\4\5\1\301\4\5\1\0"+
    "\1\5\4\0\1\5\14\0\32\5\1\0\3\5\2\0"+
    "\12\5\2\0\1\5\1\277\7\5\1\0\1\5\4\0"+
    "\1\5\14\0\32\5\1\0\3\5\2\0\12\5\2\0"+
    "\11\5\1\0\1\5\4\0\1\5\14\0\21\5\1\302"+
    "\10\5\1\0\3\5\2\0\12\5\2\0\4\5\1\302"+
    "\4\5\1\0\1\5\4\0\1\5\14\0\32\5\1\0"+
    "\3\5\2\0\12\5\2\0\11\5\1\0\1\5\4\0"+
    "\1\5\14\0\3\5\1\303\26\5\1\0\3\5\2\0"+
    "\12\5\41\0\1\304\50\0\4\5\1\305\4\5\1\0"+
    "\1\5\4\0\1\5\14\0\32\5\1\0\3\5\2\0"+
    "\12\5\2\0\10\5\1\306\1\0\1\5\4\0\1\5"+
    "\14\0\32\5\1\0\3\5\2\0\12\5\2\0\11\5"+
    "\1\0\1\5\4\0\1\5\14\0\30\5\1\307\1\5"+
    "\1\0\3\5\2\0\12\5\11\0\1\310\32\0\1\311"+
    "\45\0\1\5\1\312\7\5\1\0\1\5\4\0\1\5"+
    "\14\0\32\5\1\0\3\5\2\0\12\5\2\0\11\5"+
    "\1\0\1\5\4\0\1\5\14\0\32\5\1\313\3\5"+
    "\2\0\12\5\2\0\11\5\1\0\1\5\4\0\1\5"+
    "\14\0\32\5\1\314\3\5\2\0\12\5\2\0\11\5"+
    "\1\0\1\5\4\0\1\5\14\0\27\5\1\312\2\5"+
    "\1\0\3\5\2\0\12\5\2\0\11\5\1\0\1\5"+
    "\4\0\1\5\14\0\21\5\1\305\10\5\1\0\3\5"+
    "\2\0\12\5\2\0\11\5\1\0\1\5\4\0\1\5"+
    "\14\0\32\5\1\315\3\5\2\0\12\5\2\0\11\5"+
    "\1\0\1\5\4\0\1\5\14\0\32\5\1\316\3\5"+
    "\2\0\12\5\2\0\11\5\1\0\1\5\4\0\1\5"+
    "\14\0\10\5\1\317\21\5\1\0\3\5\2\0\12\5"+
    "\2\0\11\5\1\0\1\5\4\0\1\5\14\0\10\5"+
    "\1\306\21\5\1\0\3\5\2\0\12\5\2\0\10\5"+
    "\1\320\1\0\1\5\4\0\1\5\14\0\32\5\1\0"+
    "\3\5\2\0\12\5\2\0\11\5\1\0\1\5\4\0"+
    "\1\5\14\0\32\5\1\321\3\5\2\0\12\5\2\0"+
    "\11\5\1\0\1\5\4\0\1\5\14\0\32\5\1\322"+
    "\3\5\2\0\12\5\2\0\11\5\1\0\1\5\4\0"+
    "\1\5\14\0\26\5\1\323\3\5\1\0\3\5\2\0"+
    "\12\5\42\0\1\324\42\0\1\325\4\0\11\5\1\0"+
    "\1\5\4\0\1\5\14\0\32\5\1\0\3\5\2\0"+
    "\3\5\1\326\6\5\11\0\1\327\205\0\1\330\72\0"+
    "\1\331\110\0\1\332\55\0\1\333\56\0\1\334\101\0"+
    "\11\5\1\0\1\5\4\0\1\5\14\0\21\5\1\335"+
    "\10\5\1\0\3\5\2\0\12\5\2\0\4\5\1\336"+
    "\4\5\1\0\1\5\4\0\1\5\14\0\32\5\1\0"+
    "\3\5\2\0\12\5\72\0\1\337\110\0\1\340\16\0"+
    "\11\5\1\0\1\5\4\0\1\5\14\0\32\5\1\0"+
    "\3\5\2\0\1\5\1\326\10\5\106\0\1\330\106\0"+
    "\1\327\110\0\1\341\110\0\1\341\46\0\1\342\53\0"+
    "\1\342\77\0\11\5\1\0\1\5\4\0\1\5\14\0"+
    "\26\5\1\343\3\5\1\0\3\5\2\0\12\5\2\0"+
    "\11\5\1\0\1\5\4\0\1\5\14\0\30\5\1\344"+
    "\1\5\1\0\3\5\2\0\12\5\106\0\1\345\110\0"+
    "\1\345\2\0\11\5\1\0\1\5\4\0\1\5\14\0"+
    "\27\5\1\346\2\5\1\0\3\5\2\0\12\5\2\0"+
    "\1\5\1\346\7\5\1\0\1\5\4\0\1\5\14\0"+
    "\32\5\1\0\3\5\2\0\12\5\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13536];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\10\1\1\0\1\11\1\0\2\1\5\11"+
    "\2\0\4\11\26\1\1\11\5\1\1\11\1\0\13\1"+
    "\4\11\33\1\1\11\60\1\1\0\27\1\1\0\5\1"+
    "\1\0\21\1\1\0\3\1\2\0\1\1\4\0\2\1"+
    "\2\0\1\1\2\0\1\1\2\11\4\0\2\1\2\0"+
    "\2\11\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private StringBuffer str;
//	private String identifier;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 49: 
          { return new Symbol(ParserSym.FORANY);
          }
        case 54: break;
        case 19: 
          { return new Symbol(ParserSym.JAVA_PARAM, yytext());
          }
        case 55: break;
        case 33: 
          { return new Symbol(ParserSym.MAX, yytext());
          }
        case 56: break;
        case 32: 
          { return new Symbol(ParserSym.NOT, yytext());
          }
        case 57: break;
        case 28: 
          { /*System.out.println("LEX: asc"); */ return new Symbol(ParserSym.GROUPBY_ASC);
          }
        case 58: break;
        case 17: 
          { return new Symbol(ParserSym.SEMICOLON);
          }
        case 59: break;
        case 29: 
          { return new Symbol(ParserSym.AVG, yytext());
          }
        case 60: break;
        case 7: 
          { return new Symbol(ParserSym.MULTIPLY, yytext());
          }
        case 61: break;
        case 27: 
          { double val;
		try {
			val = Double.parseDouble(yytext());
		}
		catch (Exception e) {
			throw new RuntimeException(e.getMessage());
		}
		return new Symbol(ParserSym.DOUBLE_LITERAL, new Double(val));
          }
        case 62: break;
        case 40: 
          { return new Symbol(ParserSym.DEREF, yytext());
          }
        case 63: break;
        case 16: 
          { return new Symbol(ParserSym.COMA, yytext());
          }
        case 64: break;
        case 13: 
          { return new Symbol(ParserSym.RIGHT_CURLY_BRACKET);
          }
        case 65: break;
        case 38: 
          { return new Symbol(ParserSym.JOIN);
          }
        case 66: break;
        case 30: 
          { return new Symbol(ParserSym.AND, yytext());
          }
        case 67: break;
        case 42: 
          { return new Symbol(ParserSym.COUNT, yytext());
          }
        case 68: break;
        case 14: 
          { return new Symbol(ParserSym.MORE, yytext());
          }
        case 69: break;
        case 8: 
          { return new Symbol(ParserSym.DIVIDE, yytext());
          }
        case 70: break;
        case 5: 
          { return new Symbol(ParserSym.PLUS, yytext());
          }
        case 71: break;
        case 18: 
          { return new Symbol(ParserSym.AS);
          }
        case 72: break;
        case 23: 
          { return new Symbol(ParserSym.MORE_OR_EQUAL, yytext());
          }
        case 73: break;
        case 50: 
          { System.out.println("LEX: orderby");  return new Symbol(ParserSym.ORDER_BY, yytext());
          }
        case 74: break;
        case 26: 
          { return new Symbol(ParserSym.LESS_OR_EQUAL, yytext());
          }
        case 75: break;
        case 10: 
          { return new Symbol(ParserSym.LEFT_ROUND_BRACKET);
          }
        case 76: break;
        case 52: 
          { return new Symbol(ParserSym.CLOSE_BY);
          }
        case 77: break;
        case 35: 
          { return new Symbol(ParserSym.BAG, yytext());
          }
        case 78: break;
        case 44: 
          { return new Symbol(ParserSym.UNIQUE, yytext());
          }
        case 79: break;
        case 6: 
          { return new Symbol(ParserSym.MINUS, yytext());
          }
        case 80: break;
        case 25: 
          { return new Symbol(ParserSym.IN, yytext());
          }
        case 81: break;
        case 12: 
          { return new Symbol(ParserSym.LEFT_CURLY_BRACKET);
          }
        case 82: break;
        case 31: 
          { return new Symbol(ParserSym.SUM, yytext());
          }
        case 83: break;
        case 39: 
          { return new Symbol(ParserSym.UNION, yytext());
          }
        case 84: break;
        case 45: 
          { return new Symbol(ParserSym.EXISTS, yytext());
          }
        case 85: break;
        case 37: 
          { /* System.out.println("LEX: desc"); */ return new Symbol(ParserSym.GROUPBY_DESC);
          }
        case 86: break;
        case 41: 
          { return new Symbol(ParserSym.MINUS_FUNCTION, yytext());
          }
        case 87: break;
        case 15: 
          { return new Symbol(ParserSym.LESS, yytext());
          }
        case 88: break;
        case 48: 
          { return new Symbol(ParserSym.FORALL);
          }
        case 89: break;
        case 36: 
          { boolean val;
		try {
			val = Boolean.parseBoolean(yytext());
		}
		catch (Exception e) {
			throw new RuntimeException(e.getMessage());
		}
		return new Symbol(ParserSym.BOOLEAN_LITERAL, new Boolean(val));
          }
        case 90: break;
        case 1: 
          { int val;
		try {
			val = Integer.parseInt(yytext());
		}
		catch (Exception e) {
			throw new RuntimeException(e.getMessage());
		}
		return new Symbol(ParserSym.INTEGER_LITERAL, new Integer(val));
          }
        case 91: break;
        case 24: 
          { return new Symbol(ParserSym.OR, yytext());
          }
        case 92: break;
        case 51: 
          { return new Symbol(ParserSym.GROUP_AS);
          }
        case 93: break;
        case 46: 
          { return new Symbol(ParserSym.STRUCT, yytext());
          }
        case 94: break;
        case 21: 
          { return new Symbol(ParserSym.EQUALS, yytext());
          }
        case 95: break;
        case 9: 
          { return new Symbol(ParserSym.MODULO, yytext());
          }
        case 96: break;
        case 20: 
          { return new Symbol(ParserSym.STRING_LITERAL,yytext().substring(1,yytext().length()-1));
          }
        case 97: break;
        case 43: 
          { return new Symbol(ParserSym.WHERE, yytext());
          }
        case 98: break;
        case 34: 
          { return new Symbol(ParserSym.MIN, yytext());
          }
        case 99: break;
        case 53: 
          { return new Symbol(ParserSym.INTERSECT, yytext());
          }
        case 100: break;
        case 3: 
          { return new Symbol(ParserSym.DOT, yytext());
          }
        case 101: break;
        case 47: 
          { return new Symbol(ParserSym.FOREACH);
          }
        case 102: break;
        case 11: 
          { return new Symbol(ParserSym.RIGHT_ROUND_BRACKET);
          }
        case 103: break;
        case 4: 
          { 
          }
        case 104: break;
        case 22: 
          { return new Symbol(ParserSym.NOT_EQUALS, yytext());
          }
        case 105: break;
        case 2: 
          { //		System.out.println("IDENTIFIER: "+yytext()); 
		return new Symbol(ParserSym.IDENTIFIER, yytext());
          }
        case 106: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return new Symbol(ParserSym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
