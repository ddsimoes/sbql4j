
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 24 17:13:55 CET 2009
//----------------------------------------------------

package pl.wcislo.sbql4j.lang.parser;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.DefaultSymbolFactory;
import pl.wcislo.sbql4j.lang.parser.expression.AsExpression;
import pl.wcislo.sbql4j.lang.parser.expression.BinaryAExpression;
import pl.wcislo.sbql4j.lang.parser.expression.CloseByExpression;
import pl.wcislo.sbql4j.lang.parser.expression.DerefExpression;
import pl.wcislo.sbql4j.lang.parser.expression.DotExpression;
import pl.wcislo.sbql4j.lang.parser.expression.Expression;
import pl.wcislo.sbql4j.lang.parser.expression.ForEachExpression;
import pl.wcislo.sbql4j.lang.parser.expression.ForallExpression;
import pl.wcislo.sbql4j.lang.parser.expression.ForanyExpression;
import pl.wcislo.sbql4j.lang.parser.expression.GroupAsExpression;
import pl.wcislo.sbql4j.lang.parser.expression.IdentifierExpression;
import pl.wcislo.sbql4j.lang.parser.expression.JavaParamExpression;
import pl.wcislo.sbql4j.lang.parser.expression.JoinExpression;
import pl.wcislo.sbql4j.lang.parser.expression.LiteralExpression;
import pl.wcislo.sbql4j.lang.parser.expression.MethodExpression;
import pl.wcislo.sbql4j.lang.parser.expression.OrderByExpression;
import pl.wcislo.sbql4j.lang.parser.expression.OrderByExpressionWrapper;
import pl.wcislo.sbql4j.lang.parser.expression.UnaryExpression;
import pl.wcislo.sbql4j.lang.parser.expression.WhereExpression;
import pl.wcislo.sbql4j.lang.parser.expression.MethodExpression.MethodExpressionSignature;
import pl.wcislo.sbql4j.lang.parser.expression.OrderByExpressionWrapper.SortType;
import pl.wcislo.sbql4j.lang.parser.terminals.Identifier;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorFactory;
import pl.wcislo.sbql4j.lang.types.SimpleType;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 24 17:13:55 CET 2009
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\005\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\003\000\002\003\004\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\003\005\000\002\003\007\000\002\014\002\000" +
    "\002\014\005\000\002\005\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\006" +
    "\005\000\002\006\006\000\002\010\005\000\002\011\003" +
    "\000\002\011\005\000\002\011\005\000\002\012\004\000" +
    "\002\012\003\000\002\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\054\004\030\005\036\006\013\007\014\012" +
    "\016\023\020\025\011\026\025\027\035\035\031\036\033" +
    "\043\021\044\007\045\010\046\027\051\005\052\017\056" +
    "\012\057\024\062\032\067\022\001\002\000\152\002\uffd9" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061" +
    "\uffd9\062\uffd9\063\uffd9\064\uffd9\066\uffd9\067\uffd9\001\002" +
    "\000\054\004\030\005\036\006\013\007\014\012\016\023" +
    "\020\025\011\026\025\027\035\035\031\036\033\043\021" +
    "\044\007\045\010\046\027\051\005\052\017\056\012\057" +
    "\024\062\032\067\022\001\002\000\072\002\000\010\041" +
    "\011\051\013\044\014\064\015\043\016\060\017\053\020" +
    "\061\021\056\022\067\024\062\030\045\031\042\032\072" +
    "\033\046\034\065\037\055\040\047\041\066\042\040\047" +
    "\050\050\070\053\071\054\052\055\073\060\063\061\057" +
    "\001\002\000\054\004\030\005\036\006\013\007\014\012" +
    "\016\023\020\025\011\026\025\027\035\035\031\036\033" +
    "\043\021\044\007\045\010\046\027\051\005\052\017\056" +
    "\012\057\024\062\032\067\022\001\002\000\054\004\030" +
    "\005\036\006\013\007\014\012\016\023\020\025\011\026" +
    "\025\027\035\035\031\036\033\043\021\044\007\045\010" +
    "\046\027\051\005\052\017\056\012\057\024\062\032\067" +
    "\022\001\002\000\054\004\030\005\036\006\013\007\014" +
    "\012\016\023\020\025\011\026\025\027\035\035\031\036" +
    "\033\043\021\044\007\045\010\046\027\051\005\052\017" +
    "\056\012\057\024\062\032\067\022\001\002\000\054\004" +
    "\030\005\036\006\013\007\014\012\016\023\020\025\011" +
    "\026\025\027\035\035\031\036\033\043\021\044\007\045" +
    "\010\046\027\051\005\052\017\056\012\057\024\062\032" +
    "\067\022\001\002\000\152\002\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd" +
    "\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd" +
    "\064\uffcd\066\uffcd\067\uffcd\001\002\000\152\002\uffd0\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\062\147\063\uffd0\064\uffd0\066\uffd0\067\uffd0\001\002\000" +
    "\004\002\146\001\002\000\152\002\uffcc\004\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063" +
    "\uffcc\064\uffcc\066\uffcc\067\uffcc\001\002\000\054\004\030" +
    "\005\036\006\013\007\014\012\016\023\020\025\011\026" +
    "\025\027\035\035\031\036\033\043\021\044\007\045\010" +
    "\046\027\051\005\052\017\056\012\057\024\062\032\067" +
    "\022\001\002\000\054\004\030\005\036\006\013\007\014" +
    "\012\016\023\020\025\011\026\025\027\035\035\031\036" +
    "\033\043\021\044\007\045\010\046\027\051\005\052\017" +
    "\056\012\057\024\062\032\067\022\001\002\000\054\004" +
    "\030\005\036\006\013\007\014\012\016\023\020\025\011" +
    "\026\025\027\035\035\031\036\033\043\021\044\007\045" +
    "\010\046\027\051\005\052\017\056\012\057\024\062\032" +
    "\067\022\001\002\000\054\004\030\005\036\006\013\007" +
    "\014\012\016\023\020\025\011\026\025\027\035\035\031" +
    "\036\033\043\021\044\007\045\010\046\027\051\005\052" +
    "\017\056\012\057\024\062\032\067\022\001\002\000\152" +
    "\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060" +
    "\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\066\uffd8\067\uffd8" +
    "\001\002\000\054\004\030\005\036\006\013\007\014\012" +
    "\016\023\020\025\011\026\025\027\035\035\031\036\033" +
    "\043\021\044\007\045\010\046\027\051\005\052\017\056" +
    "\012\057\024\062\032\067\022\001\002\000\054\004\030" +
    "\005\036\006\013\007\014\012\016\023\020\025\011\026" +
    "\025\027\035\035\031\036\033\043\021\044\007\045\010" +
    "\046\027\051\005\052\017\056\012\057\024\062\032\067" +
    "\022\001\002\000\152\002\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\066\uffd7\067\uffd7\001\002\000\152\002\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062" +
    "\uffd6\063\uffd6\064\uffd6\066\uffd6\067\uffd6\001\002\000\152" +
    "\002\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060" +
    "\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\066\uffcf\067\uffcf" +
    "\001\002\000\054\004\030\005\036\006\013\007\014\012" +
    "\016\023\020\025\011\026\025\027\035\035\031\036\033" +
    "\043\021\044\007\045\010\046\027\051\005\052\017\056" +
    "\012\057\024\062\032\067\022\001\002\000\054\004\030" +
    "\005\036\006\013\007\014\012\016\023\020\025\011\026" +
    "\025\027\035\035\031\036\033\043\021\044\007\045\010" +
    "\046\027\051\005\052\017\056\012\057\024\062\032\067" +
    "\022\001\002\000\054\004\030\005\036\006\013\007\014" +
    "\012\016\023\020\025\011\026\025\027\035\035\031\036" +
    "\033\043\021\044\007\045\010\046\027\051\005\052\017" +
    "\056\012\057\024\062\032\067\022\001\002\000\152\002" +
    "\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde" +
    "\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052" +
    "\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde" +
    "\061\uffde\062\uffde\063\uffde\064\uffde\066\uffde\067\uffde\001" +
    "\002\000\054\004\030\005\036\006\013\007\014\012\016" +
    "\023\020\025\011\026\025\027\035\035\031\036\033\043" +
    "\021\044\007\045\010\046\027\051\005\052\017\056\012" +
    "\057\024\062\032\067\022\001\002\000\152\002\uffce\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce" +
    "\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053" +
    "\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce" +
    "\062\uffce\063\uffce\064\uffce\066\uffce\067\uffce\001\002\000" +
    "\152\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\041" +
    "\011\051\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\066\042\uffee" +
    "\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051" +
    "\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee" +
    "\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\066\uffee\067" +
    "\uffee\001\002\000\054\004\030\005\036\006\013\007\014" +
    "\012\016\023\020\025\011\026\025\027\035\035\031\036" +
    "\033\043\021\044\007\045\010\046\027\051\005\052\017" +
    "\056\012\057\024\062\032\067\022\001\002\000\152\002" +
    "\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052" +
    "\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3" +
    "\061\uffc3\062\uffc3\063\uffc3\064\uffc3\066\uffc3\067\uffc3\001" +
    "\002\000\054\004\030\005\036\006\013\007\014\012\016" +
    "\023\020\025\011\026\025\027\035\035\031\036\033\043" +
    "\021\044\007\045\010\046\027\051\005\052\017\056\012" +
    "\057\024\062\032\067\022\001\002\000\054\004\030\005" +
    "\036\006\013\007\014\012\016\023\020\025\011\026\025" +
    "\027\035\035\031\036\033\043\021\044\007\045\010\046" +
    "\027\051\005\052\017\056\012\057\024\062\032\067\022" +
    "\001\002\000\054\004\030\005\036\006\013\007\014\012" +
    "\016\023\020\025\011\026\025\027\035\035\031\036\033" +
    "\043\021\044\007\045\010\046\027\051\005\052\017\056" +
    "\012\057\024\062\032\067\022\001\002\000\054\004\030" +
    "\005\036\006\013\007\014\012\016\023\020\025\011\026" +
    "\025\027\035\035\031\036\033\043\021\044\007\045\010" +
    "\046\027\051\005\052\017\056\012\057\024\062\032\067" +
    "\022\001\002\000\054\004\030\005\036\006\013\007\014" +
    "\012\016\023\020\025\011\026\025\027\035\035\031\036" +
    "\033\043\021\044\007\045\010\046\027\051\005\052\017" +
    "\056\012\057\024\062\032\067\022\001\002\000\054\004" +
    "\030\005\036\006\013\007\014\012\016\023\020\025\011" +
    "\026\025\027\035\035\031\036\033\043\021\044\007\045" +
    "\010\046\027\051\005\052\017\056\012\057\024\062\032" +
    "\067\022\001\002\000\054\004\030\005\036\006\013\007" +
    "\014\012\016\023\020\025\011\026\025\027\035\035\031" +
    "\036\033\043\021\044\007\045\010\046\027\051\005\052" +
    "\017\056\012\057\024\062\032\067\022\001\002\000\152" +
    "\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011" +
    "\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\066\uffc2\067\uffc2" +
    "\001\002\000\004\007\074\001\002\000\054\004\030\005" +
    "\036\006\013\007\014\012\016\023\020\025\011\026\025" +
    "\027\035\035\031\036\033\043\021\044\007\045\010\046" +
    "\027\051\005\052\017\056\012\057\024\062\032\067\022" +
    "\001\002\000\152\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd" +
    "\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd" +
    "\066\uffdd\067\uffdd\001\002\000\054\004\030\005\036\006" +
    "\013\007\014\012\016\023\020\025\011\026\025\027\035" +
    "\035\031\036\033\043\021\044\007\045\010\046\027\051" +
    "\005\052\017\056\012\057\024\062\032\067\022\001\002" +
    "\000\054\004\030\005\036\006\013\007\014\012\016\023" +
    "\020\025\011\026\025\027\035\035\031\036\033\043\021" +
    "\044\007\045\010\046\027\051\005\052\017\056\012\057" +
    "\024\062\032\067\022\001\002\000\054\004\030\005\036" +
    "\006\013\007\014\012\016\023\020\025\011\026\025\027" +
    "\035\035\031\036\033\043\021\044\007\045\010\046\027" +
    "\051\005\052\017\056\012\057\024\062\032\067\022\001" +
    "\002\000\054\004\030\005\036\006\013\007\014\012\016" +
    "\023\020\025\011\026\025\027\035\035\031\036\033\043" +
    "\021\044\007\045\010\046\027\051\005\052\017\056\012" +
    "\057\024\062\032\067\022\001\002\000\054\004\030\005" +
    "\036\006\013\007\014\012\016\023\020\025\011\026\025" +
    "\027\035\035\031\036\033\043\021\044\007\045\010\046" +
    "\027\051\005\052\017\056\012\057\024\062\032\067\022" +
    "\001\002\000\054\004\030\005\036\006\013\007\014\012" +
    "\016\023\020\025\011\026\025\027\035\035\031\036\033" +
    "\043\021\044\007\045\010\046\027\051\005\052\017\056" +
    "\012\057\024\062\032\067\022\001\002\000\054\004\030" +
    "\005\036\006\013\007\014\012\016\023\020\025\011\026" +
    "\025\027\035\035\031\036\033\043\021\044\007\045\010" +
    "\046\027\051\005\052\017\056\012\057\024\062\032\067" +
    "\022\001\002\000\054\004\030\005\036\006\013\007\014" +
    "\012\016\023\020\025\011\026\025\027\035\035\031\036" +
    "\033\043\021\044\007\045\010\046\027\051\005\052\017" +
    "\056\012\057\024\062\032\067\022\001\002\000\054\004" +
    "\030\005\036\006\013\007\014\012\016\023\020\025\011" +
    "\026\025\027\035\035\031\036\033\043\021\044\007\045" +
    "\010\046\027\051\005\052\017\056\012\057\024\062\032" +
    "\067\022\001\002\000\054\004\030\005\036\006\013\007" +
    "\014\012\016\023\020\025\011\026\025\027\035\035\031" +
    "\036\033\043\021\044\007\045\010\046\027\051\005\052" +
    "\017\056\012\057\024\062\032\067\022\001\002\000\054" +
    "\004\030\005\036\006\013\007\014\012\016\023\020\025" +
    "\011\026\025\027\035\035\031\036\033\043\021\044\007" +
    "\045\010\046\027\051\005\052\017\056\012\057\024\062" +
    "\032\067\022\001\002\000\054\004\030\005\036\006\013" +
    "\007\014\012\016\023\020\025\011\026\025\027\035\035" +
    "\031\036\033\043\021\044\007\045\010\046\027\051\005" +
    "\052\017\056\012\057\024\062\032\067\022\001\002\000" +
    "\054\004\030\005\036\006\013\007\014\012\016\023\020" +
    "\025\011\026\025\027\035\035\031\036\033\043\021\044" +
    "\007\045\010\046\027\051\005\052\017\056\012\057\024" +
    "\062\032\067\022\001\002\000\054\004\030\005\036\006" +
    "\013\007\014\012\016\023\020\025\011\026\025\027\035" +
    "\035\031\036\033\043\021\044\007\045\010\046\027\051" +
    "\005\052\017\056\012\057\024\062\032\067\022\001\002" +
    "\000\004\007\074\001\002\000\152\002\uffd0\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\064\uffd0\066\uffd0\067\uffd0\001\002\000\152\002" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3" +
    "\061\uffe3\062\uffe3\063\uffe3\064\uffe3\066\uffe3\067\uffe3\001" +
    "\002\000\152\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\010\041\011\051\012\uffe1\013\044\014\064\015\043\016" +
    "\060\017\053\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\066" +
    "\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\054\052\055\073\056\uffe1" +
    "\057\uffe1\060\063\061\057\062\uffe1\063\uffe1\064\uffe1\066" +
    "\uffe1\067\uffe1\001\002\000\152\002\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\041\011\051\012\ufff3\013\044\014" +
    "\064\015\043\016\060\017\053\020\061\021\056\022\067" +
    "\023\ufff3\024\062\025\ufff3\026\ufff3\027\ufff3\030\045\031" +
    "\042\032\072\033\046\034\065\035\ufff3\036\ufff3\037\055" +
    "\040\047\041\066\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046" +
    "\ufff3\047\050\050\070\051\ufff3\052\ufff3\053\ufff3\054\052" +
    "\055\073\056\ufff3\057\ufff3\060\063\061\057\062\ufff3\063" +
    "\ufff3\064\ufff3\066\ufff3\067\ufff3\001\002\000\152\002\uffd4" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\041\011\051\012" +
    "\uffd4\013\044\014\064\015\043\016\060\017\053\020\061" +
    "\021\056\022\067\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\045\031\042\032\072\033\046\034\065\035\uffd4" +
    "\036\uffd4\037\055\040\uffd4\041\066\042\uffd4\043\uffd4\044" +
    "\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\054\052\055\073\056\uffd4\057\uffd4\060\063\061" +
    "\057\062\uffd4\063\uffd4\064\uffd4\066\uffd4\067\uffd4\001\002" +
    "\000\152\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\041\011\051\012\ufff9\013\044\014\064\015\043\016\060" +
    "\017\053\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9" +
    "\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\066\042" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\054\052\055\073\056\ufff9\057" +
    "\ufff9\060\063\061\057\062\ufff9\063\ufff9\064\ufff9\066\ufff9" +
    "\067\ufff9\001\002\000\152\002\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4" +
    "\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055" +
    "\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4" +
    "\064\ufff4\066\ufff4\067\ufff4\001\002\000\152\002\uffdf\004" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\010\041\011\051\012\uffdf" +
    "\013\044\014\064\015\043\016\060\017\053\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\066\042\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053" +
    "\uffdf\054\052\055\073\056\uffdf\057\uffdf\060\063\061\057" +
    "\062\uffdf\063\uffdf\064\uffdf\066\uffdf\067\uffdf\001\002\000" +
    "\152\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\041" +
    "\011\051\012\ufffe\013\ufffe\014\ufffe\015\043\016\060\017" +
    "\053\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034" +
    "\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\066\042\ufffe" +
    "\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051" +
    "\ufffe\052\ufffe\053\ufffe\054\052\055\073\056\ufffe\057\ufffe" +
    "\060\063\061\057\062\ufffe\063\ufffe\064\ufffe\066\ufffe\067" +
    "\ufffe\001\002\000\152\002\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\041\011\051\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\066\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064" +
    "\uffe8\066\uffe8\067\uffe8\001\002\000\152\002\ufff5\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\010\041\011\051\012\ufff5\013" +
    "\044\014\064\015\043\016\060\017\053\020\061\021\056" +
    "\022\067\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030" +
    "\045\031\042\032\072\033\046\034\065\035\ufff5\036\ufff5" +
    "\037\055\040\ufff5\041\066\042\ufff5\043\ufff5\044\ufff5\045" +
    "\ufff5\046\ufff5\047\050\050\070\051\ufff5\052\ufff5\053\ufff5" +
    "\054\052\055\073\056\ufff5\057\ufff5\060\063\061\057\062" +
    "\ufff5\063\ufff5\064\ufff5\066\ufff5\067\ufff5\001\002\000\152" +
    "\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\041\011" +
    "\051\012\ufff8\013\044\014\064\015\043\016\060\017\053" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\066\042\ufff8\043" +
    "\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8" +
    "\052\ufff8\053\ufff8\054\052\055\073\056\ufff8\057\ufff8\060" +
    "\063\061\057\062\ufff8\063\ufff8\064\ufff8\066\ufff8\067\ufff8" +
    "\001\002\000\152\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\010\041\011\051\012\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc" +
    "\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041" +
    "\066\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc" +
    "\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\052\055\073\056" +
    "\ufffc\057\ufffc\060\063\061\057\062\ufffc\063\ufffc\064\ufffc" +
    "\066\ufffc\067\ufffc\001\002\000\152\002\uffda\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\010\041\011\051\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\066\042\uffda\043\uffda\044\uffda\045\uffda" +
    "\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda" +
    "\063\uffda\064\uffda\066\uffda\067\uffda\001\002\000\152\002" +
    "\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\041\011\051" +
    "\012\ufffa\013\044\014\064\015\043\016\060\017\053\020" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa" +
    "\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\066\042\ufffa\043\ufffa" +
    "\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052" +
    "\ufffa\053\ufffa\054\052\055\073\056\ufffa\057\ufffa\060\063" +
    "\061\057\062\ufffa\063\ufffa\064\ufffa\066\ufffa\067\ufffa\001" +
    "\002\000\152\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\010\041\011\051\012\uffdc\013\044\014\064\015\043\016" +
    "\060\017\053\020\061\021\056\022\067\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\045\031\042\032\072\033" +
    "\046\034\065\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\066" +
    "\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\052\uffdc\053\uffdc\054\052\055\073\056\uffdc" +
    "\057\uffdc\060\063\061\057\062\uffdc\063\uffdc\064\uffdc\066" +
    "\uffdc\067\uffdc\001\002\000\152\002\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\041\011\051\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031" +
    "\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\040\ufffb\041\066\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\052" +
    "\055\073\056\ufffb\057\ufffb\060\063\061\057\062\ufffb\063" +
    "\ufffb\064\ufffb\066\ufffb\067\ufffb\001\002\000\152\002\uffe4" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061" +
    "\uffe4\062\uffe4\063\uffe4\064\uffe4\066\uffe4\067\uffe4\001\002" +
    "\000\152\002\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010" +
    "\041\011\051\012\uffc9\013\044\014\064\015\043\016\060" +
    "\017\053\020\061\021\056\022\067\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\030\045\031\042\032\072\033\046" +
    "\034\065\035\uffc9\036\uffc9\037\055\040\uffc9\041\066\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\054\052\055\073\056\uffc9\057" +
    "\uffc9\060\063\061\057\062\uffc9\063\uffc9\064\uffc9\066\uffc9" +
    "\067\uffc9\001\002\000\152\002\uffdb\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\010\041\011\051\012\uffdb\013\044\014\064" +
    "\015\043\016\060\017\053\020\061\021\056\022\067\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\045\031\042" +
    "\032\072\033\046\034\065\035\uffdb\036\uffdb\037\055\040" +
    "\uffdb\041\066\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\047\050\050\070\051\uffdb\052\uffdb\053\uffdb\054\052\055" +
    "\073\056\uffdb\057\uffdb\060\063\061\057\062\uffdb\063\uffdb" +
    "\064\uffdb\066\uffdb\067\uffdb\001\002\000\152\002\uffe0\004" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\010\041\011\051\012\uffe0" +
    "\013\044\014\064\015\043\016\060\017\053\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\041\066\042\uffe0\043\uffe0\044\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053" +
    "\uffe0\054\052\055\073\056\uffe0\057\uffe0\060\063\061\057" +
    "\062\uffe0\063\uffe0\064\uffe0\066\uffe0\067\uffe0\001\002\000" +
    "\152\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\041" +
    "\011\051\012\ufff7\013\044\014\064\015\043\016\060\017" +
    "\053\020\061\021\056\022\067\023\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\072\033\046\034" +
    "\065\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\066\042\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051" +
    "\ufff7\052\ufff7\053\ufff7\054\052\055\073\056\ufff7\057\ufff7" +
    "\060\063\061\057\062\ufff7\063\ufff7\064\ufff7\066\ufff7\067" +
    "\ufff7\001\002\000\152\002\uffff\004\uffff\005\uffff\006\uffff" +
    "\007\uffff\010\041\011\051\012\uffff\013\uffff\014\uffff\015" +
    "\043\016\060\017\053\020\uffff\021\uffff\022\uffff\023\uffff" +
    "\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032" +
    "\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff" +
    "\041\066\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047" +
    "\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\052\055\073" +
    "\056\uffff\057\uffff\060\063\061\057\062\uffff\063\uffff\064" +
    "\uffff\066\uffff\067\uffff\001\002\000\152\002\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\041\011\051\012\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030" +
    "\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd" +
    "\037\ufffd\040\ufffd\041\066\042\ufffd\043\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\054\052\055\073\056\ufffd\057\ufffd\060\063\061\057\062" +
    "\ufffd\063\ufffd\064\ufffd\066\ufffd\067\ufffd\001\002\000\152" +
    "\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\041\011" +
    "\051\012\ufff6\013\044\014\064\015\043\016\060\017\053" +
    "\020\061\021\056\022\067\023\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\072\033\046\034\065" +
    "\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\066\042\ufff6\043" +
    "\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\052\ufff6\053\ufff6\054\052\055\073\056\ufff6\057\ufff6\060" +
    "\063\061\057\062\ufff6\063\ufff6\064\ufff6\066\ufff6\067\ufff6" +
    "\001\002\000\152\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\010\041\011\051\012\uffe2\013\044\014\064\015\043" +
    "\016\060\017\053\020\061\021\056\022\067\023\uffe2\024" +
    "\062\025\uffe2\026\uffe2\027\uffe2\030\045\031\042\032\072" +
    "\033\046\034\065\035\uffe2\036\uffe2\037\055\040\047\041" +
    "\066\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\050" +
    "\050\070\051\uffe2\052\uffe2\053\uffe2\054\052\055\073\056" +
    "\uffe2\057\uffe2\060\063\061\057\062\uffe2\063\uffe2\064\uffe2" +
    "\066\uffe2\067\uffe2\001\002\000\152\002\uffeb\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\010\041\011\051\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\041\066\042\uffeb\043\uffeb\044\uffeb\045\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054" +
    "\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb" +
    "\063\uffeb\064\uffeb\066\uffeb\067\uffeb\001\002\000\072\010" +
    "\041\011\051\013\044\014\064\015\043\016\060\017\053" +
    "\020\061\021\056\022\067\024\062\030\045\031\042\032" +
    "\072\033\046\034\065\037\055\040\047\041\066\042\040" +
    "\047\050\050\070\053\071\054\052\055\073\060\063\061" +
    "\057\063\130\001\002\000\152\002\uffd5\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5" +
    "\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063" +
    "\uffd5\064\uffd5\066\uffd5\067\uffd5\001\002\000\152\002\uffec" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\010\041\011\051\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec" +
    "\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027" +
    "\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\041\066\042\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec" +
    "\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061" +
    "\uffec\062\uffec\063\uffec\064\uffec\066\uffec\067\uffec\001\002" +
    "\000\152\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\041\011\051\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed" +
    "\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\066\042" +
    "\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057" +
    "\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed\066\uffed" +
    "\067\uffed\001\002\000\152\002\uffe6\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\010\041\011\051\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\066\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6" +
    "\064\uffe6\066\uffe6\067\uffe6\001\002\000\072\010\041\011" +
    "\051\013\044\014\064\015\043\016\060\017\053\020\061" +
    "\021\056\022\067\024\062\030\045\031\042\032\072\033" +
    "\046\034\065\037\055\040\047\041\066\042\040\047\050" +
    "\050\070\053\071\054\052\055\073\060\063\061\057\064" +
    "\135\001\002\000\056\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\012\uffd2\023\uffd2\025\uffd2\026\uffd2\027\uffd2\035\uffd2\036" +
    "\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\051\uffd2\052\uffd2" +
    "\056\uffd2\057\uffd2\062\uffd2\065\uffd2\067\uffd2\001\002\000" +
    "\056\004\030\005\036\006\013\007\014\012\016\023\020" +
    "\025\011\026\025\027\035\035\031\036\033\043\021\044" +
    "\007\045\010\046\027\051\005\052\017\056\012\057\024" +
    "\062\032\065\140\067\022\001\002\000\072\010\041\011" +
    "\051\013\044\014\064\015\043\016\060\017\053\020\061" +
    "\021\056\022\067\024\062\030\045\031\042\032\072\033" +
    "\046\034\065\037\055\040\047\041\066\042\040\047\050" +
    "\050\070\053\071\054\052\055\073\060\063\061\057\066" +
    "\141\001\002\000\152\002\uffd3\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3" +
    "\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064" +
    "\uffd3\066\uffd3\067\uffd3\001\002\000\056\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\012\uffd1\023\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\035\uffd1\036\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1" +
    "\051\uffd1\052\uffd1\056\uffd1\057\uffd1\062\uffd1\065\uffd1\067" +
    "\uffd1\001\002\000\152\002\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\041\011\051\012\uffe5\013\044\014\064\015" +
    "\043\016\060\017\053\020\061\021\056\022\067\023\uffe5" +
    "\024\062\025\uffe5\026\uffe5\027\uffe5\030\045\031\042\032" +
    "\072\033\046\034\065\035\uffe5\036\uffe5\037\055\040\047" +
    "\041\066\042\040\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047" +
    "\050\050\070\051\uffe5\052\uffe5\053\071\054\052\055\073" +
    "\056\uffe5\057\uffe5\060\063\061\057\062\uffe5\063\uffe5\064" +
    "\uffe5\066\uffe5\067\uffe5\001\002\000\152\002\uffef\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\010\041\011\051\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\041\066\042\uffef\043\uffef\044\uffef\045" +
    "\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef" +
    "\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062" +
    "\uffef\063\uffef\064\uffef\066\uffef\067\uffef\001\002\000\142" +
    "\004\030\005\036\006\013\007\014\010\041\011\051\012" +
    "\016\013\044\014\064\015\043\016\060\017\053\020\061" +
    "\021\056\022\067\023\020\024\062\025\011\026\025\027" +
    "\035\030\045\031\042\032\072\033\046\034\065\035\031" +
    "\036\033\037\055\040\047\041\066\042\040\043\021\044" +
    "\007\045\010\046\027\047\050\050\070\051\005\052\017" +
    "\053\071\054\052\055\073\056\012\057\024\060\063\061" +
    "\057\062\032\067\022\001\002\000\152\002\ufff1\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\010\041\011\051\012\ufff1\013" +
    "\044\014\064\015\043\016\060\017\053\020\061\021\056" +
    "\022\067\023\ufff1\024\062\025\ufff1\026\ufff1\027\ufff1\030" +
    "\045\031\042\032\072\033\046\034\065\035\ufff1\036\ufff1" +
    "\037\055\040\047\041\066\042\ufff1\043\ufff1\044\ufff1\045" +
    "\ufff1\046\ufff1\047\050\050\070\051\ufff1\052\ufff1\053\ufff1" +
    "\054\052\055\073\056\ufff1\057\ufff1\060\063\061\057\062" +
    "\ufff1\063\ufff1\064\ufff1\066\ufff1\067\ufff1\001\002\000\004" +
    "\002\001\001\002\000\056\004\030\005\036\006\013\007" +
    "\014\012\016\023\020\025\011\026\025\027\035\035\031" +
    "\036\033\043\021\044\007\045\010\046\027\051\005\052" +
    "\017\056\012\057\024\062\032\063\151\067\022\001\002" +
    "\000\072\010\041\011\051\013\044\014\064\015\043\016" +
    "\060\017\053\020\061\021\056\022\067\024\062\030\045" +
    "\031\042\032\072\033\046\034\065\037\055\040\047\041" +
    "\066\042\040\047\050\050\070\053\071\054\052\055\073" +
    "\060\063\061\057\063\152\001\002\000\152\002\uffcb\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\064\uffcb\066\uffcb\067\uffcb\001\002\000" +
    "\152\002\uffca\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca" +
    "\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051" +
    "\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca" +
    "\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\066\uffca\067" +
    "\uffca\001\002\000\152\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\041\011\051\012\uffe7\013\044\014\064\015" +
    "\043\016\060\017\053\020\061\021\056\022\067\023\uffe7" +
    "\024\062\025\uffe7\026\uffe7\027\uffe7\030\045\031\042\032" +
    "\072\033\046\034\065\035\uffe7\036\uffe7\037\055\040\047" +
    "\041\066\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047" +
    "\050\050\070\051\uffe7\052\uffe7\053\uffe7\054\052\055\073" +
    "\056\uffe7\057\uffe7\060\063\061\057\062\uffe7\063\uffe7\064" +
    "\uffe7\066\uffe7\067\uffe7\001\002\000\152\002\ufff0\004\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\010\041\011\051\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\041\066\042\ufff0\043\ufff0\044\ufff0\045" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0" +
    "\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062" +
    "\ufff0\063\ufff0\064\ufff0\066\ufff0\067\ufff0\001\002\000\152" +
    "\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060" +
    "\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\066\uffe9\067\uffe9" +
    "\001\002\000\152\002\uffea\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea" +
    "\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041" +
    "\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea" +
    "\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056" +
    "\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea" +
    "\066\uffea\067\uffea\001\002\000\142\004\030\005\036\006" +
    "\013\007\014\010\041\011\051\012\016\013\044\014\064" +
    "\015\043\016\060\017\053\020\061\021\056\022\067\023" +
    "\020\024\062\025\011\026\025\027\035\030\045\031\042" +
    "\032\072\033\046\034\065\035\031\036\033\037\055\040" +
    "\047\041\066\042\040\043\021\044\007\045\010\046\027" +
    "\047\050\050\070\051\005\052\017\053\071\054\052\055" +
    "\073\056\012\057\024\060\063\061\057\062\032\067\022" +
    "\001\002\000\152\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\010\041\011\051\012\ufff2\013\044\014\064\015\043" +
    "\016\060\017\053\020\061\021\056\022\067\023\ufff2\024" +
    "\062\025\ufff2\026\ufff2\027\ufff2\030\045\031\042\032\072" +
    "\033\046\034\065\035\ufff2\036\ufff2\037\055\040\047\041" +
    "\066\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\050" +
    "\050\070\051\ufff2\052\ufff2\053\ufff2\054\052\055\073\056" +
    "\ufff2\057\ufff2\060\063\061\057\062\ufff2\063\ufff2\064\ufff2" +
    "\066\ufff2\067\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\016\002\014\003\005\005\022\006\025\007" +
    "\003\010\033\001\001\000\002\001\001\000\014\003\156" +
    "\005\022\006\025\007\003\010\033\001\001\000\004\013" +
    "\053\001\001\000\014\003\155\005\022\006\025\007\003" +
    "\010\033\001\001\000\014\003\154\005\022\006\025\007" +
    "\003\010\033\001\001\000\014\003\153\005\022\006\025" +
    "\007\003\010\033\001\001\000\014\003\152\005\022\006" +
    "\025\007\003\010\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\143\005\022\006\025\007\003\010\033\001\001\000\014" +
    "\003\142\005\022\006\025\007\003\010\033\001\001\000" +
    "\014\003\141\005\022\006\025\007\003\010\033\001\001" +
    "\000\014\003\133\005\022\006\025\007\003\010\033\001" +
    "\001\000\002\001\001\000\014\003\132\005\022\006\025" +
    "\007\003\010\033\001\001\000\014\003\131\005\022\006" +
    "\025\007\003\010\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\130\005\022\006" +
    "\025\007\003\010\033\001\001\000\014\003\126\005\022" +
    "\006\025\007\003\010\033\001\001\000\014\003\125\005" +
    "\022\006\025\007\003\010\033\001\001\000\002\001\001" +
    "\000\014\003\036\005\022\006\025\007\003\010\033\001" +
    "\001\000\002\001\001\000\004\013\053\001\001\000\014" +
    "\003\124\005\022\006\025\007\003\010\033\001\001\000" +
    "\002\001\001\000\014\003\123\005\022\006\025\007\003" +
    "\010\033\001\001\000\014\003\122\005\022\006\025\007" +
    "\003\010\033\001\001\000\014\003\121\005\022\006\025" +
    "\007\003\010\033\001\001\000\014\003\120\005\022\006" +
    "\025\007\003\010\033\001\001\000\014\003\117\005\022" +
    "\006\025\007\003\010\033\001\001\000\014\003\116\005" +
    "\022\006\025\007\003\010\033\001\001\000\014\003\115" +
    "\005\022\006\025\007\003\010\033\001\001\000\002\001" +
    "\001\000\004\005\114\001\001\000\014\003\113\005\022" +
    "\006\025\007\003\010\033\001\001\000\002\001\001\000" +
    "\014\003\112\005\022\006\025\007\003\010\033\001\001" +
    "\000\014\003\111\005\022\006\025\007\003\010\033\001" +
    "\001\000\014\003\110\005\022\006\025\007\003\010\033" +
    "\001\001\000\014\003\107\005\022\006\025\007\003\010" +
    "\033\001\001\000\014\003\106\005\022\006\025\007\003" +
    "\010\033\001\001\000\014\003\105\005\022\006\025\007" +
    "\003\010\033\001\001\000\014\003\104\005\022\006\025" +
    "\007\003\010\033\001\001\000\014\003\103\005\022\006" +
    "\025\007\003\010\033\001\001\000\014\003\102\005\022" +
    "\006\025\007\003\010\033\001\001\000\014\003\101\005" +
    "\022\006\025\007\003\010\033\001\001\000\014\003\100" +
    "\005\022\006\025\007\003\010\033\001\001\000\014\003" +
    "\077\005\022\006\025\007\003\010\033\001\001\000\014" +
    "\003\076\005\022\006\025\007\003\010\033\001\001\000" +
    "\014\003\075\005\022\006\025\007\003\010\033\001\001" +
    "\000\004\005\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\053\001\001\000\004\013\053\001\001" +
    "\000\004\013\053\001\001\000\004\013\053\001\001\000" +
    "\004\013\053\001\001\000\004\013\053\001\001\000\004" +
    "\013\053\001\001\000\004\013\053\001\001\000\004\013" +
    "\053\001\001\000\004\013\053\001\001\000\004\013\053" +
    "\001\001\000\004\013\053\001\001\000\004\013\053\001" +
    "\001\000\004\013\053\001\001\000\004\013\053\001\001" +
    "\000\002\001\001\000\004\013\053\001\001\000\004\013" +
    "\053\001\001\000\004\013\053\001\001\000\004\013\053" +
    "\001\001\000\004\013\053\001\001\000\004\013\053\001" +
    "\001\000\004\013\053\001\001\000\004\013\053\001\001" +
    "\000\004\013\053\001\001\000\004\013\053\001\001\000" +
    "\002\001\001\000\004\013\053\001\001\000\004\013\053" +
    "\001\001\000\004\013\053\001\001\000\004\013\053\001" +
    "\001\000\004\014\135\001\001\000\014\003\136\005\022" +
    "\006\025\007\003\010\033\001\001\000\004\013\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\053" +
    "\001\001\000\004\013\053\001\001\000\016\003\144\005" +
    "\022\006\025\007\003\010\033\013\053\001\001\000\004" +
    "\013\053\001\001\000\002\001\001\000\014\003\147\005" +
    "\022\006\025\007\003\010\033\001\001\000\004\013\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\053\001\001\000\004\013\053\001\001\000\004\013\053" +
    "\001\001\000\004\013\053\001\001\000\016\003\157\005" +
    "\022\006\025\007\003\010\033\013\053\001\001\000\004" +
    "\013\053\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 	    lexer = new Lexer(new StringReader(expr)); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
		return lexer.next_token(); 
    }

 
	public Lexer lexer;
	private String expr;
	public Expression RESULT;
	public List<JavaParamExpression> javaParams = new ArrayList<JavaParamExpression>();
		
	
	public ParserCup(String expr) {
		this.symbolFactory = new DefaultSymbolFactory();  
		this.expr = expr;
	}
	
	
	
	void setResult(Expression exp) {
		this.RESULT = exp;
	}
	
	void addJavaParamExpr(JavaParamExpression expr) {
		javaParams.add(expr);
	}
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // order_by_sort_type ::= GROUPBY_DESC 
            {
              OrderByExpressionWrapper.SortType RESULT =null;
		 
						RESULT = SortType.DESC; 
					
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("order_by_sort_type",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // order_by_sort_type ::= GROUPBY_ASC 
            {
              OrderByExpressionWrapper.SortType RESULT =null;
		 
						RESULT = SortType.ASC; 
					
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("order_by_sort_type",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // order_by_param ::= expr_without_coma 
            {
              OrderByExpressionWrapper RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
			RESULT = new OrderByExpressionWrapper(e1, SortType.ASC);
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("order_by_param",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // order_by_param ::= expr order_by_sort_type 
            {
              OrderByExpressionWrapper RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int sortTypeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sortTyperight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		OrderByExpressionWrapper.SortType sortType = (OrderByExpressionWrapper.SortType)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
			RESULT = new OrderByExpressionWrapper(e1, sortType);
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("order_by_param",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // order_by_param_list ::= LEFT_ROUND_BRACKET order_by_param_list RIGHT_ROUND_BRACKET 
            {
              List<OrderByExpressionWrapper> RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("order_by_param_list",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // order_by_param_list ::= order_by_param_list COMA order_by_param 
            {
              List<OrderByExpressionWrapper> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<OrderByExpressionWrapper> list = (List<OrderByExpressionWrapper>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		OrderByExpressionWrapper param = (OrderByExpressionWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
			list.add(param);
			RESULT = list;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("order_by_param_list",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // order_by_param_list ::= order_by_param 
            {
              List<OrderByExpressionWrapper> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		OrderByExpressionWrapper param = (OrderByExpressionWrapper)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
			List<OrderByExpressionWrapper> list = new ArrayList<OrderByExpressionWrapper>();
			list.add(param);
			RESULT = list;
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("order_by_param_list",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // order_by_expr ::= expr ORDER_BY expr 
            {
              OrderByExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
//			RESULT = new OrderByExpression(e1, list);
			RESULT = new OrderByExpression(e1, e2); 
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("order_by_expr",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // method_literal ::= IDENTIFIER LEFT_ROUND_BRACKET expr RIGHT_ROUND_BRACKET 
            {
              MethodExpressionSignature RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 
			//String mName = l.substring(0, l.length() -1).trim();
			String mName = l;
//			System.out.println("METHOD: "+mName);
			RESULT = new MethodExpressionSignature(mName, e1);  
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("method_literal",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // method_literal ::= IDENTIFIER LEFT_ROUND_BRACKET RIGHT_ROUND_BRACKET 
            {
              MethodExpressionSignature RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 
			String mName = l; 
			RESULT = new MethodExpressionSignature(mName); 
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("method_literal",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // literal_expression ::= STRING_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LiteralExpression<String>(l); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal_expression",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literal_expression ::= BOOLEAN_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LiteralExpression<Boolean>(l); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal_expression",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // literal_expression ::= DOUBLE_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LiteralExpression<Double>(l); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal_expression",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // literal_expression ::= INTEGER_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LiteralExpression<Integer>(l); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal_expression",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // identifier_literal ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Identifier(l); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("identifier_literal",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exprs ::= exprs expr SEMICOLON 
            {
              List<Expression> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<Expression> es = (List<Expression>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 es.add(e1); RESULT=es; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exprs",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exprs ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new ArrayList<Expression>(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exprs",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= FOREACH expr LEFT_CURLY_BRACKET exprs RIGHT_CURLY_BRACKET 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<Expression> es = (List<Expression>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new ForEachExpression(e1, es); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr CLOSE_BY expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new CloseByExpression(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= LEFT_ROUND_BRACKET expr RIGHT_ROUND_BRACKET 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = e1; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= JAVA_PARAM 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new JavaParamExpression(p.substring(1)); parser.addJavaParamExpr((JavaParamExpression)RESULT); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= method_literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		MethodExpressionSignature l = (MethodExpressionSignature)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new MethodExpression(l); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= identifier_literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Identifier l = (Identifier)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new IdentifierExpression(l); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= literal_expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		LiteralExpression< ? > l = (LiteralExpression< ? >)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = l; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr INTERSECT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1,e2,  OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr IN expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1,e2,  OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr COMA expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr order_by_sort_type 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int sortTypeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sortTyperight = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		OrderByExpressionWrapper.SortType sortType = (OrderByExpressionWrapper.SortType)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
			RESULT = new OrderByExpressionWrapper(e1, sortType);
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= order_by_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		OrderByExpression e = (OrderByExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr LESS_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr MORE_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr LESS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr WHERE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new WhereExpression(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr GROUP_AS identifier_literal 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Identifier l = (Identifier)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new GroupAsExpression(e1, l); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr AS identifier_literal 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Identifier l = (Identifier)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new AsExpression(e1, l); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= DEREF expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new DerefExpression(e1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= EXISTS expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnaryExpression(e1, OperatorFactory.getOperator((String)o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnaryExpression(e1, OperatorFactory.getOperator((String)o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr MINUS_FUNCTION expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1, e2, OperatorFactory.getOperator((String)o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= STRUCT expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnaryExpression(e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= BAG expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnaryExpression(e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= MAX expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnaryExpression(e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= MIN expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnaryExpression(e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= AVG expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnaryExpression(e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= COUNT expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnaryExpression(e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= UNIQUE expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnaryExpression(e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= SUM expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnaryExpression(e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= FORANY expr expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ForanyExpression(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= FORALL expr expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ForallExpression(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr JOIN expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new JoinExpression(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr DOT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new DotExpression(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr UNION expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr AND expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr OR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr MORE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr NOT_EQUALS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr EQUALS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr MODULO expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr DIVIDE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr MULTIPLY expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinaryAExpression(e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = e; parser.setResult(e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression start_val = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

