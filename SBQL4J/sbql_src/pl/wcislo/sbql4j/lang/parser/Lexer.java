/* The following code was generated by JFlex 1.4.3 on 20.02.15 19:50 */

package pl.wcislo.sbql4j.lang.parser; 
  
import java_cup.runtime.Symbol;
import pl.wcislo.sbql4j.lang.parser.SBQLSymbolFactory;

import static pl.wcislo.sbql4j.lang.parser.ParserSym.*;
 



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20.02.15 19:50 from the specification file
 * <tt>D:/Users/emilw_000/git/sbql4j/SBQL4J/sbql_src/pl/wcislo/sbql4j/lang/parser/lexer.lex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IDENTIFIER = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\25\1\24\1\0\1\25\1\23\22\0\1\75\1\34\1\21"+
    "\1\0\1\13\1\32\1\53\1\22\1\35\1\36\1\30\1\26\1\102"+
    "\1\27\1\20\1\31\12\1\1\116\1\115\1\101\1\33\1\43\1\117"+
    "\1\0\1\50\1\77\1\71\1\52\1\66\1\107\1\61\1\104\1\64"+
    "\1\110\1\12\1\112\1\56\1\51\1\44\1\74\1\65\1\45\1\54"+
    "\1\72\1\55\1\60\1\103\1\70\1\113\1\12\1\41\1\0\1\42"+
    "\1\0\1\12\1\0\1\7\1\100\1\73\1\16\1\5\1\6\1\63"+
    "\1\106\1\14\1\111\1\12\1\10\1\57\1\15\1\46\1\76\1\67"+
    "\1\3\1\11\1\2\1\4\1\62\1\105\1\17\1\114\1\12\1\37"+
    "\1\47\1\40\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\7\2\1\0\3\2\1\3\2\0\2\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\0\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\2\2\1\0"+
    "\3\2\1\0\14\2\1\22\1\23\5\2\1\24\1\25"+
    "\1\26\1\0\7\2\1\27\5\2\1\0\1\30\3\2"+
    "\1\31\1\32\1\0\1\33\1\34\1\35\3\36\1\2"+
    "\1\27\5\2\1\37\13\2\1\30\7\2\1\40\5\2"+
    "\1\41\6\2\1\42\1\43\1\37\1\44\1\45\1\2"+
    "\1\46\1\2\1\0\2\2\1\47\1\12\2\2\1\50"+
    "\10\2\1\51\2\52\11\2\1\53\5\2\1\54\7\2"+
    "\1\0\3\2\1\55\26\2\1\56\1\57\1\60\5\2"+
    "\1\0\2\2\1\61\5\2\1\62\5\2\1\63\2\2"+
    "\1\64\1\2\1\65\1\66\1\2\1\67\4\2\2\0"+
    "\1\2\2\0\2\2\2\0\1\2\1\70\3\2\2\0"+
    "\1\2\2\0\2\2\2\0\1\71\2\2\1\72\1\73"+
    "\2\2\1\74\1\75\2\2\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u02d0\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0460\0\u04b0"+
    "\0\u0500\0\u0550\0\120\0\120\0\120\0\120\0\120\0\120"+
    "\0\u05a0\0\u05f0\0\120\0\120\0\120\0\120\0\120\0\120"+
    "\0\u0640\0\u0690\0\u06e0\0\u0730\0\u0780\0\u07d0\0\u0820\0\u0870"+
    "\0\u08c0\0\u0910\0\u0960\0\u09b0\0\u0a00\0\u0a50\0\u0aa0\0\u0af0"+
    "\0\u0b40\0\u0b90\0\u0be0\0\u0c30\0\u0c80\0\120\0\u0cd0\0\u0d20"+
    "\0\u0d70\0\u0dc0\0\u0e10\0\120\0\120\0\120\0\u0e60\0\u0eb0"+
    "\0\u0f00\0\u0f50\0\u0fa0\0\u0ff0\0\u1040\0\u1090\0\u10e0\0\u1130"+
    "\0\u1180\0\u11d0\0\u1220\0\u1270\0\u12c0\0\u1310\0\u1360\0\u13b0"+
    "\0\u1400\0\120\0\120\0\u1450\0\120\0\120\0\120\0\u14a0"+
    "\0\u14f0\0\120\0\u1540\0\u1590\0\u15e0\0\u1630\0\u1680\0\u16d0"+
    "\0\u1720\0\120\0\u1770\0\u17c0\0\u1810\0\u1860\0\u18b0\0\u1900"+
    "\0\u1950\0\u19a0\0\u19f0\0\u1a40\0\u1a90\0\u1ae0\0\u1b30\0\u1b80"+
    "\0\u1bd0\0\u1c20\0\u1c70\0\u1cc0\0\u1d10\0\120\0\u1d60\0\u1db0"+
    "\0\u1e00\0\u1e50\0\u1ea0\0\u0e60\0\u1ef0\0\u1f40\0\u1f90\0\u1fe0"+
    "\0\u2030\0\u2080\0\u0140\0\u0140\0\u0140\0\u0140\0\u0140\0\u20d0"+
    "\0\u0140\0\u2120\0\u2170\0\u21c0\0\u2210\0\u0140\0\u0140\0\u2260"+
    "\0\u22b0\0\120\0\u2300\0\u2350\0\u23a0\0\u23f0\0\u2440\0\u2490"+
    "\0\u24e0\0\u2530\0\u0140\0\u2580\0\u25d0\0\u2620\0\u2670\0\u26c0"+
    "\0\u2710\0\u2760\0\u27b0\0\u2800\0\u2850\0\u28a0\0\u0140\0\u28f0"+
    "\0\u2940\0\u2990\0\u29e0\0\u2a30\0\u0140\0\u2a80\0\u2ad0\0\u2b20"+
    "\0\u2b70\0\u2bc0\0\u2c10\0\u2c60\0\u2cb0\0\u2d00\0\u2d50\0\u2da0"+
    "\0\u0140\0\u2df0\0\u2e40\0\u2e90\0\u2ee0\0\u2f30\0\u2f80\0\u2fd0"+
    "\0\u3020\0\u3070\0\u30c0\0\u3110\0\u3160\0\u31b0\0\u3200\0\u3250"+
    "\0\u32a0\0\u32f0\0\u3340\0\u3390\0\u33e0\0\u3430\0\u3480\0\u0140"+
    "\0\u0140\0\u0140\0\u34d0\0\u3520\0\u3570\0\u35c0\0\u3610\0\u3660"+
    "\0\u36b0\0\u3700\0\u0140\0\u3750\0\u37a0\0\u37f0\0\u3840\0\u3890"+
    "\0\u0140\0\u38e0\0\u3930\0\u3980\0\u39d0\0\u3a20\0\u0140\0\u3a70"+
    "\0\u3ac0\0\u0140\0\u3b10\0\u0140\0\u0140\0\u3b60\0\u0140\0\u3bb0"+
    "\0\120\0\u3c00\0\u3c50\0\u3ca0\0\u3cf0\0\u3d40\0\u3d90\0\u3de0"+
    "\0\u3e30\0\u3e80\0\u3ed0\0\u3f20\0\u3f70\0\u0140\0\u3fc0\0\u4010"+
    "\0\u4060\0\u40b0\0\u4100\0\u4150\0\u41a0\0\u41f0\0\u4240\0\u4290"+
    "\0\u42e0\0\u4330\0\u0140\0\u4380\0\u43d0\0\120\0\120\0\u4420"+
    "\0\u4470\0\120\0\u0140\0\u44c0\0\u4510\0\u0140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\5\1\12\1\5\1\13\1\14\1\15\1\16\1\5"+
    "\1\17\1\20\1\21\1\22\2\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\5\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\5"+
    "\1\55\1\5\1\56\1\57\1\5\1\60\2\5\1\61"+
    "\1\5\1\62\1\5\1\23\1\5\1\63\1\64\1\65"+
    "\1\66\1\67\1\5\1\70\1\5\1\71\1\72\1\73"+
    "\3\5\1\74\1\75\1\76\121\0\1\3\16\0\1\77"+
    "\100\0\2\5\1\100\7\5\1\0\4\5\24\0\3\5"+
    "\1\0\3\5\1\0\21\5\1\0\3\5\2\0\12\5"+
    "\4\0\12\5\1\0\4\5\24\0\3\5\1\0\3\5"+
    "\1\0\21\5\1\0\3\5\2\0\12\5\4\0\10\5"+
    "\1\101\1\5\1\0\1\5\1\102\2\5\24\0\3\5"+
    "\1\0\3\5\1\0\21\5\1\0\3\5\2\0\12\5"+
    "\4\0\12\5\1\0\3\5\1\103\24\0\3\5\1\0"+
    "\3\5\1\0\21\5\1\0\3\5\2\0\12\5\4\0"+
    "\6\5\1\104\3\5\1\0\4\5\24\0\2\5\1\105"+
    "\1\0\3\5\1\0\21\5\1\0\3\5\2\0\12\5"+
    "\4\0\7\5\1\106\1\107\1\5\1\0\1\5\1\110"+
    "\2\5\24\0\3\5\1\0\3\5\1\0\6\5\1\111"+
    "\12\5\1\0\3\5\2\0\12\5\4\0\1\5\1\112"+
    "\1\5\1\113\1\114\5\5\1\0\4\5\24\0\3\5"+
    "\1\0\3\5\1\0\21\5\1\0\3\5\2\0\12\5"+
    "\17\0\1\115\104\0\12\5\1\0\1\5\1\116\2\5"+
    "\24\0\3\5\1\0\3\5\1\0\21\5\1\0\3\5"+
    "\2\0\12\5\4\0\4\5\1\117\5\5\1\0\4\5"+
    "\24\0\2\5\1\120\1\0\3\5\1\0\21\5\1\0"+
    "\3\5\2\0\12\5\4\0\4\5\1\121\5\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\21\5\1\0"+
    "\3\5\2\0\12\5\23\0\1\122\77\0\21\20\1\123"+
    "\76\20\21\124\1\0\76\124\24\0\1\23\126\0\1\125"+
    "\117\0\1\126\117\0\1\127\65\0\12\5\1\0\4\5"+
    "\24\0\1\5\1\130\1\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\2\5\1\131\7\5"+
    "\1\0\4\5\24\0\3\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\52\0\1\132\51\0\12\5"+
    "\1\0\4\5\24\0\3\5\1\0\1\5\1\133\1\5"+
    "\1\0\1\134\3\5\1\135\14\5\1\0\3\5\2\0"+
    "\7\5\1\136\2\5\4\0\12\5\1\0\4\5\24\0"+
    "\1\137\2\5\1\0\3\5\1\0\12\5\1\140\6\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\12\5\1\141\6\5"+
    "\1\0\3\5\2\0\12\5\56\0\1\142\45\0\12\5"+
    "\1\0\4\5\24\0\3\5\1\0\3\5\1\0\1\5"+
    "\1\143\10\5\1\144\3\5\1\145\2\5\1\0\3\5"+
    "\2\0\12\5\4\0\12\5\1\0\4\5\24\0\3\5"+
    "\1\0\1\5\1\146\1\5\1\0\1\147\20\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\1\150\2\5\1\0\10\5\1\151\10\5"+
    "\1\0\3\5\2\0\12\5\4\0\6\5\1\152\3\5"+
    "\1\0\1\153\3\5\24\0\3\5\1\0\3\5\1\0"+
    "\21\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\1\5\1\154\1\5\1\0\3\5\1\0"+
    "\21\5\1\0\3\5\2\0\12\5\4\0\2\5\1\155"+
    "\7\5\1\0\4\5\24\0\3\5\1\0\3\5\1\0"+
    "\21\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\1\5\1\156\1\5\1\0"+
    "\21\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\14\5\1\157"+
    "\4\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\1\160\2\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\7\5\1\161\2\5\4\0\7\5"+
    "\1\162\2\5\1\0\4\5\24\0\2\5\1\163\1\0"+
    "\3\5\1\0\21\5\1\0\3\5\2\0\12\5\4\0"+
    "\12\5\1\0\4\5\24\0\3\5\1\0\1\164\2\5"+
    "\1\0\21\5\1\0\3\5\2\0\12\5\4\0\6\5"+
    "\1\165\3\5\1\0\4\5\24\0\3\5\1\0\3\5"+
    "\1\0\21\5\1\0\3\5\2\0\12\5\36\0\1\166"+
    "\65\0\12\5\1\0\4\5\24\0\3\5\1\0\3\5"+
    "\1\0\21\5\1\0\3\5\2\0\1\5\1\167\10\5"+
    "\4\0\12\5\1\0\4\5\24\0\3\5\1\0\3\5"+
    "\1\0\21\5\1\0\3\5\2\0\3\5\1\170\6\5"+
    "\4\0\12\5\1\0\4\5\24\0\1\171\2\5\1\0"+
    "\3\5\1\0\21\5\1\0\3\5\2\0\12\5\4\0"+
    "\12\5\1\0\4\5\24\0\1\172\2\5\1\0\3\5"+
    "\1\0\21\5\1\0\3\5\2\0\12\5\4\0\12\5"+
    "\1\0\4\5\24\0\2\5\1\173\1\0\3\5\1\0"+
    "\21\5\1\0\3\5\2\0\12\5\4\0\1\174\117\0"+
    "\3\5\1\175\6\5\1\0\4\5\24\0\3\5\1\0"+
    "\3\5\1\0\21\5\1\0\3\5\2\0\12\5\4\0"+
    "\12\5\1\0\1\176\3\5\24\0\3\5\1\0\3\5"+
    "\1\0\21\5\1\0\3\5\2\0\12\5\4\0\12\5"+
    "\1\0\1\177\3\5\24\0\3\5\1\0\3\5\1\0"+
    "\21\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\1\200\3\5\24\0\3\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\7\5\1\201\2\5"+
    "\1\0\4\5\24\0\3\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\2\5\1\202\7\5"+
    "\1\0\4\5\24\0\3\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\7\5\1\203\2\5"+
    "\1\0\4\5\24\0\3\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\17\5\1\204\1\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\2\5"+
    "\1\205\1\5\24\0\3\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\11\5\1\206\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\7\5\1\207"+
    "\11\5\1\0\3\5\2\0\12\5\4\0\2\5\1\210"+
    "\7\5\1\0\4\5\24\0\3\5\1\0\3\5\1\0"+
    "\21\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\3\5\1\211"+
    "\15\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\13\5\1\212"+
    "\5\5\1\0\3\5\2\0\12\5\20\0\1\213\103\0"+
    "\1\5\1\214\6\5\1\215\1\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\21\5\1\0\3\5\2\0"+
    "\12\5\4\0\12\5\1\0\4\5\24\0\3\5\1\0"+
    "\3\5\1\0\21\5\1\0\3\5\2\0\2\5\1\216"+
    "\7\5\4\0\1\5\1\217\10\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\21\5\1\0\3\5\2\0"+
    "\12\5\4\0\2\5\1\220\5\5\1\221\1\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\21\5\1\0"+
    "\3\5\2\0\12\5\25\0\1\222\76\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\2\5\1\223\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\2\5"+
    "\1\224\1\5\24\0\3\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\4\5"+
    "\24\0\3\5\1\0\2\5\1\205\1\0\21\5\1\0"+
    "\3\5\2\0\10\5\1\206\1\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\15\5\1\204"+
    "\3\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\5\5\1\207"+
    "\13\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\21\5\1\0"+
    "\3\5\2\0\7\5\1\203\2\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\16\5\1\217"+
    "\2\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\21\5\1\0"+
    "\3\5\2\0\1\216\11\5\4\0\12\5\1\0\4\5"+
    "\24\0\1\5\1\225\1\5\1\0\3\5\1\0\1\226"+
    "\20\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\2\5\1\211"+
    "\16\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\11\5\1\227"+
    "\7\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\1\5\1\230\1\5\1\0\3\5\1\0"+
    "\21\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\10\5\1\231"+
    "\10\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\10\5\1\232"+
    "\10\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\14\5\1\233"+
    "\4\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\1\5\1\234\1\5\1\0"+
    "\21\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\3\5\1\233\24\0\3\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\1\5"+
    "\1\235\2\5\24\0\3\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\4\5"+
    "\24\0\1\236\2\5\1\0\3\5\1\0\21\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\2\5\1\237\1\0\3\5\1\0\21\5\1\0\3\5"+
    "\2\0\12\5\4\0\12\5\1\0\4\5\24\0\3\5"+
    "\1\0\3\5\1\0\1\240\15\5\1\241\2\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\10\5\1\242\10\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\1\5\1\243\17\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\1\244\2\5\1\0\3\5\1\0\21\5\1\0\3\5"+
    "\2\0\12\5\4\0\12\5\1\0\4\5\24\0\2\5"+
    "\1\245\1\0\3\5\1\0\21\5\1\0\3\5\2\0"+
    "\12\5\4\0\3\5\1\246\6\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\21\5\1\0\3\5\2\0"+
    "\12\5\4\0\12\5\1\0\4\5\24\0\3\5\1\0"+
    "\3\5\1\0\5\5\1\247\13\5\1\0\3\5\2\0"+
    "\12\5\4\0\12\5\1\0\4\5\24\0\3\5\1\0"+
    "\3\5\1\0\7\5\1\247\11\5\1\0\3\5\2\0"+
    "\12\5\4\0\12\5\1\0\4\5\24\0\3\5\1\0"+
    "\3\5\1\0\12\5\1\250\6\5\1\0\3\5\2\0"+
    "\12\5\4\0\4\5\1\251\5\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\21\5\1\0\3\5\2\0"+
    "\12\5\4\0\12\5\1\0\4\5\24\0\1\5\1\252"+
    "\1\5\1\0\3\5\1\0\21\5\1\0\3\5\2\0"+
    "\12\5\4\0\12\5\1\0\4\5\24\0\3\5\1\0"+
    "\3\5\1\0\10\5\1\253\10\5\1\0\3\5\2\0"+
    "\12\5\4\0\12\5\1\0\1\254\3\5\24\0\3\5"+
    "\1\0\3\5\1\0\21\5\1\0\3\5\2\0\12\5"+
    "\4\0\4\5\1\255\5\5\1\0\4\5\24\0\3\5"+
    "\1\0\3\5\1\0\21\5\1\0\3\5\2\0\12\5"+
    "\4\0\12\5\1\0\1\5\1\256\2\5\24\0\3\5"+
    "\1\0\3\5\1\0\21\5\1\0\3\5\2\0\12\5"+
    "\4\0\12\5\1\0\4\5\24\0\2\5\1\257\1\0"+
    "\3\5\1\0\13\5\1\260\5\5\1\0\3\5\2\0"+
    "\12\5\4\0\10\5\1\261\1\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\21\5\1\0\3\5\2\0"+
    "\12\5\4\0\10\5\1\175\1\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\21\5\1\0\3\5\2\0"+
    "\12\5\4\0\4\5\1\262\5\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\21\5\1\0\3\5\2\0"+
    "\12\5\4\0\3\5\1\263\6\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\21\5\1\0\3\5\2\0"+
    "\12\5\4\0\3\5\1\264\6\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\21\5\1\0\3\5\2\0"+
    "\12\5\21\0\1\265\102\0\4\5\1\266\5\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\21\5\1\0"+
    "\3\5\2\0\12\5\4\0\1\5\1\267\10\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\21\5\1\0"+
    "\3\5\2\0\12\5\4\0\4\5\1\270\5\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\21\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\17\5\1\271\1\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\12\5\1\272\6\5\1\0"+
    "\3\5\2\0\12\5\4\0\4\5\1\273\5\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\21\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\12\5\1\274\6\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\15\5\1\271\3\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\1\5\1\275\17\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\1\5\1\276\17\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\1\277\2\5\1\0\3\5\1\0\11\5\1\300\7\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\4\5"+
    "\24\0\3\5\1\0\1\5\1\301\1\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\1\5\1\302\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\3\5\1\303\6\5"+
    "\1\0\4\5\24\0\3\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\1\5\1\304\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\3\5\1\305\6\5"+
    "\1\0\4\5\24\0\3\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\16\5\1\306\2\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\12\5\1\307\6\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\1\310\20\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\1\5\1\311\1\5\1\0\21\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\1\312\20\5\1\0\3\5"+
    "\2\0\12\5\4\0\10\5\1\313\1\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\21\5\1\0\3\5"+
    "\2\0\12\5\4\0\12\5\1\0\1\5\1\314\2\5"+
    "\24\0\3\5\1\0\3\5\1\0\21\5\1\0\3\5"+
    "\2\0\12\5\4\0\12\5\1\0\4\5\24\0\1\5"+
    "\1\315\1\5\1\0\3\5\1\0\21\5\1\0\3\5"+
    "\2\0\12\5\4\0\2\5\1\316\7\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\21\5\1\0\3\5"+
    "\2\0\12\5\4\0\12\5\1\0\4\5\24\0\3\5"+
    "\1\0\3\5\1\0\12\5\1\317\6\5\1\0\3\5"+
    "\2\0\12\5\4\0\12\5\1\0\4\5\24\0\3\5"+
    "\1\0\1\5\1\320\1\5\1\0\21\5\1\0\3\5"+
    "\2\0\12\5\4\0\12\5\1\0\1\5\1\320\2\5"+
    "\24\0\3\5\1\0\3\5\1\0\21\5\1\0\3\5"+
    "\2\0\12\5\4\0\12\5\1\0\4\5\24\0\3\5"+
    "\1\0\3\5\1\0\7\5\1\321\11\5\1\0\3\5"+
    "\2\0\12\5\4\0\12\5\1\0\1\5\1\322\2\5"+
    "\24\0\3\5\1\0\3\5\1\0\21\5\1\0\3\5"+
    "\2\0\12\5\4\0\3\5\1\323\6\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\21\5\1\0\3\5"+
    "\2\0\12\5\4\0\1\5\1\324\10\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\21\5\1\0\3\5"+
    "\2\0\12\5\4\0\6\5\1\325\3\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\21\5\1\0\3\5"+
    "\2\0\12\5\4\0\12\5\1\0\4\5\24\0\3\5"+
    "\1\0\3\5\1\0\17\5\1\326\1\5\1\0\3\5"+
    "\2\0\12\5\4\0\4\5\1\327\5\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\21\5\1\0\3\5"+
    "\2\0\12\5\10\0\1\330\113\0\2\5\1\331\7\5"+
    "\1\0\4\5\24\0\3\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\6\5\1\332\3\5"+
    "\1\0\4\5\24\0\3\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\5\5\1\333\4\5"+
    "\1\0\4\5\24\0\3\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\4\5"+
    "\24\0\1\5\1\334\1\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\2\5\1\335\7\5"+
    "\1\0\4\5\24\0\3\5\1\0\3\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\21\5\1\0\3\5"+
    "\2\0\4\5\1\333\5\5\4\0\12\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\12\5\1\336\6\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\15\5\1\337\3\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\4\5"+
    "\24\0\3\5\1\0\1\5\1\322\1\5\1\0\21\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\1\5\1\340\17\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\5\5\1\321\13\5"+
    "\1\0\3\5\2\0\12\5\4\0\12\5\1\0\4\5"+
    "\24\0\3\5\1\0\3\5\1\0\1\341\20\5\1\0"+
    "\3\5\2\0\12\5\4\0\10\5\1\341\1\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\21\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\20\5\1\342\1\0\3\5"+
    "\2\0\12\5\4\0\12\5\1\0\4\5\24\0\3\5"+
    "\1\0\3\5\1\0\21\5\1\0\1\343\2\5\2\0"+
    "\12\5\4\0\12\5\1\0\4\5\24\0\3\5\1\0"+
    "\1\344\2\5\1\0\21\5\1\0\3\5\2\0\12\5"+
    "\4\0\12\5\1\0\4\5\24\0\1\5\1\345\1\5"+
    "\1\0\3\5\1\0\21\5\1\0\3\5\2\0\12\5"+
    "\4\0\12\5\1\0\4\5\24\0\3\5\1\0\3\5"+
    "\1\0\16\5\1\346\2\5\1\0\3\5\2\0\12\5"+
    "\4\0\12\5\1\0\4\5\24\0\3\5\1\0\3\5"+
    "\1\0\16\5\1\347\2\5\1\0\3\5\2\0\12\5"+
    "\4\0\12\5\1\0\4\5\24\0\3\5\1\0\3\5"+
    "\1\0\12\5\1\350\6\5\1\0\3\5\2\0\12\5"+
    "\4\0\4\5\1\351\5\5\1\0\4\5\24\0\3\5"+
    "\1\0\3\5\1\0\21\5\1\0\3\5\2\0\12\5"+
    "\4\0\1\5\1\347\10\5\1\0\4\5\24\0\3\5"+
    "\1\0\3\5\1\0\21\5\1\0\3\5\2\0\12\5"+
    "\4\0\12\5\1\0\4\5\24\0\3\5\1\0\3\5"+
    "\1\0\12\5\1\352\6\5\1\0\3\5\2\0\12\5"+
    "\4\0\4\5\1\352\5\5\1\0\4\5\24\0\3\5"+
    "\1\0\3\5\1\0\21\5\1\0\3\5\2\0\12\5"+
    "\4\0\12\5\1\0\4\5\24\0\3\5\1\0\1\353"+
    "\2\5\1\0\21\5\1\0\3\5\2\0\12\5\4\0"+
    "\4\5\1\354\5\5\1\0\4\5\24\0\3\5\1\0"+
    "\3\5\1\0\21\5\1\0\3\5\2\0\12\5\4\0"+
    "\10\5\1\355\1\5\1\0\4\5\24\0\3\5\1\0"+
    "\3\5\1\0\21\5\1\0\3\5\2\0\12\5\4\0"+
    "\12\5\1\0\4\5\24\0\3\5\1\0\3\5\1\0"+
    "\17\5\1\356\1\5\1\0\3\5\2\0\12\5\4\0"+
    "\1\5\1\357\10\5\1\0\4\5\24\0\3\5\1\0"+
    "\3\5\1\0\21\5\1\0\3\5\2\0\12\5\4\0"+
    "\12\5\1\0\1\5\1\360\2\5\24\0\3\5\1\0"+
    "\3\5\1\0\21\5\1\0\3\5\2\0\12\5\22\0"+
    "\1\361\101\0\10\5\1\362\1\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\21\5\1\0\3\5\2\0"+
    "\12\5\4\0\12\5\1\0\1\5\1\363\2\5\24\0"+
    "\3\5\1\0\3\5\1\0\21\5\1\0\3\5\2\0"+
    "\12\5\4\0\12\5\1\0\4\5\24\0\3\5\1\0"+
    "\3\5\1\0\21\5\1\364\3\5\2\0\12\5\4\0"+
    "\12\5\1\0\4\5\24\0\3\5\1\0\3\5\1\0"+
    "\21\5\1\365\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\1\5\1\366\1\5\1\0"+
    "\21\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\16\5\1\357"+
    "\2\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\12\5\1\354"+
    "\6\5\1\0\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\21\5\1\367"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\21\5\1\370\3\5\2\0"+
    "\12\5\4\0\12\5\1\0\4\5\24\0\3\5\1\0"+
    "\1\5\1\371\1\5\1\0\21\5\1\0\3\5\2\0"+
    "\12\5\4\0\12\5\1\0\4\5\24\0\3\5\1\0"+
    "\3\5\1\0\1\372\20\5\1\0\3\5\2\0\12\5"+
    "\4\0\12\5\1\0\4\5\24\0\3\5\1\0\3\5"+
    "\1\0\1\355\20\5\1\0\3\5\2\0\12\5\4\0"+
    "\12\5\1\0\4\5\24\0\3\5\1\0\3\5\1\0"+
    "\21\5\1\373\3\5\2\0\12\5\4\0\12\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\21\5\1\374"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\15\5\1\375\3\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\21\5\1\0\3\5\2\0"+
    "\3\5\1\376\6\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\17\5\1\377\1\5\1\0"+
    "\3\5\2\0\12\5\4\0\4\5\1\u0100\5\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\21\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\17\5\1\u0101\1\5\1\0"+
    "\3\5\2\0\12\5\102\0\1\u0102\120\0\1\u0103\20\0"+
    "\12\5\1\0\4\5\24\0\3\5\1\0\3\5\1\0"+
    "\15\5\1\u0104\3\5\1\0\3\5\2\0\12\5\53\0"+
    "\1\u0105\56\0\1\u0106\111\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\15\5\1\u0107\3\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\12\5\1\u0108\6\5\1\0"+
    "\3\5\2\0\12\5\102\0\1\u0109\120\0\1\u010a\20\0"+
    "\12\5\1\0\4\5\24\0\3\5\1\0\3\5\1\0"+
    "\21\5\1\0\3\5\2\0\1\5\1\376\10\5\4\0"+
    "\4\5\1\u010b\5\5\1\0\4\5\24\0\3\5\1\0"+
    "\3\5\1\0\21\5\1\0\3\5\2\0\12\5\4\0"+
    "\12\5\1\0\4\5\24\0\3\5\1\0\3\5\1\0"+
    "\17\5\1\u010c\1\5\1\0\3\5\2\0\12\5\4\0"+
    "\4\5\1\u010d\5\5\1\0\4\5\24\0\3\5\1\0"+
    "\3\5\1\0\21\5\1\0\3\5\2\0\12\5\116\0"+
    "\1\u010e\120\0\1\u010e\4\0\12\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\12\5\1\u010b\6\5\1\0"+
    "\3\5\2\0\12\5\57\0\1\u010f\54\0\1\u010f\107\0"+
    "\12\5\1\0\4\5\24\0\3\5\1\0\3\5\1\0"+
    "\12\5\1\u0110\6\5\1\0\3\5\2\0\12\5\4\0"+
    "\12\5\1\0\4\5\24\0\3\5\1\0\3\5\1\0"+
    "\15\5\1\u0111\3\5\1\0\3\5\2\0\12\5\116\0"+
    "\1\u0112\120\0\1\u0112\4\0\1\5\1\u0113\10\5\1\0"+
    "\4\5\24\0\3\5\1\0\3\5\1\0\21\5\1\0"+
    "\3\5\2\0\12\5\4\0\12\5\1\0\4\5\24\0"+
    "\2\5\1\u0114\1\0\3\5\1\0\21\5\1\0\3\5"+
    "\2\0\12\5\4\0\12\5\1\0\4\5\24\0\1\u0115"+
    "\2\5\1\0\3\5\1\0\21\5\1\0\3\5\2\0"+
    "\12\5\4\0\12\5\1\0\4\5\24\0\3\5\1\0"+
    "\3\5\1\0\16\5\1\u0113\2\5\1\0\3\5\2\0"+
    "\12\5\4\0\5\5\1\u0116\4\5\1\0\4\5\24\0"+
    "\3\5\1\0\3\5\1\0\21\5\1\0\3\5\2\0"+
    "\12\5\4\0\12\5\1\0\4\5\24\0\3\5\1\0"+
    "\3\5\1\0\21\5\1\0\3\5\2\0\4\5\1\u0116"+
    "\5\5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17760];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\10\1\1\0\4\1\2\0\1\1\6\11"+
    "\1\0\1\1\6\11\3\1\1\0\3\1\1\0\15\1"+
    "\1\11\5\1\3\11\1\0\15\1\1\0\4\1\2\11"+
    "\1\0\3\11\2\1\1\11\7\1\1\11\23\1\1\11"+
    "\24\1\1\0\6\1\1\11\42\1\1\0\42\1\1\0"+
    "\30\1\1\11\2\1\2\0\1\1\2\0\2\1\2\0"+
    "\5\1\2\0\1\1\2\0\2\1\2\0\3\1\2\11"+
    "\2\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private StringBuffer str;
//	private String identifier;
	private SBQLSymbolFactory sf = new SBQLSymbolFactory();
	
	private Token createToken(int id) {
		return createToken(id, yytext());
	}
	
	private Token createToken(int id, Object o) {
		return new Token(id, yyline, yycolumn, new SyntaxTreeNode(o, yychar));
	}
	
	public int getPos() {
		return zzMarkedPos;	
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51: 
          { return createToken(COUNT				);
          }
        case 63: break;
        case 29: 
          { return createToken(MORE_OR_EQUAL		);
          }
        case 64: break;
        case 26: 
          { return createToken(STRING_LITERAL, yytext().substring(1,yytext().length()-1)) ;
          }
        case 65: break;
        case 2: 
          { Token t = createToken(ParserSym.IDENTIFIER);
		return t;
          }
        case 66: break;
        case 39: 
          { return createToken(NEW				);
          }
        case 67: break;
        case 7: 
          { return createToken(MULTIPLY			);
          }
        case 68: break;
        case 62: 
          { return createToken(INSTANCEOF		);
          }
        case 69: break;
        case 25: 
          { return createToken(RANGE				);
          }
        case 70: break;
        case 31: 
          { return createToken(AND				);
          }
        case 71: break;
        case 17: 
          { return createToken(MORE				);
          }
        case 72: break;
        case 28: 
          { return createToken(NOT_EQUALS			);
          }
        case 73: break;
        case 22: 
          { return createToken(QUESTION_MARK		);
          }
        case 74: break;
        case 61: 
          { return createToken(INTERSECT			);
          }
        case 75: break;
        case 15: 
          { return createToken(LEFT_BOX_BRACKET	);
          }
        case 76: break;
        case 54: 
          { return createToken(EXISTS				);
          }
        case 77: break;
        case 50: 
          { return createToken(MINUS_FUNCTION		);
          }
        case 78: break;
        case 12: 
          { return createToken(RIGHT_ROUND_BRACKET);
          }
        case 79: break;
        case 58: 
          { return createToken(ORDER_BY			);
          }
        case 80: break;
        case 21: 
          { return createToken(COLON				);
          }
        case 81: break;
        case 8: 
          { return createToken(DIVIDE				);
          }
        case 82: break;
        case 30: 
          { return createToken(OR					);
          }
        case 83: break;
        case 41: 
          { return createToken(MAX				);
          }
        case 84: break;
        case 13: 
          { return createToken(LEFT_CURLY_BRACKET	);
          }
        case 85: break;
        case 27: 
          { return createToken(EQUALS				);
          }
        case 86: break;
        case 11: 
          { return createToken(LEFT_ROUND_BRACKET	);
          }
        case 87: break;
        case 49: 
          { return createToken(DEREF				);
          }
        case 88: break;
        case 34: 
          { return createToken(FORALL				);
          }
        case 89: break;
        case 23: 
          { return createToken(AS					);
          }
        case 90: break;
        case 38: 
          { return createToken(SUM				);
          }
        case 91: break;
        case 24: 
          { return createToken(IN					);
          }
        case 92: break;
        case 55: 
          { return createToken(STRUCT				);
          }
        case 93: break;
        case 14: 
          { return createToken(RIGHT_CURLY_BRACKET);
          }
        case 94: break;
        case 32: 
          { return createToken(LESS_OR_EQUAL		);
          }
        case 95: break;
        case 3: 
          { return createToken(DOT				);
          }
        case 96: break;
        case 1: 
          { int val;
		try {
			val = Integer.parseInt(yytext());
		}
		catch (Exception e) {
			throw new RuntimeException(e.getMessage());
		}
		return createToken(INTEGER_LITERAL, new Integer(val));
          }
        case 97: break;
        case 43: 
          { return createToken(BAG				);
          }
        case 98: break;
        case 36: 
          { return createToken(FORANY				);
          }
        case 99: break;
        case 53: 
          { return createToken(UNIQUE				);
          }
        case 100: break;
        case 48: 
          { return createToken(UNION				);
          }
        case 101: break;
        case 44: 
          { boolean val;
		try {
			val = Boolean.parseBoolean(yytext());
		}
		catch (Exception e) {
			throw new RuntimeException(e.getMessage());
		}
		return createToken(BOOLEAN_LITERAL, new Boolean(val));
          }
        case 102: break;
        case 19: 
          { return createToken(COMA				);
          }
        case 103: break;
        case 16: 
          { return createToken(RIGHT_BOX_BRACKET	);
          }
        case 104: break;
        case 56: 
          { return createToken(FOREACH			);
          }
        case 105: break;
        case 6: 
          { return createToken(MINUS				);
          }
        case 106: break;
        case 47: 
          { return createToken(USING		);
          }
        case 107: break;
        case 60: 
          { return createToken(CLOSE_BY			);
          }
        case 108: break;
        case 45: 
          { return createToken(GROUPBY_DESC		);
          }
        case 109: break;
        case 9: 
          { return createToken(MODULO				);
          }
        case 110: break;
        case 52: 
          { return createToken(WHERE				);
          }
        case 111: break;
        case 37: 
          { return createToken(AVG				);
          }
        case 112: break;
        case 5: 
          { return createToken(PLUS				);
          }
        case 113: break;
        case 20: 
          { return createToken(SEMICOLON			);
          }
        case 114: break;
        case 18: 
          { return createToken(LESS				);
          }
        case 115: break;
        case 59: 
          { return createToken(GROUP_AS			);
          }
        case 116: break;
        case 10: 
          { return createToken(NOT				);
          }
        case 117: break;
        case 33: 
          { double val;
		try {
			val = Double.parseDouble(yytext());
		}
		catch (Exception e) {
			throw new RuntimeException(e.getMessage());
		}
		return createToken(DOUBLE_LITERAL, new Double(val));
          }
        case 118: break;
        case 57: 
          { return createToken(SEQUENCE			);
          }
        case 119: break;
        case 46: 
          { return createToken(JOIN				);
          }
        case 120: break;
        case 40: 
          { return createToken(CHAR_LITERAL, yytext().charAt(1)) ;
          }
        case 121: break;
        case 42: 
          { return createToken(MIN				);
          }
        case 122: break;
        case 4: 
          { 
          }
        case 123: break;
        case 35: 
          { return createToken(GROUPBY_ASC		);
          }
        case 124: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return createToken(ParserSym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
