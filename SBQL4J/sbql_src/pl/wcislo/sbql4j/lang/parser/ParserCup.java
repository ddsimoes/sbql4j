
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 20 19:53:01 CET 2015
//----------------------------------------------------

package pl.wcislo.sbql4j.lang.parser;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import pl.wcislo.sbql4j.exception.ParserException;
import pl.wcislo.sbql4j.lang.parser.expression.AsExpression;
import pl.wcislo.sbql4j.lang.parser.expression.BinarySimpleOperatorExpression;
import pl.wcislo.sbql4j.lang.parser.expression.CloseByExpression;
import pl.wcislo.sbql4j.lang.parser.expression.ComaExpression;
import pl.wcislo.sbql4j.lang.parser.expression.ConditionalExpression;
import pl.wcislo.sbql4j.lang.parser.expression.ConstructorExpression;
import pl.wcislo.sbql4j.lang.parser.expression.DerefExpression;
import pl.wcislo.sbql4j.lang.parser.expression.DotExpression;
import pl.wcislo.sbql4j.lang.parser.expression.Expression;
import pl.wcislo.sbql4j.lang.parser.expression.ForEachExpression;
import pl.wcislo.sbql4j.lang.parser.expression.ForallExpression;
import pl.wcislo.sbql4j.lang.parser.expression.ForanyExpression;
import pl.wcislo.sbql4j.lang.parser.expression.GroupAsExpression;
import pl.wcislo.sbql4j.lang.parser.expression.NameExpression;
import pl.wcislo.sbql4j.lang.parser.expression.JavaParamExpression;
import pl.wcislo.sbql4j.lang.parser.expression.JoinExpression;
import pl.wcislo.sbql4j.lang.parser.expression.LiteralExpression;
import pl.wcislo.sbql4j.lang.parser.expression.MethodExpression;
import pl.wcislo.sbql4j.lang.parser.expression.OrderByExpression;
import pl.wcislo.sbql4j.lang.parser.expression.OrderByParamExpression;
import pl.wcislo.sbql4j.lang.parser.expression.RangeExpression;
import pl.wcislo.sbql4j.lang.parser.expression.UnaryExpression;
import pl.wcislo.sbql4j.lang.parser.expression.UnarySimpleOperatorExpression;
import pl.wcislo.sbql4j.lang.parser.expression.WhereExpression;
import pl.wcislo.sbql4j.lang.parser.expression.OrderByParamExpression.SortType;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorFactory;
import pl.wcislo.sbql4j.lang.parser.terminals.Name;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 20 19:53:01 CET 2015
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\003\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\004\000\002\003\005\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\003\000\002\003" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\007" +
    "\000\002\003\003\000\002\003\003\000\002\003\006\000" +
    "\002\003\007\000\002\003\003\000\002\022\003\000\002" +
    "\022\005\000\002\022\005\000\002\005\007\000\002\005" +
    "\004\000\002\006\007\000\002\006\004\000\002\020\005" +
    "\000\002\021\005\000\002\021\005\000\002\016\002\000" +
    "\002\016\005\000\002\007\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\010\005\000\002\010\006\000\002\017\006" +
    "\000\002\017\007\000\002\017\006\000\002\017\007\000" +
    "\002\012\005\000\002\013\003\000\002\013\005\000\002" +
    "\014\004\000\002\014\006\000\002\015\002\000\002\015" +
    "\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\060\004\034\005\044\006\016\007\020\012" +
    "\023\013\031\024\025\026\014\027\033\030\042\036\035" +
    "\037\040\044\026\045\011\046\005\047\013\052\010\053" +
    "\024\057\015\060\032\063\037\072\027\073\036\001\002" +
    "\000\174\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057" +
    "\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9" +
    "\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075" +
    "\uffe9\076\uffe9\077\uffe9\100\uffe9\001\002\000\062\004\034" +
    "\005\044\006\016\007\020\012\023\013\031\024\025\026" +
    "\014\027\033\030\042\033\234\036\035\037\040\044\026" +
    "\045\011\046\005\047\013\052\010\053\024\057\015\060" +
    "\032\063\037\072\027\073\036\001\002\000\174\002\uffd4" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061" +
    "\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\067\uffd4\070\uffd4" +
    "\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077" +
    "\uffd4\100\uffd4\001\002\000\174\002\uffd9\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063" +
    "\uffd9\064\uffd9\065\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9" +
    "\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\001" +
    "\002\000\060\004\034\005\044\006\016\007\020\012\023" +
    "\013\031\024\025\026\014\027\033\030\042\036\035\037" +
    "\040\044\026\045\011\046\005\047\013\052\010\053\024" +
    "\057\015\060\032\063\037\072\027\073\036\001\002\000" +
    "\062\004\034\005\044\006\016\007\020\012\023\013\031" +
    "\024\025\026\014\027\033\030\042\033\225\036\035\037" +
    "\040\044\026\045\011\046\005\047\013\052\010\053\024" +
    "\057\015\060\032\063\037\072\027\073\036\001\002\000" +
    "\074\002\000\014\051\015\071\016\050\017\064\020\060" +
    "\021\066\022\062\023\073\025\067\031\052\032\047\033" +
    "\100\034\053\035\074\040\061\041\054\042\072\043\046" +
    "\050\056\051\075\054\077\055\057\056\101\061\070\062" +
    "\063\067\065\075\055\077\076\001\002\000\060\004\034" +
    "\005\044\006\016\007\020\012\023\013\031\024\025\026" +
    "\014\027\033\030\042\036\035\037\040\044\026\045\011" +
    "\046\005\047\013\052\010\053\024\057\015\060\032\063" +
    "\037\072\027\073\036\001\002\000\060\004\034\005\044" +
    "\006\016\007\020\012\023\013\031\024\025\026\014\027" +
    "\033\030\042\036\035\037\040\044\026\045\011\046\005" +
    "\047\013\052\010\053\024\057\015\060\032\063\037\072" +
    "\027\073\036\001\002\000\060\004\034\005\044\006\016" +
    "\007\020\012\023\013\031\024\025\026\014\027\033\030" +
    "\042\036\035\037\040\044\026\045\011\046\005\047\013" +
    "\052\010\053\024\057\015\060\032\063\037\072\027\073" +
    "\036\001\002\000\174\002\uffc0\004\uffc0\005\uffc0\006\uffc0" +
    "\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064" +
    "\uffc0\065\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0" +
    "\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\001\002\000" +
    "\174\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051" +
    "\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4" +
    "\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\067" +
    "\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4" +
    "\076\ufff4\077\ufff4\100\ufff4\001\002\000\174\002\uffc3\004" +
    "\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3" +
    "\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3" +
    "\062\uffc3\063\uffc3\064\uffc3\065\uffc3\067\uffc3\070\uffc3\071" +
    "\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3" +
    "\100\uffc3\001\002\000\174\002\uffd3\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3" +
    "\064\uffd3\065\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073" +
    "\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\001\002" +
    "\000\004\002\220\001\002\000\174\002\uffbf\004\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf" +
    "\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf" +
    "\063\uffbf\064\uffbf\065\uffbf\067\uffbf\070\uffbf\071\uffbf\072" +
    "\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf" +
    "\001\002\000\060\004\034\005\044\006\016\007\020\012" +
    "\023\013\031\024\025\026\014\027\033\030\042\036\035" +
    "\037\040\044\026\045\011\046\005\047\013\052\010\053" +
    "\024\057\015\060\032\063\037\072\027\073\036\001\002" +
    "\000\060\004\034\005\044\006\016\007\020\012\023\013" +
    "\031\024\025\026\014\027\033\030\042\036\035\037\040" +
    "\044\026\045\011\046\005\047\013\052\010\053\024\057" +
    "\015\060\032\063\037\072\027\073\036\001\002\000\060" +
    "\004\034\005\044\006\016\007\020\012\023\013\031\024" +
    "\025\026\014\027\033\030\042\036\035\037\040\044\026" +
    "\045\011\046\005\047\013\052\010\053\024\057\015\060" +
    "\032\063\037\072\027\073\036\001\002\000\060\004\034" +
    "\005\044\006\016\007\020\012\023\013\031\024\025\026" +
    "\014\027\033\030\042\036\035\037\040\044\026\045\011" +
    "\046\005\047\013\052\010\053\024\057\015\060\032\063" +
    "\037\072\027\073\036\001\002\000\174\002\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062" +
    "\uffd8\063\202\064\uffd8\065\uffd8\067\uffd8\070\uffd8\071\uffd8" +
    "\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8\100" +
    "\uffd8\001\002\000\174\002\uffbe\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe" +
    "\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064" +
    "\uffbe\065\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe" +
    "\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe\001\002\000" +
    "\060\004\034\005\044\006\016\007\020\012\023\013\031" +
    "\024\025\026\014\027\033\030\042\036\035\037\040\044" +
    "\026\045\011\046\005\047\013\052\010\053\024\057\015" +
    "\060\032\063\037\072\027\073\036\001\002\000\060\004" +
    "\034\005\044\006\016\007\020\012\023\013\031\024\025" +
    "\026\014\027\033\030\042\036\035\037\040\044\026\045" +
    "\011\046\005\047\013\052\010\053\024\057\015\060\032" +
    "\063\037\072\027\073\036\001\002\000\174\002\uffc2\004" +
    "\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\065\uffc2\067\uffc2\070\uffc2\071" +
    "\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2" +
    "\100\uffc2\001\002\000\060\004\034\005\044\006\016\007" +
    "\020\012\023\013\031\024\025\026\014\027\033\030\042" +
    "\036\035\037\040\044\026\045\011\046\005\047\013\052" +
    "\010\053\024\057\015\060\032\063\037\072\027\073\036" +
    "\001\002\000\004\007\162\001\002\000\060\004\034\005" +
    "\044\006\016\007\020\012\023\013\031\024\025\026\014" +
    "\027\033\030\042\036\035\037\040\044\026\045\011\046" +
    "\005\047\013\052\010\053\024\057\015\060\032\063\037" +
    "\072\027\073\036\001\002\000\060\004\034\005\044\006" +
    "\016\007\020\012\023\013\031\024\025\026\014\027\033" +
    "\030\042\036\035\037\040\044\026\045\011\046\005\047" +
    "\013\052\010\053\024\057\015\060\032\063\037\072\027" +
    "\073\036\001\002\000\174\002\uffd0\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055" +
    "\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0" +
    "\064\uffd0\065\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073" +
    "\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\001\002" +
    "\000\060\004\034\005\044\006\016\007\020\012\023\013" +
    "\031\024\025\026\014\027\033\030\042\036\035\037\040" +
    "\044\026\045\011\046\005\047\013\052\010\053\024\057" +
    "\015\060\032\063\037\072\027\073\036\001\002\000\174" +
    "\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea" +
    "\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060" +
    "\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\067\uffea" +
    "\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea\076" +
    "\uffea\077\uffea\100\uffea\001\002\000\174\002\uffc1\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062" +
    "\uffc1\063\uffc1\064\uffc1\065\uffc1\067\uffc1\070\uffc1\071\uffc1" +
    "\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\100" +
    "\uffc1\001\002\000\174\002\uffee\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\072\043\uffee\044\uffee\045\uffee\046\uffee\047" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee" +
    "\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064" +
    "\uffee\065\uffee\067\065\070\uffee\071\uffee\072\uffee\073\uffee" +
    "\074\uffee\075\uffee\076\uffee\077\uffee\100\uffee\001\002\000" +
    "\060\004\034\005\044\006\016\007\020\012\023\013\031" +
    "\024\025\026\014\027\033\030\042\036\035\037\040\044" +
    "\026\045\011\046\005\047\013\052\010\053\024\057\015" +
    "\060\032\063\037\072\027\073\036\001\002\000\060\004" +
    "\034\005\044\006\016\007\020\012\023\013\031\024\025" +
    "\026\014\027\033\030\042\036\035\037\040\044\026\045" +
    "\011\046\005\047\013\052\010\053\024\057\015\060\032" +
    "\063\037\072\027\073\036\001\002\000\060\004\034\005" +
    "\044\006\016\007\020\012\023\013\031\024\025\026\014" +
    "\027\033\030\042\036\035\037\040\044\026\045\011\046" +
    "\005\047\013\052\010\053\024\057\015\060\032\063\037" +
    "\072\027\073\036\001\002\000\060\004\034\005\044\006" +
    "\016\007\020\012\023\013\031\024\025\026\014\027\033" +
    "\030\042\036\035\037\040\044\026\045\011\046\005\047" +
    "\013\052\010\053\024\057\015\060\032\063\037\072\027" +
    "\073\036\001\002\000\060\004\034\005\044\006\016\007" +
    "\020\012\023\013\031\024\025\026\014\027\033\030\042" +
    "\036\035\037\040\044\026\045\011\046\005\047\013\052" +
    "\010\053\024\057\015\060\032\063\037\072\027\073\036" +
    "\001\002\000\060\004\034\005\044\006\016\007\020\012" +
    "\023\013\031\024\025\026\014\027\033\030\042\036\035" +
    "\037\040\044\026\045\011\046\005\047\013\052\010\053" +
    "\024\057\015\060\032\063\037\072\027\073\036\001\002" +
    "\000\060\004\034\005\044\006\016\007\020\012\023\013" +
    "\031\024\025\026\014\027\033\030\042\036\035\037\040" +
    "\044\026\045\011\046\005\047\013\052\010\053\024\057" +
    "\015\060\032\063\037\072\027\073\036\001\002\000\060" +
    "\004\034\005\044\006\016\007\020\012\023\013\031\024" +
    "\025\026\014\027\033\030\042\036\035\037\040\044\026" +
    "\045\011\046\005\047\013\052\010\053\024\057\015\060" +
    "\032\063\037\072\027\073\036\001\002\000\060\004\034" +
    "\005\044\006\016\007\020\012\023\013\031\024\025\026" +
    "\014\027\033\030\042\036\035\037\040\044\026\045\011" +
    "\046\005\047\013\052\010\053\024\057\015\060\032\063" +
    "\037\072\027\073\036\001\002\000\004\007\020\001\002" +
    "\000\060\004\034\005\044\006\016\007\020\012\023\013" +
    "\031\024\025\026\014\027\033\030\042\036\035\037\040" +
    "\044\026\045\011\046\005\047\013\052\010\053\024\057" +
    "\015\060\032\063\037\072\027\073\036\001\002\000\060" +
    "\004\034\005\044\006\016\007\020\012\023\013\031\024" +
    "\025\026\014\027\033\030\042\036\035\037\040\044\026" +
    "\045\011\046\005\047\013\052\010\053\024\057\015\060" +
    "\032\063\037\072\027\073\036\001\002\000\060\004\034" +
    "\005\044\006\016\007\020\012\023\013\031\024\025\026" +
    "\014\027\033\030\042\036\035\037\040\044\026\045\011" +
    "\046\005\047\013\052\010\053\024\057\015\060\032\063" +
    "\037\072\027\073\036\001\002\000\060\004\034\005\044" +
    "\006\016\007\020\012\023\013\031\024\025\026\014\027" +
    "\033\030\042\036\035\037\040\044\026\045\011\046\005" +
    "\047\013\052\010\053\024\057\015\060\032\063\037\072" +
    "\027\073\036\001\002\000\060\004\034\005\044\006\016" +
    "\007\020\012\023\013\031\024\025\026\014\027\033\030" +
    "\042\036\035\037\040\044\026\045\011\046\005\047\013" +
    "\052\010\053\024\057\015\060\032\063\037\072\027\073" +
    "\036\001\002\000\060\004\034\005\044\006\016\007\020" +
    "\012\023\013\031\024\025\026\014\027\033\030\042\036" +
    "\035\037\040\044\026\045\011\046\005\047\013\052\010" +
    "\053\024\057\015\060\032\063\037\072\027\073\036\001" +
    "\002\000\060\004\034\005\044\006\016\007\020\012\023" +
    "\013\031\024\025\026\014\027\033\030\042\036\035\037" +
    "\040\044\026\045\011\046\005\047\013\052\010\053\024" +
    "\057\015\060\032\063\037\072\027\073\036\001\002\000" +
    "\060\004\034\005\044\006\016\007\020\012\023\013\031" +
    "\024\025\026\014\027\033\030\042\036\035\037\040\044" +
    "\026\045\011\046\005\047\013\052\010\053\024\057\015" +
    "\060\032\063\037\072\027\073\036\001\002\000\060\004" +
    "\034\005\044\006\016\007\020\012\023\013\031\024\025" +
    "\026\014\027\033\030\042\036\035\037\040\044\026\045" +
    "\011\046\005\047\013\052\010\053\024\057\015\060\032" +
    "\063\037\072\027\073\036\001\002\000\060\004\034\005" +
    "\044\006\016\007\020\012\023\013\031\024\025\026\014" +
    "\027\033\030\042\036\035\037\040\044\026\045\011\046" +
    "\005\047\013\052\010\053\024\057\015\060\032\063\037" +
    "\072\027\073\036\001\002\000\060\004\034\005\044\006" +
    "\016\007\020\012\023\013\031\024\025\026\014\027\033" +
    "\030\042\036\035\037\040\044\026\045\011\046\005\047" +
    "\013\052\010\053\024\057\015\060\032\063\037\072\027" +
    "\073\036\001\002\000\060\004\034\005\044\006\016\007" +
    "\020\012\023\013\031\024\025\026\014\027\033\030\042" +
    "\036\035\037\040\044\026\045\011\046\005\047\013\052" +
    "\010\053\024\057\015\060\032\063\037\072\027\073\036" +
    "\001\002\000\060\004\034\005\044\006\016\007\020\012" +
    "\023\013\031\024\025\026\014\027\033\030\042\036\035" +
    "\037\040\044\026\045\011\046\005\047\013\052\010\053" +
    "\024\057\015\060\032\063\037\072\027\073\036\001\002" +
    "\000\060\004\034\005\044\006\016\007\020\012\023\013" +
    "\031\024\025\026\014\027\033\030\042\036\035\037\040" +
    "\044\026\045\011\046\005\047\013\052\010\053\024\057" +
    "\015\060\032\063\037\072\027\073\036\001\002\000\060" +
    "\004\034\005\044\006\016\007\020\012\023\013\031\024" +
    "\025\026\014\027\033\030\042\036\035\037\040\044\026" +
    "\045\011\046\005\047\013\052\010\053\024\057\015\060" +
    "\032\063\037\072\027\073\036\001\002\000\060\004\034" +
    "\005\044\006\016\007\020\012\023\013\031\024\025\026" +
    "\014\027\033\030\042\036\035\037\040\044\026\045\011" +
    "\046\005\047\013\052\010\053\024\057\015\060\032\063" +
    "\037\072\027\073\036\001\002\000\060\004\034\005\044" +
    "\006\016\007\020\012\023\013\031\024\025\026\014\027" +
    "\033\030\042\036\035\037\040\044\026\045\011\046\005" +
    "\047\013\052\010\053\024\057\015\060\032\063\037\072" +
    "\027\073\036\001\002\000\004\007\020\001\002\000\174" +
    "\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\067\uffe2" +
    "\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076" +
    "\uffe2\077\uffe2\100\uffe2\001\002\000\174\002\uffe0\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013" +
    "\uffe0\014\051\015\071\016\050\017\064\020\060\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\072\043\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0" +
    "\054\uffe0\055\057\056\101\057\uffe0\060\uffe0\061\070\062" +
    "\063\063\uffe0\064\uffe0\065\uffe0\067\065\070\uffe0\071\uffe0" +
    "\072\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\077\076\100" +
    "\uffe0\001\002\000\174\002\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\051\015" +
    "\071\016\050\017\064\020\060\021\066\022\062\023\073" +
    "\024\ufff3\025\067\026\ufff3\027\ufff3\030\ufff3\031\052\032" +
    "\047\033\100\034\053\035\074\036\ufff3\037\ufff3\040\061" +
    "\041\054\042\072\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047" +
    "\ufff3\050\056\051\075\052\ufff3\053\ufff3\054\ufff3\055\057" +
    "\056\101\057\ufff3\060\ufff3\061\070\062\063\063\ufff3\064" +
    "\ufff3\065\ufff3\067\065\070\ufff3\071\ufff3\072\ufff3\073\ufff3" +
    "\074\ufff3\075\055\076\ufff3\077\076\100\ufff3\001\002\000" +
    "\174\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\072" +
    "\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051" +
    "\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd" +
    "\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\067" +
    "\065\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd" +
    "\076\uffdd\077\uffdd\100\uffdd\001\002\000\174\002\uffd6\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\051\015\071\016\050\017\064\020\060\021" +
    "\066\022\062\023\073\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\052\032\047\033\100\034\053\035\074\036" +
    "\uffd6\037\uffd6\040\061\041\uffd6\042\072\043\uffd6\044\uffd6" +
    "\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\057\056\101\057\uffd6\060\uffd6\061\070" +
    "\062\063\063\uffd6\064\uffd6\065\uffd6\067\065\070\uffd6\071" +
    "\uffd6\072\uffd6\073\uffd6\074\uffd6\075\055\076\uffd6\077\076" +
    "\100\uffd6\001\002\000\174\002\uffde\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\051" +
    "\015\071\016\050\017\064\020\060\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\072\043\uffde\044\uffde\045\uffde\046\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055" +
    "\057\056\101\057\uffde\060\uffde\061\070\062\063\063\uffde" +
    "\064\uffde\065\uffde\067\065\070\uffde\071\uffde\072\uffde\073" +
    "\uffde\074\uffde\075\uffde\076\uffde\077\076\100\uffde\001\002" +
    "\000\174\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\014\051\015\071\016\050" +
    "\017\064\020\060\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9" +
    "\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042" +
    "\072\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\057\056\101\057" +
    "\ufff9\060\ufff9\061\070\062\063\063\ufff9\064\ufff9\065\ufff9" +
    "\067\065\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075" +
    "\ufff9\076\ufff9\077\076\100\ufff9\001\002\000\174\002\uffc8" +
    "\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061" +
    "\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\067\uffc8\070\uffc8" +
    "\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077" +
    "\uffc8\100\uffc8\001\002\000\174\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\016\050\017\064\020\060\021\ufffe\022\ufffe" +
    "\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031" +
    "\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe" +
    "\040\ufffe\041\ufffe\042\072\043\ufffe\044\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\055\057\056\101\057\ufffe\060\ufffe\061\070\062\063\063" +
    "\ufffe\064\ufffe\065\ufffe\067\065\070\ufffe\071\ufffe\072\ufffe" +
    "\073\ufffe\074\ufffe\075\ufffe\076\ufffe\077\076\100\ufffe\001" +
    "\002\000\174\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\042\072\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7" +
    "\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065" +
    "\uffe7\067\065\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7" +
    "\075\uffe7\076\uffe7\077\uffe7\100\uffe7\001\002\000\174\002" +
    "\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\014\051\015\071\016\050\017\064\020" +
    "\060\021\066\022\062\023\073\024\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\030\ufff5\031\052\032\047\033\100\034\053\035" +
    "\074\036\ufff5\037\ufff5\040\061\041\ufff5\042\072\043\ufff5" +
    "\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\056\051\075\052" +
    "\ufff5\053\ufff5\054\ufff5\055\057\056\101\057\ufff5\060\ufff5" +
    "\061\070\062\063\063\ufff5\064\ufff5\065\ufff5\067\065\070" +
    "\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\055\076\ufff5" +
    "\077\076\100\ufff5\001\002\000\174\002\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\014\051\015\071\016\050\017\064\020\060\021\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\042\072\043\ufff8\044\ufff8\045\ufff8" +
    "\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054" +
    "\ufff8\055\057\056\101\057\ufff8\060\ufff8\061\070\062\063" +
    "\063\ufff8\064\ufff8\065\ufff8\067\065\070\ufff8\071\ufff8\072" +
    "\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8\077\076\100\ufff8" +
    "\001\002\000\076\014\051\015\071\016\050\017\064\020" +
    "\060\021\066\022\062\023\073\025\067\031\052\032\047" +
    "\033\100\034\053\035\074\040\061\041\054\042\072\043" +
    "\046\050\056\051\075\054\077\055\057\056\101\061\070" +
    "\062\063\067\065\070\uffcf\074\121\075\055\077\076\001" +
    "\002\000\004\070\120\001\002\000\174\002\uffd2\004\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062" +
    "\uffd2\063\uffd2\064\uffd2\065\uffd2\067\uffd2\070\uffd2\071\uffd2" +
    "\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100" +
    "\uffd2\001\002\000\062\004\034\005\044\006\016\007\020" +
    "\012\023\013\031\016\122\024\025\026\014\027\033\030" +
    "\042\036\035\037\040\044\026\045\011\046\005\047\013" +
    "\052\010\053\024\057\015\060\032\063\037\072\027\073" +
    "\036\001\002\000\004\070\uffcd\001\002\000\074\014\051" +
    "\015\071\016\050\017\064\020\060\021\066\022\062\023" +
    "\073\025\067\031\052\032\047\033\100\034\053\035\074" +
    "\040\061\041\054\042\072\043\046\050\056\051\075\054" +
    "\077\055\057\056\101\061\070\062\063\067\065\070\uffce" +
    "\075\055\077\076\001\002\000\174\002\ufffc\004\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc" +
    "\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037" +
    "\ufffc\040\ufffc\041\ufffc\042\072\043\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054" +
    "\ufffc\055\057\056\101\057\ufffc\060\ufffc\061\070\062\063" +
    "\063\ufffc\064\ufffc\065\ufffc\067\065\070\ufffc\071\ufffc\072" +
    "\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\076\100\ufffc" +
    "\001\002\000\174\002\uffda\004\uffda\005\uffda\006\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041" +
    "\uffda\042\072\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda" +
    "\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda" +
    "\065\uffda\067\065\070\uffda\071\uffda\072\uffda\073\uffda\074" +
    "\uffda\075\uffda\076\uffda\077\uffda\100\uffda\001\002\000\174" +
    "\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\014\051\015\071\016\050\017\064" +
    "\020\060\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\072\043" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\054\ufffa\055\057\056\101\057\ufffa\060" +
    "\ufffa\061\070\062\063\063\ufffa\064\ufffa\065\ufffa\067\065" +
    "\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076" +
    "\ufffa\077\076\100\ufffa\001\002\000\174\002\uffdc\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\014\051\015\071\016\050\017\064\020\060\021\066" +
    "\022\062\023\073\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\052\032\047\033\100\034\053\035\074\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\042\072\043\uffdc\044\uffdc\045" +
    "\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\054\uffdc\055\057\056\101\057\uffdc\060\uffdc\061\070\062" +
    "\063\063\uffdc\064\uffdc\065\uffdc\067\065\070\uffdc\071\uffdc" +
    "\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077\076\100" +
    "\uffdc\001\002\000\174\002\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\041\ufffb\042\072\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047" +
    "\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\057" +
    "\056\101\057\ufffb\060\ufffb\061\070\062\063\063\ufffb\064" +
    "\ufffb\065\ufffb\067\065\070\ufffb\071\ufffb\072\ufffb\073\ufffb" +
    "\074\ufffb\075\ufffb\076\ufffb\077\076\100\ufffb\001\002\000" +
    "\174\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051" +
    "\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3" +
    "\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\067" +
    "\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3" +
    "\076\uffe3\077\uffe3\100\uffe3\001\002\000\174\002\uffb7\004" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7" +
    "\062\uffb7\063\uffb7\064\uffb7\065\uffb7\067\uffb7\070\uffb7\071" +
    "\142\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7" +
    "\100\uffb7\001\002\000\174\002\uffb2\004\uffb2\005\uffb2\006" +
    "\uffb2\007\uffb2\010\135\011\136\012\uffb2\013\uffb2\014\051" +
    "\015\071\016\050\017\064\020\060\021\066\022\062\023" +
    "\073\024\uffb2\025\067\026\uffb2\027\uffb2\030\uffb2\031\052" +
    "\032\047\033\100\034\053\035\074\036\uffb2\037\uffb2\040" +
    "\061\041\054\042\072\043\046\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\056\051\075\052\uffb2\053\uffb2\054\077\055" +
    "\057\056\101\057\uffb2\060\uffb2\061\070\062\063\063\uffb2" +
    "\064\uffb2\065\uffb2\067\065\070\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\074\uffb2\075\055\076\uffb2\077\076\100\uffb2\001\002" +
    "\000\174\002\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075" +
    "\uffb6\076\uffb6\077\uffb6\100\uffb6\001\002\000\174\002\uffb1" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\067\uffb1\070\uffb1" +
    "\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\077" +
    "\uffb1\100\uffb1\001\002\000\174\002\uffb0\004\uffb0\005\uffb0" +
    "\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0" +
    "\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\065\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0" +
    "\073\uffb0\074\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\001" +
    "\002\000\174\002\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4" +
    "\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4" +
    "\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065" +
    "\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4" +
    "\075\uffb4\076\uffb4\077\uffb4\100\140\001\002\000\060\004" +
    "\034\005\044\006\016\007\020\012\023\013\031\024\025" +
    "\026\014\027\033\030\042\036\035\037\040\044\026\045" +
    "\011\046\005\047\013\052\010\053\024\057\015\060\032" +
    "\063\037\072\027\073\036\001\002\000\174\002\uffb3\004" +
    "\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053" +
    "\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\065\uffb3\067\uffb3\070\uffb3\071" +
    "\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3" +
    "\100\uffb3\001\002\000\060\004\034\005\044\006\016\007" +
    "\020\012\023\013\031\024\025\026\014\027\033\030\042" +
    "\036\035\037\040\044\026\045\011\046\005\047\013\052" +
    "\010\053\024\057\015\060\032\063\037\072\027\073\036" +
    "\001\002\000\174\002\uffb5\004\uffb5\005\uffb5\006\uffb5\007" +
    "\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074" +
    "\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\001\002\000\074" +
    "\014\051\015\071\016\050\017\064\020\060\021\066\022" +
    "\062\023\073\025\067\031\052\032\047\033\100\034\053" +
    "\035\074\040\061\041\054\042\072\043\046\050\056\051" +
    "\075\054\077\055\057\056\101\061\070\062\063\067\065" +
    "\075\055\076\145\077\076\001\002\000\060\004\034\005" +
    "\044\006\016\007\020\012\023\013\031\024\025\026\014" +
    "\027\033\030\042\036\035\037\040\044\026\045\011\046" +
    "\005\047\013\052\010\053\024\057\015\060\032\063\037" +
    "\072\027\073\036\001\002\000\174\002\uffd1\004\uffd1\005" +
    "\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1" +
    "\014\051\015\071\016\050\017\064\020\060\021\066\022" +
    "\062\023\073\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\052\032\047\033\100\034\053\035\074\036\uffd1\037" +
    "\uffd1\040\061\041\uffd1\042\072\043\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054" +
    "\uffd1\055\057\056\101\057\uffd1\060\uffd1\061\070\062\063" +
    "\063\uffd1\064\uffd1\065\uffd1\067\065\070\uffd1\071\uffd1\072" +
    "\uffd1\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\076\100\uffd1" +
    "\001\002\000\174\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\051\015\071" +
    "\016\050\017\064\020\060\021\066\022\062\023\073\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\052\032\047" +
    "\033\100\034\053\035\074\036\uffdb\037\uffdb\040\061\041" +
    "\uffdb\042\072\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb" +
    "\050\056\051\075\052\uffdb\053\uffdb\054\uffdb\055\057\056" +
    "\101\057\uffdb\060\uffdb\061\070\062\063\063\uffdb\064\uffdb" +
    "\065\uffdb\067\065\070\uffdb\071\uffdb\072\uffdb\073\uffdb\074" +
    "\uffdb\075\055\076\uffdb\077\076\100\uffdb\001\002\000\174" +
    "\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\014\051\015\071\016\050\017\064" +
    "\020\060\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\072\043" +
    "\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf" +
    "\052\uffdf\053\uffdf\054\uffdf\055\057\056\101\057\uffdf\060" +
    "\uffdf\061\070\062\063\063\uffdf\064\uffdf\065\uffdf\067\065" +
    "\070\uffdf\071\uffdf\072\uffdf\073\uffdf\074\uffdf\075\uffdf\076" +
    "\uffdf\077\076\100\uffdf\001\002\000\174\002\ufff7\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\014\051\015\071\016\050\017\064\020\060\021\066" +
    "\022\062\023\073\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030" +
    "\ufff7\031\ufff7\032\ufff7\033\100\034\053\035\074\036\ufff7" +
    "\037\ufff7\040\ufff7\041\ufff7\042\072\043\ufff7\044\ufff7\045" +
    "\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\055\057\056\101\057\ufff7\060\ufff7\061\070\062" +
    "\063\063\ufff7\064\ufff7\065\ufff7\067\065\070\ufff7\071\ufff7" +
    "\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077\076\100" +
    "\ufff7\001\002\000\174\002\uffff\004\uffff\005\uffff\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015" +
    "\uffff\016\050\017\064\020\060\021\uffff\022\uffff\023\uffff" +
    "\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032" +
    "\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff" +
    "\041\uffff\042\072\043\uffff\044\uffff\045\uffff\046\uffff\047" +
    "\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055\057" +
    "\056\101\057\uffff\060\uffff\061\070\062\063\063\uffff\064" +
    "\uffff\065\uffff\067\065\070\uffff\071\uffff\072\uffff\073\uffff" +
    "\074\uffff\075\uffff\076\uffff\077\076\100\uffff\001\002\000" +
    "\174\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\072" +
    "\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\052\ufffd\053\ufffd\054\ufffd\055\057\056\101\057\ufffd" +
    "\060\ufffd\061\070\062\063\063\ufffd\064\ufffd\065\ufffd\067" +
    "\065\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd" +
    "\076\ufffd\077\076\100\ufffd\001\002\000\174\002\ufff6\004" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\014\051\015\071\016\050\017\064\020\060\021" +
    "\066\022\062\023\073\024\ufff6\025\ufff6\026\ufff6\027\ufff6" +
    "\030\ufff6\031\ufff6\032\ufff6\033\100\034\053\035\074\036" +
    "\ufff6\037\ufff6\040\ufff6\041\ufff6\042\072\043\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053" +
    "\ufff6\054\ufff6\055\057\056\101\057\ufff6\060\ufff6\061\070" +
    "\062\063\063\ufff6\064\ufff6\065\ufff6\067\065\070\ufff6\071" +
    "\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6\077\076" +
    "\100\ufff6\001\002\000\174\002\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\051" +
    "\015\071\016\050\017\064\020\060\021\066\022\062\023" +
    "\073\024\uffe1\025\067\026\uffe1\027\uffe1\030\uffe1\031\052" +
    "\032\047\033\100\034\053\035\074\036\uffe1\037\uffe1\040" +
    "\061\041\054\042\072\043\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\047\uffe1\050\056\051\075\052\uffe1\053\uffe1\054\uffe1\055" +
    "\057\056\101\057\uffe1\060\uffe1\061\070\062\063\063\uffe1" +
    "\064\uffe1\065\uffe1\067\065\070\uffe1\071\uffe1\072\uffe1\073" +
    "\uffe1\074\uffe1\075\055\076\uffe1\077\076\100\uffe1\001\002" +
    "\000\174\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042" +
    "\072\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb" +
    "\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb" +
    "\067\065\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075" +
    "\uffeb\076\uffeb\077\uffeb\100\uffeb\001\002\000\074\014\051" +
    "\015\071\016\050\017\064\020\060\021\066\022\062\023" +
    "\073\025\067\031\052\032\047\033\100\034\053\035\074" +
    "\040\061\041\054\042\072\043\046\050\056\051\075\054" +
    "\077\055\057\056\101\061\070\062\063\064\160\067\065" +
    "\075\055\077\076\001\002\000\174\002\uffd7\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7" +
    "\063\uffd7\064\uffd7\065\uffd7\067\uffd7\070\uffd7\071\uffd7\072" +
    "\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7" +
    "\001\002\000\004\063\173\001\002\000\006\042\uffc3\063" +
    "\167\001\002\000\004\042\164\001\002\000\004\007\020" +
    "\001\002\000\004\063\uffc6\001\002\000\006\042\164\063" +
    "\uffc7\001\002\000\062\004\034\005\044\006\016\007\020" +
    "\012\023\013\031\024\025\026\014\027\033\030\042\036" +
    "\035\037\040\044\026\045\011\046\005\047\013\052\010" +
    "\053\024\057\015\060\032\063\037\064\171\072\027\073" +
    "\036\001\002\000\074\014\051\015\071\016\050\017\064" +
    "\020\060\021\066\022\062\023\073\025\067\031\052\032" +
    "\047\033\100\034\053\035\074\040\061\041\054\042\072" +
    "\043\046\050\056\051\075\054\077\055\057\056\101\061" +
    "\070\062\063\064\172\067\065\075\055\077\076\001\002" +
    "\000\174\002\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010" +
    "\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9" +
    "\067\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075" +
    "\uffb9\076\uffb9\077\uffb9\100\uffb9\001\002\000\174\002\uffb8" +
    "\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\067\uffb8\070\uffb8" +
    "\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077" +
    "\uffb8\100\uffb8\001\002\000\062\004\034\005\044\006\016" +
    "\007\020\012\023\013\031\024\025\026\014\027\033\030" +
    "\042\036\035\037\040\044\026\045\011\046\005\047\013" +
    "\052\010\053\024\057\015\060\032\063\037\064\175\072" +
    "\027\073\036\001\002\000\074\014\051\015\071\016\050" +
    "\017\064\020\060\021\066\022\062\023\073\025\067\031" +
    "\052\032\047\033\100\034\053\035\074\040\061\041\054" +
    "\042\072\043\046\050\056\051\075\054\077\055\057\056" +
    "\101\061\070\062\063\064\176\067\065\075\055\077\076" +
    "\001\002\000\174\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb" +
    "\065\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074" +
    "\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\001\002\000\174" +
    "\002\uffba\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba" +
    "\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060" +
    "\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\067\uffba" +
    "\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076" +
    "\uffba\077\uffba\100\uffba\001\002\000\174\002\uffec\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\041\uffec\042\072\043\uffec\044\uffec\045" +
    "\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec" +
    "\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062" +
    "\uffec\063\uffec\064\uffec\065\uffec\067\065\070\uffec\071\uffec" +
    "\072\uffec\073\uffec\074\uffec\075\uffec\076\uffec\077\uffec\100" +
    "\uffec\001\002\000\174\002\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\041\uffed\042\072\043\uffed\044\uffed\045\uffed\046\uffed\047" +
    "\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed" +
    "\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064" +
    "\uffed\065\uffed\067\065\070\uffed\071\uffed\072\uffed\073\uffed" +
    "\074\uffed\075\uffed\076\uffed\077\uffed\100\uffed\001\002\000" +
    "\174\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\072" +
    "\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5" +
    "\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\067" +
    "\065\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5" +
    "\076\uffe5\077\uffe5\100\uffe5\001\002\000\062\004\034\005" +
    "\044\006\016\007\020\012\023\013\031\024\025\026\014" +
    "\027\033\030\042\036\035\037\040\044\026\045\011\046" +
    "\005\047\013\052\010\053\024\057\015\060\032\063\037" +
    "\064\204\072\027\073\036\001\002\000\074\014\051\015" +
    "\071\016\050\017\064\020\060\021\066\022\062\023\073" +
    "\025\067\031\052\032\047\033\100\034\053\035\074\040" +
    "\061\041\054\042\072\043\046\050\056\051\075\054\077" +
    "\055\057\056\101\061\070\062\063\064\205\067\065\075" +
    "\055\077\076\001\002\000\174\002\uffbd\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046" +
    "\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063" +
    "\uffbd\064\uffbd\065\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd" +
    "\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\001" +
    "\002\000\174\002\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065" +
    "\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc" +
    "\075\uffbc\076\uffbc\077\uffbc\100\uffbc\001\002\000\074\014" +
    "\051\015\071\016\050\017\064\020\060\021\066\022\062" +
    "\023\073\025\067\031\052\032\047\033\100\034\053\035" +
    "\074\040\061\041\054\042\072\043\046\050\056\051\075" +
    "\054\077\055\057\056\101\061\070\062\063\065\207\067" +
    "\065\075\055\077\076\001\002\000\062\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\012\uffc5\013\uffc5\024\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\036\uffc5\037\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\047\uffc5\052\uffc5\053\uffc5\057\uffc5\060\uffc5\063\uffc5\066" +
    "\uffc5\072\uffc5\073\uffc5\001\002\000\062\004\034\005\044" +
    "\006\016\007\020\012\023\013\031\024\025\026\014\027" +
    "\033\030\042\036\035\037\040\044\026\045\011\046\005" +
    "\047\013\052\010\053\024\057\015\060\032\063\037\066" +
    "\212\072\027\073\036\001\002\000\074\014\051\015\071" +
    "\016\050\017\064\020\060\021\066\022\062\023\073\025" +
    "\067\031\052\032\047\033\100\034\053\035\074\040\061" +
    "\041\054\042\072\043\046\050\056\051\075\054\077\055" +
    "\057\056\101\061\070\062\063\067\065\071\213\075\055" +
    "\077\076\001\002\000\174\002\uffd5\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055" +
    "\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5" +
    "\064\uffd5\065\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5\073" +
    "\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5\001\002" +
    "\000\062\004\uffc4\005\uffc4\006\uffc4\007\uffc4\012\uffc4\013" +
    "\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4\036\uffc4\037\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\052\uffc4\053\uffc4\057" +
    "\uffc4\060\uffc4\063\uffc4\066\uffc4\072\uffc4\073\uffc4\001\002" +
    "\000\174\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\051\015\071\016\050" +
    "\017\064\020\060\021\066\022\062\023\073\024\uffe4\025" +
    "\067\026\uffe4\027\uffe4\030\uffe4\031\052\032\047\033\100" +
    "\034\053\035\074\036\uffe4\037\uffe4\040\061\041\054\042" +
    "\072\043\046\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\056" +
    "\051\075\052\uffe4\053\uffe4\054\077\055\057\056\101\057" +
    "\uffe4\060\uffe4\061\070\062\063\063\uffe4\064\uffe4\065\uffe4" +
    "\067\065\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075" +
    "\055\076\uffe4\077\076\100\uffe4\001\002\000\174\002\uffef" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef" +
    "\036\uffef\037\uffef\040\uffef\041\uffef\042\072\043\uffef\044" +
    "\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061" +
    "\uffef\062\uffef\063\uffef\064\uffef\065\uffef\067\065\070\uffef" +
    "\071\uffef\072\uffef\073\uffef\074\uffef\075\uffef\076\uffef\077" +
    "\uffef\100\uffef\001\002\000\150\004\034\005\044\006\016" +
    "\007\020\012\023\013\031\014\051\015\071\016\050\017" +
    "\064\020\060\021\066\022\062\023\073\024\025\025\067" +
    "\026\014\027\033\030\042\031\052\032\047\033\100\034" +
    "\053\035\074\036\035\037\040\040\061\041\054\042\072" +
    "\043\046\044\026\045\011\046\005\047\013\050\056\051" +
    "\075\052\010\053\024\054\077\055\057\056\101\057\015" +
    "\060\032\061\070\062\063\063\037\067\065\072\027\073" +
    "\036\075\055\077\076\001\002\000\174\002\ufff1\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\014\051\015\071\016\050\017\064\020\060\021\066" +
    "\022\062\023\073\024\ufff1\025\067\026\ufff1\027\ufff1\030" +
    "\ufff1\031\052\032\047\033\100\034\053\035\074\036\ufff1" +
    "\037\ufff1\040\061\041\054\042\072\043\ufff1\044\ufff1\045" +
    "\ufff1\046\ufff1\047\ufff1\050\056\051\075\052\ufff1\053\ufff1" +
    "\054\ufff1\055\057\056\101\057\ufff1\060\ufff1\061\070\062" +
    "\063\063\ufff1\064\ufff1\065\ufff1\067\065\070\ufff1\071\ufff1" +
    "\072\ufff1\073\ufff1\074\ufff1\075\055\076\ufff1\077\076\100" +
    "\ufff1\001\002\000\004\002\001\001\002\000\174\002\uffe6" +
    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\051\015\071\016\050\017\064\020\060" +
    "\021\066\022\062\023\073\024\uffe6\025\067\026\uffe6\027" +
    "\uffe6\030\uffe6\031\052\032\047\033\100\034\053\035\074" +
    "\036\uffe6\037\uffe6\040\061\041\054\042\072\043\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\050\056\051\075\052\uffe6" +
    "\053\uffe6\054\uffe6\055\057\056\101\057\uffe6\060\uffe6\061" +
    "\070\062\063\063\uffe6\064\uffe6\065\uffe6\067\065\070\uffe6" +
    "\071\uffe6\072\uffe6\073\uffe6\074\uffe6\075\055\076\uffe6\077" +
    "\076\100\uffe6\001\002\000\174\002\ufff0\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\042\072\043\ufff0\044\ufff0\045\ufff0\046" +
    "\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063" +
    "\ufff0\064\ufff0\065\ufff0\067\065\070\ufff0\071\ufff0\072\ufff0" +
    "\073\ufff0\074\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0\001" +
    "\002\000\174\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8" +
    "\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065" +
    "\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8" +
    "\075\uffe8\076\uffe8\077\uffe8\100\uffe8\001\002\000\174\002" +
    "\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\067\uffcb\070" +
    "\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\076\uffcb" +
    "\077\uffcb\100\uffcb\001\002\000\004\007\226\001\002\000" +
    "\004\021\227\001\002\000\060\004\034\005\044\006\016" +
    "\007\020\012\023\013\031\024\025\026\014\027\033\030" +
    "\042\036\035\037\040\044\026\045\011\046\005\047\013" +
    "\052\010\053\024\057\015\060\032\063\037\072\027\073" +
    "\036\001\002\000\174\002\uffcc\004\uffcc\005\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\051\015" +
    "\071\016\050\017\064\020\060\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\072\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\057" +
    "\056\101\057\uffcc\060\uffcc\061\070\062\063\063\uffcc\064" +
    "\uffcc\065\uffcc\067\065\070\uffcc\071\uffcc\072\uffcc\073\uffcc" +
    "\074\uffcc\075\uffcc\076\uffcc\077\076\100\uffcc\001\002\000" +
    "\150\004\034\005\044\006\016\007\020\012\023\013\031" +
    "\014\051\015\071\016\050\017\064\020\060\021\066\022" +
    "\062\023\073\024\025\025\067\026\014\027\033\030\042" +
    "\031\052\032\047\033\100\034\053\035\074\036\035\037" +
    "\040\040\061\041\054\042\072\043\046\044\026\045\011" +
    "\046\005\047\013\050\056\051\075\052\010\053\024\054" +
    "\077\055\057\056\101\057\015\060\032\061\070\062\063" +
    "\063\037\067\065\072\027\073\036\075\055\077\076\001" +
    "\002\000\174\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\051\015\071\016" +
    "\050\017\064\020\060\021\066\022\062\023\073\024\ufff2" +
    "\025\067\026\ufff2\027\ufff2\030\ufff2\031\052\032\047\033" +
    "\100\034\053\035\074\036\ufff2\037\ufff2\040\061\041\054" +
    "\042\072\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050" +
    "\056\051\075\052\ufff2\053\ufff2\054\ufff2\055\057\056\101" +
    "\057\ufff2\060\ufff2\061\070\062\063\063\ufff2\064\ufff2\065" +
    "\ufff2\067\065\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2" +
    "\075\055\076\ufff2\077\076\100\ufff2\001\002\000\174\002" +
    "\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\067\uffc9\070" +
    "\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9" +
    "\077\uffc9\100\uffc9\001\002\000\004\007\235\001\002\000" +
    "\004\021\236\001\002\000\060\004\034\005\044\006\016" +
    "\007\020\012\023\013\031\024\025\026\014\027\033\030" +
    "\042\036\035\037\040\044\026\045\011\046\005\047\013" +
    "\052\010\053\024\057\015\060\032\063\037\072\027\073" +
    "\036\001\002\000\174\002\uffca\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\051\015" +
    "\071\016\050\017\064\020\060\021\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\072\043\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\057" +
    "\056\101\057\uffca\060\uffca\061\070\062\063\063\uffca\064" +
    "\uffca\065\uffca\067\065\070\uffca\071\uffca\072\uffca\073\uffca" +
    "\074\uffca\075\uffca\076\uffca\077\076\100\uffca\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\026\002\021\003\011\005\042\006\003\007" +
    "\027\010\020\011\006\012\040\017\005\020\016\001\001" +
    "\000\002\001\001\000\024\003\232\005\042\006\003\007" +
    "\027\010\020\011\006\012\040\017\005\020\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\230\005" +
    "\042\006\003\007\027\010\020\011\006\012\040\017\005" +
    "\020\016\001\001\000\024\003\223\005\042\006\003\007" +
    "\027\010\020\011\006\012\040\017\005\020\016\001\001" +
    "\000\002\001\001\000\024\003\222\005\042\006\003\007" +
    "\027\010\020\011\006\012\040\017\005\020\016\001\001" +
    "\000\024\003\221\005\042\006\003\007\027\010\020\011" +
    "\006\012\040\017\005\020\016\001\001\000\024\003\220" +
    "\005\042\006\003\007\027\010\020\011\006\012\040\017" +
    "\005\020\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\215\005\042\006\003\007\027" +
    "\010\020\011\006\012\040\017\005\020\016\001\001\000" +
    "\024\003\214\005\042\006\003\007\027\010\020\011\006" +
    "\012\040\017\005\020\016\001\001\000\024\003\213\005" +
    "\042\006\003\007\027\010\020\011\006\012\040\017\005" +
    "\020\016\001\001\000\024\003\205\005\042\006\003\007" +
    "\027\010\020\011\006\012\040\017\005\020\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\200\005" +
    "\042\006\003\007\027\010\020\011\006\012\040\017\005" +
    "\020\016\001\001\000\024\003\177\005\042\006\003\007" +
    "\027\010\020\011\006\012\040\017\005\020\016\001\001" +
    "\000\002\001\001\000\024\003\176\005\042\006\003\007" +
    "\027\010\020\011\006\012\040\017\005\020\016\001\001" +
    "\000\006\007\162\021\160\001\001\000\024\003\156\005" +
    "\042\006\003\007\027\010\020\011\006\012\040\017\005" +
    "\020\016\001\001\000\024\003\155\005\042\006\003\007" +
    "\027\010\020\011\006\012\040\017\005\020\016\001\001" +
    "\000\002\001\001\000\024\003\044\005\042\006\003\007" +
    "\027\010\020\011\006\012\040\017\005\020\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\154\005\042\006\003\007\027\010\020\011\006" +
    "\012\040\017\005\020\016\001\001\000\024\003\153\005" +
    "\042\006\003\007\027\010\020\011\006\012\040\017\005" +
    "\020\016\001\001\000\024\003\152\005\042\006\003\007" +
    "\027\010\020\011\006\012\040\017\005\020\016\001\001" +
    "\000\024\003\151\005\042\006\003\007\027\010\020\011" +
    "\006\012\040\017\005\020\016\001\001\000\024\003\150" +
    "\005\042\006\003\007\027\010\020\011\006\012\040\017" +
    "\005\020\016\001\001\000\024\003\147\005\042\006\003" +
    "\007\027\010\020\011\006\012\040\017\005\020\016\001" +
    "\001\000\024\003\146\005\042\006\003\007\027\010\020" +
    "\011\006\012\040\017\005\020\016\001\001\000\024\003" +
    "\143\005\042\006\003\007\027\010\020\011\006\012\040" +
    "\017\005\020\016\001\001\000\030\003\132\005\042\006" +
    "\003\007\027\010\020\011\006\012\040\013\131\014\133" +
    "\017\005\020\016\001\001\000\004\007\130\001\001\000" +
    "\024\003\127\005\042\006\003\007\027\010\020\011\006" +
    "\012\040\017\005\020\016\001\001\000\024\003\126\005" +
    "\042\006\003\007\027\010\020\011\006\012\040\017\005" +
    "\020\016\001\001\000\024\003\125\005\042\006\003\007" +
    "\027\010\020\011\006\012\040\017\005\020\016\001\001" +
    "\000\024\003\124\005\042\006\003\007\027\010\020\011" +
    "\006\012\040\017\005\020\016\001\001\000\024\003\123" +
    "\005\042\006\003\007\027\010\020\011\006\012\040\017" +
    "\005\020\016\001\001\000\026\003\115\005\042\006\003" +
    "\007\027\010\020\011\006\012\040\017\005\020\016\022" +
    "\116\001\001\000\024\003\114\005\042\006\003\007\027" +
    "\010\020\011\006\012\040\017\005\020\016\001\001\000" +
    "\024\003\113\005\042\006\003\007\027\010\020\011\006" +
    "\012\040\017\005\020\016\001\001\000\024\003\112\005" +
    "\042\006\003\007\027\010\020\011\006\012\040\017\005" +
    "\020\016\001\001\000\024\003\111\005\042\006\003\007" +
    "\027\010\020\011\006\012\040\017\005\020\016\001\001" +
    "\000\024\003\110\005\042\006\003\007\027\010\020\011" +
    "\006\012\040\017\005\020\016\001\001\000\024\003\107" +
    "\005\042\006\003\007\027\010\020\011\006\012\040\017" +
    "\005\020\016\001\001\000\024\003\106\005\042\006\003" +
    "\007\027\010\020\011\006\012\040\017\005\020\016\001" +
    "\001\000\024\003\105\005\042\006\003\007\027\010\020" +
    "\011\006\012\040\017\005\020\016\001\001\000\024\003" +
    "\104\005\042\006\003\007\027\010\020\011\006\012\040" +
    "\017\005\020\016\001\001\000\024\003\103\005\042\006" +
    "\003\007\027\010\020\011\006\012\040\017\005\020\016" +
    "\001\001\000\024\003\102\005\042\006\003\007\027\010" +
    "\020\011\006\012\040\017\005\020\016\001\001\000\004" +
    "\007\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\122\005\042\006\003\007\027\010\020\011\006" +
    "\012\040\017\005\020\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\140\005\042\006\003\007\027\010\020" +
    "\011\006\012\040\017\005\020\016\001\001\000\002\001" +
    "\001\000\026\003\132\005\042\006\003\007\027\010\020" +
    "\011\006\012\040\014\142\017\005\020\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\145\005\042" +
    "\006\003\007\027\010\020\011\006\012\040\017\005\020" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\165\021\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\167\005\042\006\003\007\027\010\020\011\006\012\040" +
    "\017\005\020\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\173\005\042\006\003" +
    "\007\027\010\020\011\006\012\040\017\005\020\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\202\005\042\006\003\007\027\010\020\011\006" +
    "\012\040\017\005\020\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\207\001\001\000\024\003\210\005\042\006\003\007" +
    "\027\010\020\011\006\012\040\017\005\020\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\216\005\042" +
    "\006\003\007\027\010\020\011\006\012\040\017\005\020" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\227" +
    "\005\042\006\003\007\027\010\020\011\006\012\040\017" +
    "\005\020\016\001\001\000\002\001\001\000\024\003\231" +
    "\005\042\006\003\007\027\010\020\011\006\012\040\017" +
    "\005\020\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\236\005" +
    "\042\006\003\007\027\010\020\011\006\012\040\017\005" +
    "\020\016\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 	    lexer = new Lexer(new StringReader(expr)); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
		return lexer.next_token(); 
    }

 
	public Lexer lexer;
	private String expr;
	public Expression RESULT;
	public List<JavaParamExpression> javaParams = new ArrayList<JavaParamExpression>();
		
	
	public ParserCup(String expr) {
		this.symbolFactory = new SBQLSymbolFactory();   
		this.expr = expr;
	}
	
	
	
	void setResult(Expression exp) {
		this.RESULT = exp;
	} 
	
//	void addJavaParamExpr(JavaParamExpression expr) { 
//		javaParams.add(expr);
//	}
	
	public void report_fatal_error(String message, Object info) throws ParserException {
		Token token = (Token) info;
	
		throw new ParserException(message, token.left + 1, token.right + 1, token.pos + 1, token.value.toString());
	}
	
	public int getCurrentPos() {
//		java_cup.runtime.Symbol s = (java_cup.runtime.Symbol)stack.peek();
//		return s.right;
		Object s = stack.peek();
		if(s instanceof pl.wcislo.sbql4j.lang.parser.Token) {
			pl.wcislo.sbql4j.lang.parser.Token t = (pl.wcislo.sbql4j.lang.parser.Token)s;
			return t.pos;
		} else {
			return -1;
		}
	}
	
	public int getPosition(int tokenStackDistance) {
		int index = stack.size() - tokenStackDistance - 1;
		Object s = stack.get(index);
		if(s instanceof pl.wcislo.sbql4j.lang.parser.Token) {
			pl.wcislo.sbql4j.lang.parser.Token t = (pl.wcislo.sbql4j.lang.parser.Token)s;
			return t.pos;
		} else {
			return -1;
		}
	}
	
	public void report_error(String message, Object info) {
		report_fatal_error(message, info);
	}

	public void unrecovered_syntax_error(Symbol symbol) {
		Token token = (Token)symbol;
		String tokenString = token.toString();
		if(token.value != null)
			tokenString += " (" + token.value + ")";
		report_fatal_error("Unexpected token " + tokenString, token);
	}

	public void syntax_error(Symbol symbol) {
		Token token = (Token)symbol;
		String tokenString = token.toString();
		if(token.value != null)
			tokenString += " (" + token.value + ")";
		report_fatal_error("Unexpected token " + tokenString, token);
	}
	 


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sort_order ::= GROUPBY_DESC 
            {
              SortType RESULT =null;
		 RESULT = SortType.DESC; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sort_order",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sort_order ::= GROUPBY_ASC 
            {
              SortType RESULT =null;
		 RESULT = SortType.ASC; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sort_order",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sort_order ::= 
            {
              SortType RESULT =null;
		 RESULT = SortType.ASC; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sort_order",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // order_by_param ::= expr sort_order USING expr 
            {
              OrderByParamExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		SortType s = (SortType)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int comparatorExprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int comparatorExprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression comparatorExpr = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new OrderByParamExpression(e1.position, e1, s, comparatorExpr); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("order_by_param",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // order_by_param ::= expr sort_order 
            {
              OrderByParamExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		SortType s = (SortType)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new OrderByParamExpression(e1.position, e1, s, null); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("order_by_param",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // order_by_param_list ::= order_by_param_list SEMICOLON order_by_param 
            {
              List<OrderByParamExpression> RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<OrderByParamExpression> p2 = (List<OrderByParamExpression>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		OrderByParamExpression p1 = (OrderByParamExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		p2.add(p1); 
		RESULT = p2; 
	  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("order_by_param_list",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // order_by_param_list ::= order_by_param 
            {
              List<OrderByParamExpression> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		OrderByParamExpression p1 = (OrderByParamExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 
	  	List<OrderByParamExpression> list = new ArrayList<OrderByParamExpression>();
	  	list.add(p1); 
	  	RESULT = list; 
	  
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("order_by_param_list",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // order_by_expr ::= expr ORDER_BY order_by_param_list 
            {
              OrderByExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<OrderByParamExpression> e2 = (List<OrderByParamExpression>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new OrderByExpression(parser.getCurrentPos(), e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("order_by_expr",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // constr_expr ::= NEW IDENTIFIER LEFT_ROUND_BRACKET expr RIGHT_ROUND_BRACKET 
            {
              ConstructorExpression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int paramsExprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int paramsExprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression paramsExpr = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
			RESULT = new ConstructorExpression(parser.getPosition(4), className, paramsExpr);
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constr_expr",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // constr_expr ::= NEW IDENTIFIER LEFT_ROUND_BRACKET RIGHT_ROUND_BRACKET 
            {
              ConstructorExpression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
			RESULT = new ConstructorExpression(parser.getPosition(3), className, null);
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constr_expr",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // constr_expr ::= NEW dot_ident_expr LEFT_ROUND_BRACKET expr RIGHT_ROUND_BRACKET 
            {
              ConstructorExpression RESULT =null;
		int classNameExprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int classNameExprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		DotExpression classNameExpr = (DotExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int paramsExprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int paramsExprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression paramsExpr = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
			RESULT = new ConstructorExpression(parser.getPosition(4), classNameExpr, paramsExpr);
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constr_expr",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // constr_expr ::= NEW dot_ident_expr LEFT_ROUND_BRACKET RIGHT_ROUND_BRACKET 
            {
              ConstructorExpression RESULT =null;
		int classNameExprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int classNameExprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		DotExpression classNameExpr = (DotExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
			RESULT = new ConstructorExpression(parser.getPosition(3), classNameExpr, null);
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constr_expr",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // method_expr ::= identifier_literal LEFT_ROUND_BRACKET expr RIGHT_ROUND_BRACKET 
            {
              MethodExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Name l = (Name)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 
			String mName = l.val.substring(0, l.val.length()).trim(); 
			int pos = parser.getCurrentPos();
			RESULT = new MethodExpression(pos, mName, e1);
			   
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("method_expr",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // method_expr ::= identifier_literal LEFT_ROUND_BRACKET RIGHT_ROUND_BRACKET 
            {
              MethodExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Name l = (Name)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 
			String mName = l.val; 
			int pos = parser.getCurrentPos();
			RESULT = new MethodExpression(pos, mName, null); 
		
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("method_expr",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literal_expression ::= CHAR_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Character l = (Character)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LiteralExpression<Character>(parser.getCurrentPos(), (Character)l); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal_expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // literal_expression ::= STRING_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LiteralExpression<String>(parser.getCurrentPos(), (String)l); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal_expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // literal_expression ::= BOOLEAN_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LiteralExpression<Boolean>(parser.getCurrentPos(), (Boolean)l); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal_expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // literal_expression ::= DOUBLE_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Double l = (Double)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LiteralExpression<Double>(parser.getCurrentPos(), (Double)l); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal_expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // literal_expression ::= INTEGER_LITERAL 
            {
              LiteralExpression< ? > RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LiteralExpression<Integer>(parser.getCurrentPos(), (Integer)l); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal_expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // identifier_literal ::= IDENTIFIER 
            {
              Name RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Name(l, parser.getCurrentPos()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("identifier_literal",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exprs ::= exprs expr SEMICOLON 
            {
              List<Expression> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<Expression> es = (List<Expression>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 es.add(e1); RESULT=es; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exprs",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exprs ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new ArrayList<Expression>(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("exprs",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dot_ident_expr ::= identifier_literal DOT dot_ident_expr 
            {
              DotExpression RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Name i1 = (Name)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		DotExpression i2 = (DotExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new DotExpression(parser.getCurrentPos(), new NameExpression(parser.getCurrentPos(), i1), i2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dot_ident_expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dot_ident_expr ::= identifier_literal DOT identifier_literal 
            {
              DotExpression RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Name i1 = (Name)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Name i2 = (Name)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new DotExpression(parser.getCurrentPos(), new NameExpression(parser.getCurrentPos(), i1), new NameExpression(parser.getCurrentPos(), i2)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dot_ident_expr",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dot_expr ::= expr DOT expr 
            {
              DotExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new DotExpression(parser.getCurrentPos(), e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("dot_expr",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sequence_expr ::= SEQUENCE expr 
            {
              UnarySimpleOperatorExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnarySimpleOperatorExpression(parser.getCurrentPos(), e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sequence_expr",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sequence_expr ::= SEQUENCE LESS IDENTIFIER MORE expr 
            {
              UnarySimpleOperatorExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnarySimpleOperatorExpression(parser.getCurrentPos(), e1, OperatorFactory.getOperator(o), new NameExpression(parser.getCurrentPos(), new Name(i, parser.getCurrentPos()))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("sequence_expr",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bag_expr ::= BAG expr 
            {
              UnarySimpleOperatorExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnarySimpleOperatorExpression(parser.getCurrentPos(), e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bag_expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bag_expr ::= BAG LESS IDENTIFIER MORE expr 
            {
              UnarySimpleOperatorExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnarySimpleOperatorExpression(parser.getCurrentPos(), e1, OperatorFactory.getOperator(o), new NameExpression(parser.getCurrentPos(), new Name(i, parser.getCurrentPos()))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bag_expr",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // range_expr ::= expr RANGE MULTIPLY 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new RangeExpression(parser.getPosition(1), e1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("range_expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // range_expr ::= expr RANGE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new RangeExpression(parser.getPosition(1), e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("range_expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // range_expr ::= expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = e1; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("range_expr",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= order_by_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		OrderByExpression e = (OrderByExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr QUESTION_MARK expr COLON expr 
            {
              Expression RESULT =null;
		int condExprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int condExprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Expression condExpr = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int trueExprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int trueExprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression trueExpr = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int falseExprleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int falseExprright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression falseExpr = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ConditionalExpression(parser.getPosition(3), condExpr, trueExpr,  falseExpr); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr LEFT_BOX_BRACKET range_expr RIGHT_BOX_BRACKET 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(2), e1, e2,  OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= method_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		MethodExpression e = (MethodExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= constr_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		ConstructorExpression e = (ConstructorExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= FOREACH expr LEFT_CURLY_BRACKET exprs RIGHT_CURLY_BRACKET 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<Expression> es = (List<Expression>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new ForEachExpression(e1.position, e1, es); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr CLOSE_BY expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new CloseByExpression(parser.getPosition(1), e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= LEFT_ROUND_BRACKET expr RIGHT_ROUND_BRACKET 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = e1; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= identifier_literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Name l = (Name)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new NameExpression(l.pos, l); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= literal_expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		LiteralExpression< ? > l = (LiteralExpression< ? >)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = l; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr INTERSECT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1,e2,  OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr IN expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr COMA expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ComaExpression(parser.getPosition(1), e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr INSTANCEOF expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr LESS_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr MORE_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr LESS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr WHERE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new WhereExpression(parser.getPosition(1), e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr GROUP_AS identifier_literal 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Name l = (Name)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new GroupAsExpression(parser.getPosition(1), e1, l); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr AS identifier_literal 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Name l = (Name)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new AsExpression(parser.getPosition(1), e1, l); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= DEREF expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new DerefExpression(parser.getPosition(1), e1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= EXISTS expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnarySimpleOperatorExpression(parser.getPosition(1), e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnarySimpleOperatorExpression(parser.getPosition(1), e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr MINUS_FUNCTION expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= STRUCT expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnarySimpleOperatorExpression(parser.getPosition(1), e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= sequence_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		UnarySimpleOperatorExpression e = (UnarySimpleOperatorExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= bag_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		UnarySimpleOperatorExpression e = (UnarySimpleOperatorExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= MAX expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnarySimpleOperatorExpression(parser.getPosition(1), e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= MIN expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnarySimpleOperatorExpression(parser.getPosition(1), e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= AVG expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnarySimpleOperatorExpression(parser.getPosition(1), e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= COUNT expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnarySimpleOperatorExpression(parser.getPosition(1), e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= UNIQUE expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnarySimpleOperatorExpression(parser.getPosition(1), e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= SUM expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new UnarySimpleOperatorExpression(parser.getPosition(1), e1, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= FORANY expr expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ForanyExpression(parser.getPosition(2), e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= FORALL expr expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ForallExpression(parser.getPosition(2), e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr JOIN expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new JoinExpression(parser.getPosition(1), e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= dot_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		DotExpression e = (DotExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr UNION expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr AND expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr OR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr MORE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr NOT_EQUALS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr EQUALS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr MODULO expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr DIVIDE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= expr MULTIPLY expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new BinarySimpleOperatorExpression(parser.getPosition(1), e1, e2, OperatorFactory.getOperator(o)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = e; parser.setResult(e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression start_val = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

