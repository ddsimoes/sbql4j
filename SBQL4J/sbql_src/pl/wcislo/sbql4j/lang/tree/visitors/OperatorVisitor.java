package pl.wcislo.sbql4j.lang.tree.visitors;

import pl.wcislo.sbql4j.lang.parser.expression.Expression;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorAnd;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorAvg;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorBag;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorComma;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorCount;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorDivide;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorElementAt;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorEquals;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorExcept;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorExists;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorIn;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorInstanceof;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorIntersect;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorLess;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorLessOrEqual;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorMax;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorMin;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorMinus;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorModulo;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorMore;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorMoreOrEqual;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorMultiply;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorNot;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorNotEquals;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorOr;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorPlus;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorSequence;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorStruct;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorSum;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorUnion;
import pl.wcislo.sbql4j.lang.parser.terminals.operators.OperatorUnique;

public interface OperatorVisitor<T, V extends TreeVisitor> {
	public T visitAnd(OperatorAnd op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitAvg(OperatorAvg op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitBag(OperatorBag op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitComma(OperatorComma op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitCount(OperatorCount op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitDivide(OperatorDivide op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitElementAt(OperatorElementAt op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitEquals(OperatorEquals op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitExcept(OperatorExcept op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitExists(OperatorExists op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitIn(OperatorIn op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitInstanceof(OperatorInstanceof op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitIntersect(OperatorIntersect op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitLess(OperatorLess op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitLessOrEqual(OperatorLessOrEqual op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitMax(OperatorMax op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitMin(OperatorMin op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitMinus(OperatorMinus op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitModulo(OperatorModulo op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitMore(OperatorMore op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitMoreOrEqual(OperatorMoreOrEqual op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitMultiply(OperatorMultiply op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitNot(OperatorNot op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitNotEquals(OperatorNotEquals op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitOr(OperatorOr op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitPlus(OperatorPlus op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitSequence(OperatorSequence op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitStruct(OperatorStruct op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitSum(OperatorSum op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitUnion(OperatorUnion op, V treeVisitor, Expression opExpr, Expression... subExprs);
	public T visitUnique(OperatorUnique op, V treeVisitor, Expression opExpr, Expression... subExprs);
	
//	public T visitDot(OperatorDot op, V treeVisitor, Expression... exprs);
}
